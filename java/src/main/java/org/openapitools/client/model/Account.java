/*
 * Railway
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Account
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-24T10:47:59.076628+03:00[Europe/Helsinki]")
public class Account {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private String address;

  public static final String SERIALIZED_NAME_PUBLIC_KEY = "public_key";
  @SerializedName(SERIALIZED_NAME_PUBLIC_KEY)
  private String publicKey;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NONCE = "nonce";
  @SerializedName(SERIALIZED_NAME_NONCE)
  private Integer nonce;

  public static final String SERIALIZED_NAME_BALANCES = "balances";
  @SerializedName(SERIALIZED_NAME_BALANCES)
  private String balances;

  public static final String SERIALIZED_NAME_LOCKED_BALANCES = "locked_balances";
  @SerializedName(SERIALIZED_NAME_LOCKED_BALANCES)
  private String lockedBalances;

  public static final String SERIALIZED_NAME_STAKES = "stakes";
  @SerializedName(SERIALIZED_NAME_STAKES)
  private String stakes;

  public static final String SERIALIZED_NAME_VALIDATOR = "validator";
  @SerializedName(SERIALIZED_NAME_VALIDATOR)
  private String validator;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private String metadata;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public Account() {
  }

  public Account id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * The internal id of the object.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "The internal id of the object.")

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    this.id = id;
  }


  public Account address(String address) {
    
    this.address = address;
    return this;
  }

   /**
   * The id of the object.
   * @return address
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "bear14v4nt0x5jryeagz2x6nad02pk9y6kjlwcav365l20emh8ht2q275ttfg8yq3ch43lpp8z22xyfxqxkpm0f7", value = "The id of the object.")

  public String getAddress() {
    return address;
  }


  public void setAddress(String address) {
    this.address = address;
  }


  public Account publicKey(String publicKey) {
    
    this.publicKey = publicKey;
    return this;
  }

   /**
   * The id of the object.
   * @return publicKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "ab2b35bcd490c99ea04a36a7d6bd41b149ab4beec7591d53ea7e7773dd6a02bd45ad2839011c5eb1f842712946224c03", value = "The id of the object.")

  public String getPublicKey() {
    return publicKey;
  }


  public void setPublicKey(String publicKey) {
    this.publicKey = publicKey;
  }


  public Account name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The id of the object.
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "johndoe", value = "The id of the object.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public Account nonce(Integer nonce) {
    
    this.nonce = nonce;
    return this;
  }

   /**
   * The id of the object.
   * @return nonce
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "The id of the object.")

  public Integer getNonce() {
    return nonce;
  }


  public void setNonce(Integer nonce) {
    this.nonce = nonce;
  }


  public Account balances(String balances) {
    
    this.balances = balances;
    return this;
  }

   /**
   * The id of the object.
   * @return balances
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "{\"BEAR\":\"9999999900000000\",\"FIRE\":\"9999999900000000\",\"GOLD\":\"9999999900000000\",\"SEED\":\"9999999900000000\"}", value = "The id of the object.")

  public String getBalances() {
    return balances;
  }


  public void setBalances(String balances) {
    this.balances = balances;
  }


  public Account lockedBalances(String lockedBalances) {
    
    this.lockedBalances = lockedBalances;
    return this;
  }

   /**
   * The id of the object.
   * @return lockedBalances
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "{\"BEAR\":\"0\",\"FIRE\":\"0\",\"GOLD\":\"0\",\"SEED\":\"0\"}", value = "The id of the object.")

  public String getLockedBalances() {
    return lockedBalances;
  }


  public void setLockedBalances(String lockedBalances) {
    this.lockedBalances = lockedBalances;
  }


  public Account stakes(String stakes) {
    
    this.stakes = stakes;
    return this;
  }

   /**
   * The id of the object.
   * @return stakes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "{\"johndoe\":\"9999999900000000\"}", value = "The id of the object.")

  public String getStakes() {
    return stakes;
  }


  public void setStakes(String stakes) {
    this.stakes = stakes;
  }


  public Account validator(String validator) {
    
    this.validator = validator;
    return this;
  }

   /**
   * The id of the object.
   * @return validator
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "{\"address\":\"5c6b8588b0cccde01c43286b1e698519dd27ceee\",\"publicKey\":\"fc795a9741081019b15ef5e34131e3d41bb59fccb99b6bae1419820fd300bfcf\",\"power\":\"1\"}", value = "The id of the object.")

  public String getValidator() {
    return validator;
  }


  public void setValidator(String validator) {
    this.validator = validator;
  }


  public Account metadata(String metadata) {
    
    this.metadata = metadata;
    return this;
  }

   /**
   * The id of the object.
   * @return metadata
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "[]", value = "The id of the object.")

  public String getMetadata() {
    return metadata;
  }


  public void setMetadata(String metadata) {
    this.metadata = metadata;
  }


  public Account createdAt(OffsetDateTime createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * The creation date of the object.
   * @return createdAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2022-10-09T02:12:24Z", value = "The creation date of the object.")

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public Account updatedAt(OffsetDateTime updatedAt) {
    
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * The updating date of the object.
   * @return updatedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2022-10-09T02:12:24Z", value = "The updating date of the object.")

  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }


  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Account account = (Account) o;
    return Objects.equals(this.id, account.id) &&
        Objects.equals(this.address, account.address) &&
        Objects.equals(this.publicKey, account.publicKey) &&
        Objects.equals(this.name, account.name) &&
        Objects.equals(this.nonce, account.nonce) &&
        Objects.equals(this.balances, account.balances) &&
        Objects.equals(this.lockedBalances, account.lockedBalances) &&
        Objects.equals(this.stakes, account.stakes) &&
        Objects.equals(this.validator, account.validator) &&
        Objects.equals(this.metadata, account.metadata) &&
        Objects.equals(this.createdAt, account.createdAt) &&
        Objects.equals(this.updatedAt, account.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, address, publicKey, name, nonce, balances, lockedBalances, stakes, validator, metadata, createdAt, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Account {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    publicKey: ").append(toIndentedString(publicKey)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nonce: ").append(toIndentedString(nonce)).append("\n");
    sb.append("    balances: ").append(toIndentedString(balances)).append("\n");
    sb.append("    lockedBalances: ").append(toIndentedString(lockedBalances)).append("\n");
    sb.append("    stakes: ").append(toIndentedString(stakes)).append("\n");
    sb.append("    validator: ").append(toIndentedString(validator)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("address");
    openapiFields.add("public_key");
    openapiFields.add("name");
    openapiFields.add("nonce");
    openapiFields.add("balances");
    openapiFields.add("locked_balances");
    openapiFields.add("stakes");
    openapiFields.add("validator");
    openapiFields.add("metadata");
    openapiFields.add("created_at");
    openapiFields.add("updated_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Account
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (Account.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in Account is not found in the empty JSON string", Account.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Account.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Account` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) && !jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      if ((jsonObj.get("public_key") != null && !jsonObj.get("public_key").isJsonNull()) && !jsonObj.get("public_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `public_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("public_key").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("balances") != null && !jsonObj.get("balances").isJsonNull()) && !jsonObj.get("balances").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `balances` to be a primitive type in the JSON string but got `%s`", jsonObj.get("balances").toString()));
      }
      if ((jsonObj.get("locked_balances") != null && !jsonObj.get("locked_balances").isJsonNull()) && !jsonObj.get("locked_balances").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locked_balances` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locked_balances").toString()));
      }
      if ((jsonObj.get("stakes") != null && !jsonObj.get("stakes").isJsonNull()) && !jsonObj.get("stakes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stakes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stakes").toString()));
      }
      if ((jsonObj.get("validator") != null && !jsonObj.get("validator").isJsonNull()) && !jsonObj.get("validator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `validator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("validator").toString()));
      }
      if ((jsonObj.get("metadata") != null && !jsonObj.get("metadata").isJsonNull()) && !jsonObj.get("metadata").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metadata` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metadata").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Account.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Account' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Account> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Account.class));

       return (TypeAdapter<T>) new TypeAdapter<Account>() {
           @Override
           public void write(JsonWriter out, Account value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Account read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Account given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Account
  * @throws IOException if the JSON string is invalid with respect to Account
  */
  public static Account fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Account.class);
  }

 /**
  * Convert an instance of Account to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

