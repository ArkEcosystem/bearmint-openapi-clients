/**
 * Railway
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import org.openapitools.client.models.AnyOfLessThanStringCommaStringCommaStringCommaStringCommaStringCommaStringCommaStringCommaStringCommaStringCommaStringGreaterThan
import org.openapitools.client.models.AnyOfLessThanStringCommaStringCommaStringCommaStringCommaStringCommaStringCommaStringCommaStringCommaStringGreaterThan
import org.openapitools.client.models.AnyOfLessThanStringCommaStringCommaStringCommaStringCommaStringCommaStringCommaStringCommaStringGreaterThan
import org.openapitools.client.models.AnyOfLessThanStringCommaStringCommaStringCommaStringCommaStringCommaStringGreaterThan
import org.openapitools.client.models.AnyOfLessThanStringCommaStringCommaStringCommaStringCommaStringGreaterThan
import org.openapitools.client.models.AnyOfLessThanStringCommaStringCommaStringCommaStringGreaterThan
import org.openapitools.client.models.AnyOfLessThanStringCommaStringCommaStringGreaterThan
import org.openapitools.client.models.AnyOfLessThanStringCommaStringGreaterThan
import org.openapitools.client.models.AnyOfLessThanStringGreaterThan
import org.openapitools.client.models.ApiAccountsGet200Response
import org.openapitools.client.models.ApiAccountsMetadataGet200Response
import org.openapitools.client.models.ApiBlocksGet200Response
import org.openapitools.client.models.ApiEntitiesGet200Response
import org.openapitools.client.models.ApiTransactionsGet200Response
import org.openapitools.client.models.ApiTransactionsMetadataGet200Response
import org.openapitools.client.models.ApiTransactionsReceiptsGet200Response
import org.openapitools.client.models.ApiValidatorsUpdatesGet200Response

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class DefaultApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://railway.test")
        }
    }

    /**
     * List accounts
     * 
     * @param fieldsAccounts Include the given fields in the response. (optional)
     * @param filterAddress Filter the results where the [address] field is equal to the given value. (optional)
     * @param filterAddressNeq Filter the results where the [address] field is not equal to the given value. (optional)
     * @param filterAddressLike Filter the results where the [address] field is similar to the given case sensitive value. (optional)
     * @param filterAddressIlike Filter the results where the [address] field is similar to the given case insensitive value. (optional)
     * @param filterPublicKey Filter the results where the [public_key] field is equal to the given value. (optional)
     * @param filterPublicKeyNeq Filter the results where the [public_key] field is not equal to the given value. (optional)
     * @param filterPublicKeyLike Filter the results where the [public_key] field is similar to the given case sensitive value. (optional)
     * @param filterPublicKeyIlike Filter the results where the [public_key] field is similar to the given case insensitive value. (optional)
     * @param filterName Filter the results where the [name] field is equal to the given value. (optional)
     * @param filterNameNeq Filter the results where the [name] field is not equal to the given value. (optional)
     * @param filterNameLike Filter the results where the [name] field is similar to the given case sensitive value. (optional)
     * @param filterNameIlike Filter the results where the [name] field is similar to the given case insensitive value. (optional)
     * @param filterNonce Filter the results where the [nonce] field is equal to the given value. (optional)
     * @param filterValidatorAddress Filter the results where the [validator.address] field is equal to the given value. (optional)
     * @param filterValidatorAddressNeq Filter the results where the [validator.address] field is not equal to the given value. (optional)
     * @param filterValidatorAddressLike Filter the results where the [validator.address] field is similar to the given case sensitive value. (optional)
     * @param filterValidatorAddressIlike Filter the results where the [validator.address] field is similar to the given case insensitive value. (optional)
     * @param filterValidatorPublicKey Filter the results where the [validator.publicKey] field is equal to the given value. (optional)
     * @param filterValidatorPublicKeyNeq Filter the results where the [validator.publicKey] field is not equal to the given value. (optional)
     * @param filterValidatorPublicKeyLike Filter the results where the [validator.publicKey] field is similar to the given case sensitive value. (optional)
     * @param filterValidatorPublicKeyIlike Filter the results where the [validator.publicKey] field is similar to the given case insensitive value. (optional)
     * @param filterValidatorPower Filter the results where the [validator.power] field is equal to the given value. (optional)
     * @param filterValidatorPowerNeq Filter the results where the [validator.power] field is not equal to the given value. (optional)
     * @param filterValidatorPowerLike Filter the results where the [validator.power] field is similar to the given case sensitive value. (optional)
     * @param filterValidatorPowerIlike Filter the results where the [validator.power] field is similar to the given case insensitive value. (optional)
     * @param include Include the given relationships. (optional)
     * @param sort Sort the results by the given field and direction. (optional)
     * @return ApiAccountsGet200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiAccountsGet(fieldsAccounts: ApiAccountsGetFieldsAccountsParameter? = null, filterAddress: kotlin.String? = null, filterAddressNeq: kotlin.String? = null, filterAddressLike: kotlin.String? = null, filterAddressIlike: kotlin.String? = null, filterPublicKey: kotlin.String? = null, filterPublicKeyNeq: kotlin.String? = null, filterPublicKeyLike: kotlin.String? = null, filterPublicKeyIlike: kotlin.String? = null, filterName: kotlin.String? = null, filterNameNeq: kotlin.String? = null, filterNameLike: kotlin.String? = null, filterNameIlike: kotlin.String? = null, filterNonce: kotlin.Int? = null, filterValidatorAddress: kotlin.String? = null, filterValidatorAddressNeq: kotlin.String? = null, filterValidatorAddressLike: kotlin.String? = null, filterValidatorAddressIlike: kotlin.String? = null, filterValidatorPublicKey: kotlin.String? = null, filterValidatorPublicKeyNeq: kotlin.String? = null, filterValidatorPublicKeyLike: kotlin.String? = null, filterValidatorPublicKeyIlike: kotlin.String? = null, filterValidatorPower: kotlin.String? = null, filterValidatorPowerNeq: kotlin.String? = null, filterValidatorPowerLike: kotlin.String? = null, filterValidatorPowerIlike: kotlin.String? = null, include: ApiAccountsGetIncludeParameter? = null, sort: ApiAccountsGetSortParameter? = null) : ApiAccountsGet200Response {
        val localVarResponse = apiAccountsGetWithHttpInfo(fieldsAccounts = fieldsAccounts, filterAddress = filterAddress, filterAddressNeq = filterAddressNeq, filterAddressLike = filterAddressLike, filterAddressIlike = filterAddressIlike, filterPublicKey = filterPublicKey, filterPublicKeyNeq = filterPublicKeyNeq, filterPublicKeyLike = filterPublicKeyLike, filterPublicKeyIlike = filterPublicKeyIlike, filterName = filterName, filterNameNeq = filterNameNeq, filterNameLike = filterNameLike, filterNameIlike = filterNameIlike, filterNonce = filterNonce, filterValidatorAddress = filterValidatorAddress, filterValidatorAddressNeq = filterValidatorAddressNeq, filterValidatorAddressLike = filterValidatorAddressLike, filterValidatorAddressIlike = filterValidatorAddressIlike, filterValidatorPublicKey = filterValidatorPublicKey, filterValidatorPublicKeyNeq = filterValidatorPublicKeyNeq, filterValidatorPublicKeyLike = filterValidatorPublicKeyLike, filterValidatorPublicKeyIlike = filterValidatorPublicKeyIlike, filterValidatorPower = filterValidatorPower, filterValidatorPowerNeq = filterValidatorPowerNeq, filterValidatorPowerLike = filterValidatorPowerLike, filterValidatorPowerIlike = filterValidatorPowerIlike, include = include, sort = sort)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ApiAccountsGet200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * List accounts
     * 
     * @param fieldsAccounts Include the given fields in the response. (optional)
     * @param filterAddress Filter the results where the [address] field is equal to the given value. (optional)
     * @param filterAddressNeq Filter the results where the [address] field is not equal to the given value. (optional)
     * @param filterAddressLike Filter the results where the [address] field is similar to the given case sensitive value. (optional)
     * @param filterAddressIlike Filter the results where the [address] field is similar to the given case insensitive value. (optional)
     * @param filterPublicKey Filter the results where the [public_key] field is equal to the given value. (optional)
     * @param filterPublicKeyNeq Filter the results where the [public_key] field is not equal to the given value. (optional)
     * @param filterPublicKeyLike Filter the results where the [public_key] field is similar to the given case sensitive value. (optional)
     * @param filterPublicKeyIlike Filter the results where the [public_key] field is similar to the given case insensitive value. (optional)
     * @param filterName Filter the results where the [name] field is equal to the given value. (optional)
     * @param filterNameNeq Filter the results where the [name] field is not equal to the given value. (optional)
     * @param filterNameLike Filter the results where the [name] field is similar to the given case sensitive value. (optional)
     * @param filterNameIlike Filter the results where the [name] field is similar to the given case insensitive value. (optional)
     * @param filterNonce Filter the results where the [nonce] field is equal to the given value. (optional)
     * @param filterValidatorAddress Filter the results where the [validator.address] field is equal to the given value. (optional)
     * @param filterValidatorAddressNeq Filter the results where the [validator.address] field is not equal to the given value. (optional)
     * @param filterValidatorAddressLike Filter the results where the [validator.address] field is similar to the given case sensitive value. (optional)
     * @param filterValidatorAddressIlike Filter the results where the [validator.address] field is similar to the given case insensitive value. (optional)
     * @param filterValidatorPublicKey Filter the results where the [validator.publicKey] field is equal to the given value. (optional)
     * @param filterValidatorPublicKeyNeq Filter the results where the [validator.publicKey] field is not equal to the given value. (optional)
     * @param filterValidatorPublicKeyLike Filter the results where the [validator.publicKey] field is similar to the given case sensitive value. (optional)
     * @param filterValidatorPublicKeyIlike Filter the results where the [validator.publicKey] field is similar to the given case insensitive value. (optional)
     * @param filterValidatorPower Filter the results where the [validator.power] field is equal to the given value. (optional)
     * @param filterValidatorPowerNeq Filter the results where the [validator.power] field is not equal to the given value. (optional)
     * @param filterValidatorPowerLike Filter the results where the [validator.power] field is similar to the given case sensitive value. (optional)
     * @param filterValidatorPowerIlike Filter the results where the [validator.power] field is similar to the given case insensitive value. (optional)
     * @param include Include the given relationships. (optional)
     * @param sort Sort the results by the given field and direction. (optional)
     * @return ApiResponse<ApiAccountsGet200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiAccountsGetWithHttpInfo(fieldsAccounts: ApiAccountsGetFieldsAccountsParameter?, filterAddress: kotlin.String?, filterAddressNeq: kotlin.String?, filterAddressLike: kotlin.String?, filterAddressIlike: kotlin.String?, filterPublicKey: kotlin.String?, filterPublicKeyNeq: kotlin.String?, filterPublicKeyLike: kotlin.String?, filterPublicKeyIlike: kotlin.String?, filterName: kotlin.String?, filterNameNeq: kotlin.String?, filterNameLike: kotlin.String?, filterNameIlike: kotlin.String?, filterNonce: kotlin.Int?, filterValidatorAddress: kotlin.String?, filterValidatorAddressNeq: kotlin.String?, filterValidatorAddressLike: kotlin.String?, filterValidatorAddressIlike: kotlin.String?, filterValidatorPublicKey: kotlin.String?, filterValidatorPublicKeyNeq: kotlin.String?, filterValidatorPublicKeyLike: kotlin.String?, filterValidatorPublicKeyIlike: kotlin.String?, filterValidatorPower: kotlin.String?, filterValidatorPowerNeq: kotlin.String?, filterValidatorPowerLike: kotlin.String?, filterValidatorPowerIlike: kotlin.String?, include: ApiAccountsGetIncludeParameter?, sort: ApiAccountsGetSortParameter?) : ApiResponse<ApiAccountsGet200Response?> {
        val localVariableConfig = apiAccountsGetRequestConfig(fieldsAccounts = fieldsAccounts, filterAddress = filterAddress, filterAddressNeq = filterAddressNeq, filterAddressLike = filterAddressLike, filterAddressIlike = filterAddressIlike, filterPublicKey = filterPublicKey, filterPublicKeyNeq = filterPublicKeyNeq, filterPublicKeyLike = filterPublicKeyLike, filterPublicKeyIlike = filterPublicKeyIlike, filterName = filterName, filterNameNeq = filterNameNeq, filterNameLike = filterNameLike, filterNameIlike = filterNameIlike, filterNonce = filterNonce, filterValidatorAddress = filterValidatorAddress, filterValidatorAddressNeq = filterValidatorAddressNeq, filterValidatorAddressLike = filterValidatorAddressLike, filterValidatorAddressIlike = filterValidatorAddressIlike, filterValidatorPublicKey = filterValidatorPublicKey, filterValidatorPublicKeyNeq = filterValidatorPublicKeyNeq, filterValidatorPublicKeyLike = filterValidatorPublicKeyLike, filterValidatorPublicKeyIlike = filterValidatorPublicKeyIlike, filterValidatorPower = filterValidatorPower, filterValidatorPowerNeq = filterValidatorPowerNeq, filterValidatorPowerLike = filterValidatorPowerLike, filterValidatorPowerIlike = filterValidatorPowerIlike, include = include, sort = sort)

        return request<Unit, ApiAccountsGet200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiAccountsGet
     *
     * @param fieldsAccounts Include the given fields in the response. (optional)
     * @param filterAddress Filter the results where the [address] field is equal to the given value. (optional)
     * @param filterAddressNeq Filter the results where the [address] field is not equal to the given value. (optional)
     * @param filterAddressLike Filter the results where the [address] field is similar to the given case sensitive value. (optional)
     * @param filterAddressIlike Filter the results where the [address] field is similar to the given case insensitive value. (optional)
     * @param filterPublicKey Filter the results where the [public_key] field is equal to the given value. (optional)
     * @param filterPublicKeyNeq Filter the results where the [public_key] field is not equal to the given value. (optional)
     * @param filterPublicKeyLike Filter the results where the [public_key] field is similar to the given case sensitive value. (optional)
     * @param filterPublicKeyIlike Filter the results where the [public_key] field is similar to the given case insensitive value. (optional)
     * @param filterName Filter the results where the [name] field is equal to the given value. (optional)
     * @param filterNameNeq Filter the results where the [name] field is not equal to the given value. (optional)
     * @param filterNameLike Filter the results where the [name] field is similar to the given case sensitive value. (optional)
     * @param filterNameIlike Filter the results where the [name] field is similar to the given case insensitive value. (optional)
     * @param filterNonce Filter the results where the [nonce] field is equal to the given value. (optional)
     * @param filterValidatorAddress Filter the results where the [validator.address] field is equal to the given value. (optional)
     * @param filterValidatorAddressNeq Filter the results where the [validator.address] field is not equal to the given value. (optional)
     * @param filterValidatorAddressLike Filter the results where the [validator.address] field is similar to the given case sensitive value. (optional)
     * @param filterValidatorAddressIlike Filter the results where the [validator.address] field is similar to the given case insensitive value. (optional)
     * @param filterValidatorPublicKey Filter the results where the [validator.publicKey] field is equal to the given value. (optional)
     * @param filterValidatorPublicKeyNeq Filter the results where the [validator.publicKey] field is not equal to the given value. (optional)
     * @param filterValidatorPublicKeyLike Filter the results where the [validator.publicKey] field is similar to the given case sensitive value. (optional)
     * @param filterValidatorPublicKeyIlike Filter the results where the [validator.publicKey] field is similar to the given case insensitive value. (optional)
     * @param filterValidatorPower Filter the results where the [validator.power] field is equal to the given value. (optional)
     * @param filterValidatorPowerNeq Filter the results where the [validator.power] field is not equal to the given value. (optional)
     * @param filterValidatorPowerLike Filter the results where the [validator.power] field is similar to the given case sensitive value. (optional)
     * @param filterValidatorPowerIlike Filter the results where the [validator.power] field is similar to the given case insensitive value. (optional)
     * @param include Include the given relationships. (optional)
     * @param sort Sort the results by the given field and direction. (optional)
     * @return RequestConfig
     */
    fun apiAccountsGetRequestConfig(fieldsAccounts: ApiAccountsGetFieldsAccountsParameter?, filterAddress: kotlin.String?, filterAddressNeq: kotlin.String?, filterAddressLike: kotlin.String?, filterAddressIlike: kotlin.String?, filterPublicKey: kotlin.String?, filterPublicKeyNeq: kotlin.String?, filterPublicKeyLike: kotlin.String?, filterPublicKeyIlike: kotlin.String?, filterName: kotlin.String?, filterNameNeq: kotlin.String?, filterNameLike: kotlin.String?, filterNameIlike: kotlin.String?, filterNonce: kotlin.Int?, filterValidatorAddress: kotlin.String?, filterValidatorAddressNeq: kotlin.String?, filterValidatorAddressLike: kotlin.String?, filterValidatorAddressIlike: kotlin.String?, filterValidatorPublicKey: kotlin.String?, filterValidatorPublicKeyNeq: kotlin.String?, filterValidatorPublicKeyLike: kotlin.String?, filterValidatorPublicKeyIlike: kotlin.String?, filterValidatorPower: kotlin.String?, filterValidatorPowerNeq: kotlin.String?, filterValidatorPowerLike: kotlin.String?, filterValidatorPowerIlike: kotlin.String?, include: ApiAccountsGetIncludeParameter?, sort: ApiAccountsGetSortParameter?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (fieldsAccounts != null) {
                    put("fields[accounts]", listOf(fieldsAccounts.toString()))
                }
                if (filterAddress != null) {
                    put("filter[address]", listOf(filterAddress.toString()))
                }
                if (filterAddressNeq != null) {
                    put("filter[address.neq]", listOf(filterAddressNeq.toString()))
                }
                if (filterAddressLike != null) {
                    put("filter[address.like]", listOf(filterAddressLike.toString()))
                }
                if (filterAddressIlike != null) {
                    put("filter[address.ilike]", listOf(filterAddressIlike.toString()))
                }
                if (filterPublicKey != null) {
                    put("filter[public_key]", listOf(filterPublicKey.toString()))
                }
                if (filterPublicKeyNeq != null) {
                    put("filter[public_key.neq]", listOf(filterPublicKeyNeq.toString()))
                }
                if (filterPublicKeyLike != null) {
                    put("filter[public_key.like]", listOf(filterPublicKeyLike.toString()))
                }
                if (filterPublicKeyIlike != null) {
                    put("filter[public_key.ilike]", listOf(filterPublicKeyIlike.toString()))
                }
                if (filterName != null) {
                    put("filter[name]", listOf(filterName.toString()))
                }
                if (filterNameNeq != null) {
                    put("filter[name.neq]", listOf(filterNameNeq.toString()))
                }
                if (filterNameLike != null) {
                    put("filter[name.like]", listOf(filterNameLike.toString()))
                }
                if (filterNameIlike != null) {
                    put("filter[name.ilike]", listOf(filterNameIlike.toString()))
                }
                if (filterNonce != null) {
                    put("filter[nonce]", listOf(filterNonce.toString()))
                }
                if (filterValidatorAddress != null) {
                    put("filter[validator.address]", listOf(filterValidatorAddress.toString()))
                }
                if (filterValidatorAddressNeq != null) {
                    put("filter[validator.address.neq]", listOf(filterValidatorAddressNeq.toString()))
                }
                if (filterValidatorAddressLike != null) {
                    put("filter[validator.address.like]", listOf(filterValidatorAddressLike.toString()))
                }
                if (filterValidatorAddressIlike != null) {
                    put("filter[validator.address.ilike]", listOf(filterValidatorAddressIlike.toString()))
                }
                if (filterValidatorPublicKey != null) {
                    put("filter[validator.publicKey]", listOf(filterValidatorPublicKey.toString()))
                }
                if (filterValidatorPublicKeyNeq != null) {
                    put("filter[validator.publicKey.neq]", listOf(filterValidatorPublicKeyNeq.toString()))
                }
                if (filterValidatorPublicKeyLike != null) {
                    put("filter[validator.publicKey.like]", listOf(filterValidatorPublicKeyLike.toString()))
                }
                if (filterValidatorPublicKeyIlike != null) {
                    put("filter[validator.publicKey.ilike]", listOf(filterValidatorPublicKeyIlike.toString()))
                }
                if (filterValidatorPower != null) {
                    put("filter[validator.power]", listOf(filterValidatorPower.toString()))
                }
                if (filterValidatorPowerNeq != null) {
                    put("filter[validator.power.neq]", listOf(filterValidatorPowerNeq.toString()))
                }
                if (filterValidatorPowerLike != null) {
                    put("filter[validator.power.like]", listOf(filterValidatorPowerLike.toString()))
                }
                if (filterValidatorPowerIlike != null) {
                    put("filter[validator.power.ilike]", listOf(filterValidatorPowerIlike.toString()))
                }
                if (include != null) {
                    put("include", listOf(include.toString()))
                }
                if (sort != null) {
                    put("sort", listOf(sort.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/accounts",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * List account metadata
     * 
     * @param fieldsAccountsMetadata Include the given fields in the response. (optional)
     * @param filterAccountId Filter the results where the [account_id] field is equal to the given value. (optional)
     * @param filterModule Filter the results where the [module] field is equal to the given value. (optional)
     * @param filterModuleNeq Filter the results where the [module] field is not equal to the given value. (optional)
     * @param filterModuleLike Filter the results where the [module] field is similar to the given case sensitive value. (optional)
     * @param filterModuleIlike Filter the results where the [module] field is similar to the given case insensitive value. (optional)
     * @param filterKey Filter the results where the [key] field is equal to the given value. (optional)
     * @param filterKeyNeq Filter the results where the [key] field is not equal to the given value. (optional)
     * @param filterKeyLike Filter the results where the [key] field is similar to the given case sensitive value. (optional)
     * @param filterKeyIlike Filter the results where the [key] field is similar to the given case insensitive value. (optional)
     * @param filterValue Filter the results where the [value] field is equal to the given value. (optional)
     * @param filterValueNeq Filter the results where the [value] field is not equal to the given value. (optional)
     * @param filterValueLike Filter the results where the [value] field is similar to the given case sensitive value. (optional)
     * @param filterValueIlike Filter the results where the [value] field is similar to the given case insensitive value. (optional)
     * @param include Include the given relationships. (optional)
     * @param sort Sort the results by the given field and direction. (optional)
     * @return ApiAccountsMetadataGet200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiAccountsMetadataGet(fieldsAccountsMetadata: ApiAccountsMetadataGetFieldsAccountsMetadataParameter? = null, filterAccountId: kotlin.Int? = null, filterModule: kotlin.String? = null, filterModuleNeq: kotlin.String? = null, filterModuleLike: kotlin.String? = null, filterModuleIlike: kotlin.String? = null, filterKey: kotlin.String? = null, filterKeyNeq: kotlin.String? = null, filterKeyLike: kotlin.String? = null, filterKeyIlike: kotlin.String? = null, filterValue: kotlin.String? = null, filterValueNeq: kotlin.String? = null, filterValueLike: kotlin.String? = null, filterValueIlike: kotlin.String? = null, include: ApiAccountsMetadataGetIncludeParameter? = null, sort: ApiAccountsMetadataGetSortParameter? = null) : ApiAccountsMetadataGet200Response {
        val localVarResponse = apiAccountsMetadataGetWithHttpInfo(fieldsAccountsMetadata = fieldsAccountsMetadata, filterAccountId = filterAccountId, filterModule = filterModule, filterModuleNeq = filterModuleNeq, filterModuleLike = filterModuleLike, filterModuleIlike = filterModuleIlike, filterKey = filterKey, filterKeyNeq = filterKeyNeq, filterKeyLike = filterKeyLike, filterKeyIlike = filterKeyIlike, filterValue = filterValue, filterValueNeq = filterValueNeq, filterValueLike = filterValueLike, filterValueIlike = filterValueIlike, include = include, sort = sort)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ApiAccountsMetadataGet200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * List account metadata
     * 
     * @param fieldsAccountsMetadata Include the given fields in the response. (optional)
     * @param filterAccountId Filter the results where the [account_id] field is equal to the given value. (optional)
     * @param filterModule Filter the results where the [module] field is equal to the given value. (optional)
     * @param filterModuleNeq Filter the results where the [module] field is not equal to the given value. (optional)
     * @param filterModuleLike Filter the results where the [module] field is similar to the given case sensitive value. (optional)
     * @param filterModuleIlike Filter the results where the [module] field is similar to the given case insensitive value. (optional)
     * @param filterKey Filter the results where the [key] field is equal to the given value. (optional)
     * @param filterKeyNeq Filter the results where the [key] field is not equal to the given value. (optional)
     * @param filterKeyLike Filter the results where the [key] field is similar to the given case sensitive value. (optional)
     * @param filterKeyIlike Filter the results where the [key] field is similar to the given case insensitive value. (optional)
     * @param filterValue Filter the results where the [value] field is equal to the given value. (optional)
     * @param filterValueNeq Filter the results where the [value] field is not equal to the given value. (optional)
     * @param filterValueLike Filter the results where the [value] field is similar to the given case sensitive value. (optional)
     * @param filterValueIlike Filter the results where the [value] field is similar to the given case insensitive value. (optional)
     * @param include Include the given relationships. (optional)
     * @param sort Sort the results by the given field and direction. (optional)
     * @return ApiResponse<ApiAccountsMetadataGet200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiAccountsMetadataGetWithHttpInfo(fieldsAccountsMetadata: ApiAccountsMetadataGetFieldsAccountsMetadataParameter?, filterAccountId: kotlin.Int?, filterModule: kotlin.String?, filterModuleNeq: kotlin.String?, filterModuleLike: kotlin.String?, filterModuleIlike: kotlin.String?, filterKey: kotlin.String?, filterKeyNeq: kotlin.String?, filterKeyLike: kotlin.String?, filterKeyIlike: kotlin.String?, filterValue: kotlin.String?, filterValueNeq: kotlin.String?, filterValueLike: kotlin.String?, filterValueIlike: kotlin.String?, include: ApiAccountsMetadataGetIncludeParameter?, sort: ApiAccountsMetadataGetSortParameter?) : ApiResponse<ApiAccountsMetadataGet200Response?> {
        val localVariableConfig = apiAccountsMetadataGetRequestConfig(fieldsAccountsMetadata = fieldsAccountsMetadata, filterAccountId = filterAccountId, filterModule = filterModule, filterModuleNeq = filterModuleNeq, filterModuleLike = filterModuleLike, filterModuleIlike = filterModuleIlike, filterKey = filterKey, filterKeyNeq = filterKeyNeq, filterKeyLike = filterKeyLike, filterKeyIlike = filterKeyIlike, filterValue = filterValue, filterValueNeq = filterValueNeq, filterValueLike = filterValueLike, filterValueIlike = filterValueIlike, include = include, sort = sort)

        return request<Unit, ApiAccountsMetadataGet200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiAccountsMetadataGet
     *
     * @param fieldsAccountsMetadata Include the given fields in the response. (optional)
     * @param filterAccountId Filter the results where the [account_id] field is equal to the given value. (optional)
     * @param filterModule Filter the results where the [module] field is equal to the given value. (optional)
     * @param filterModuleNeq Filter the results where the [module] field is not equal to the given value. (optional)
     * @param filterModuleLike Filter the results where the [module] field is similar to the given case sensitive value. (optional)
     * @param filterModuleIlike Filter the results where the [module] field is similar to the given case insensitive value. (optional)
     * @param filterKey Filter the results where the [key] field is equal to the given value. (optional)
     * @param filterKeyNeq Filter the results where the [key] field is not equal to the given value. (optional)
     * @param filterKeyLike Filter the results where the [key] field is similar to the given case sensitive value. (optional)
     * @param filterKeyIlike Filter the results where the [key] field is similar to the given case insensitive value. (optional)
     * @param filterValue Filter the results where the [value] field is equal to the given value. (optional)
     * @param filterValueNeq Filter the results where the [value] field is not equal to the given value. (optional)
     * @param filterValueLike Filter the results where the [value] field is similar to the given case sensitive value. (optional)
     * @param filterValueIlike Filter the results where the [value] field is similar to the given case insensitive value. (optional)
     * @param include Include the given relationships. (optional)
     * @param sort Sort the results by the given field and direction. (optional)
     * @return RequestConfig
     */
    fun apiAccountsMetadataGetRequestConfig(fieldsAccountsMetadata: ApiAccountsMetadataGetFieldsAccountsMetadataParameter?, filterAccountId: kotlin.Int?, filterModule: kotlin.String?, filterModuleNeq: kotlin.String?, filterModuleLike: kotlin.String?, filterModuleIlike: kotlin.String?, filterKey: kotlin.String?, filterKeyNeq: kotlin.String?, filterKeyLike: kotlin.String?, filterKeyIlike: kotlin.String?, filterValue: kotlin.String?, filterValueNeq: kotlin.String?, filterValueLike: kotlin.String?, filterValueIlike: kotlin.String?, include: ApiAccountsMetadataGetIncludeParameter?, sort: ApiAccountsMetadataGetSortParameter?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (fieldsAccountsMetadata != null) {
                    put("fields[accounts_metadata]", listOf(fieldsAccountsMetadata.toString()))
                }
                if (filterAccountId != null) {
                    put("filter[account_id]", listOf(filterAccountId.toString()))
                }
                if (filterModule != null) {
                    put("filter[module]", listOf(filterModule.toString()))
                }
                if (filterModuleNeq != null) {
                    put("filter[module.neq]", listOf(filterModuleNeq.toString()))
                }
                if (filterModuleLike != null) {
                    put("filter[module.like]", listOf(filterModuleLike.toString()))
                }
                if (filterModuleIlike != null) {
                    put("filter[module.ilike]", listOf(filterModuleIlike.toString()))
                }
                if (filterKey != null) {
                    put("filter[key]", listOf(filterKey.toString()))
                }
                if (filterKeyNeq != null) {
                    put("filter[key.neq]", listOf(filterKeyNeq.toString()))
                }
                if (filterKeyLike != null) {
                    put("filter[key.like]", listOf(filterKeyLike.toString()))
                }
                if (filterKeyIlike != null) {
                    put("filter[key.ilike]", listOf(filterKeyIlike.toString()))
                }
                if (filterValue != null) {
                    put("filter[value]", listOf(filterValue.toString()))
                }
                if (filterValueNeq != null) {
                    put("filter[value.neq]", listOf(filterValueNeq.toString()))
                }
                if (filterValueLike != null) {
                    put("filter[value.like]", listOf(filterValueLike.toString()))
                }
                if (filterValueIlike != null) {
                    put("filter[value.ilike]", listOf(filterValueIlike.toString()))
                }
                if (include != null) {
                    put("include", listOf(include.toString()))
                }
                if (sort != null) {
                    put("sort", listOf(sort.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/accounts/metadata",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * List blocks
     * 
     * @param fieldsBlocks Include the given fields in the response. (optional)
     * @param filterHash Filter the results where the [hash] field is equal to the given value. (optional)
     * @param filterHashNeq Filter the results where the [hash] field is not equal to the given value. (optional)
     * @param filterHashLike Filter the results where the [hash] field is similar to the given case sensitive value. (optional)
     * @param filterHashIlike Filter the results where the [hash] field is similar to the given case insensitive value. (optional)
     * @param filterHeight Filter the results where the [height] field is equal to the given value. (optional)
     * @param filterHeaderVersionBlock Filter the results where the [header.version.block] field is equal to the given value. (optional)
     * @param filterHeaderChainId Filter the results where the [header.chainId] field is equal to the given value. (optional)
     * @param filterHeaderChainIdNeq Filter the results where the [header.chainId] field is not equal to the given value. (optional)
     * @param filterHeaderChainIdLike Filter the results where the [header.chainId] field is similar to the given case sensitive value. (optional)
     * @param filterHeaderChainIdIlike Filter the results where the [header.chainId] field is similar to the given case insensitive value. (optional)
     * @param filterHeaderHeight Filter the results where the [header.height] field is equal to the given value. (optional)
     * @param filterHeaderTime Filter the results where the [header.time] field is equal to the given value. (optional)
     * @param filterHeaderTimeNeq Filter the results where the [header.time] field is not equal to the given value. (optional)
     * @param filterHeaderTimeLike Filter the results where the [header.time] field is similar to the given case sensitive value. (optional)
     * @param filterHeaderTimeIlike Filter the results where the [header.time] field is similar to the given case insensitive value. (optional)
     * @param filterHeaderLastBlockIdHash Filter the results where the [header.lastBlockId.hash] field is equal to the given value. (optional)
     * @param filterHeaderLastBlockIdHashNeq Filter the results where the [header.lastBlockId.hash] field is not equal to the given value. (optional)
     * @param filterHeaderLastBlockIdHashLike Filter the results where the [header.lastBlockId.hash] field is similar to the given case sensitive value. (optional)
     * @param filterHeaderLastBlockIdHashIlike Filter the results where the [header.lastBlockId.hash] field is similar to the given case insensitive value. (optional)
     * @param filterHeaderLastBlockIdPartSetHeaderTotal Filter the results where the [header.lastBlockId.partSetHeader.total] field is equal to the given value. (optional)
     * @param filterHeaderLastBlockIdPartSetHeaderHash Filter the results where the [header.lastBlockId.partSetHeader.hash] field is equal to the given value. (optional)
     * @param filterHeaderLastBlockIdPartSetHeaderHashNeq Filter the results where the [header.lastBlockId.partSetHeader.hash] field is not equal to the given value. (optional)
     * @param filterHeaderLastBlockIdPartSetHeaderHashLike Filter the results where the [header.lastBlockId.partSetHeader.hash] field is similar to the given case sensitive value. (optional)
     * @param filterHeaderLastBlockIdPartSetHeaderHashIlike Filter the results where the [header.lastBlockId.partSetHeader.hash] field is similar to the given case insensitive value. (optional)
     * @param filterHeaderLastCommitHash Filter the results where the [header.lastCommitHash] field is equal to the given value. (optional)
     * @param filterHeaderLastCommitHashNeq Filter the results where the [header.lastCommitHash] field is not equal to the given value. (optional)
     * @param filterHeaderLastCommitHashLike Filter the results where the [header.lastCommitHash] field is similar to the given case sensitive value. (optional)
     * @param filterHeaderLastCommitHashIlike Filter the results where the [header.lastCommitHash] field is similar to the given case insensitive value. (optional)
     * @param filterHeaderDataHash Filter the results where the [header.dataHash] field is equal to the given value. (optional)
     * @param filterHeaderDataHashNeq Filter the results where the [header.dataHash] field is not equal to the given value. (optional)
     * @param filterHeaderDataHashLike Filter the results where the [header.dataHash] field is similar to the given case sensitive value. (optional)
     * @param filterHeaderDataHashIlike Filter the results where the [header.dataHash] field is similar to the given case insensitive value. (optional)
     * @param filterHeaderValidatorsHash Filter the results where the [header.validatorsHash] field is equal to the given value. (optional)
     * @param filterHeaderValidatorsHashNeq Filter the results where the [header.validatorsHash] field is not equal to the given value. (optional)
     * @param filterHeaderValidatorsHashLike Filter the results where the [header.validatorsHash] field is similar to the given case sensitive value. (optional)
     * @param filterHeaderValidatorsHashIlike Filter the results where the [header.validatorsHash] field is similar to the given case insensitive value. (optional)
     * @param filterHeaderNextValidatorsHash Filter the results where the [header.nextValidatorsHash] field is equal to the given value. (optional)
     * @param filterHeaderNextValidatorsHashNeq Filter the results where the [header.nextValidatorsHash] field is not equal to the given value. (optional)
     * @param filterHeaderNextValidatorsHashLike Filter the results where the [header.nextValidatorsHash] field is similar to the given case sensitive value. (optional)
     * @param filterHeaderNextValidatorsHashIlike Filter the results where the [header.nextValidatorsHash] field is similar to the given case insensitive value. (optional)
     * @param filterHeaderConsensusHash Filter the results where the [header.consensusHash] field is equal to the given value. (optional)
     * @param filterHeaderConsensusHashNeq Filter the results where the [header.consensusHash] field is not equal to the given value. (optional)
     * @param filterHeaderConsensusHashLike Filter the results where the [header.consensusHash] field is similar to the given case sensitive value. (optional)
     * @param filterHeaderConsensusHashIlike Filter the results where the [header.consensusHash] field is similar to the given case insensitive value. (optional)
     * @param filterHeaderAppHash Filter the results where the [header.appHash] field is equal to the given value. (optional)
     * @param filterHeaderAppHashNeq Filter the results where the [header.appHash] field is not equal to the given value. (optional)
     * @param filterHeaderAppHashLike Filter the results where the [header.appHash] field is similar to the given case sensitive value. (optional)
     * @param filterHeaderAppHashIlike Filter the results where the [header.appHash] field is similar to the given case insensitive value. (optional)
     * @param filterHeaderLastResultsHash Filter the results where the [header.lastResultsHash] field is equal to the given value. (optional)
     * @param filterHeaderLastResultsHashNeq Filter the results where the [header.lastResultsHash] field is not equal to the given value. (optional)
     * @param filterHeaderLastResultsHashLike Filter the results where the [header.lastResultsHash] field is similar to the given case sensitive value. (optional)
     * @param filterHeaderLastResultsHashIlike Filter the results where the [header.lastResultsHash] field is similar to the given case insensitive value. (optional)
     * @param filterHeaderEvidenceHash Filter the results where the [header.evidenceHash] field is equal to the given value. (optional)
     * @param filterHeaderEvidenceHashNeq Filter the results where the [header.evidenceHash] field is not equal to the given value. (optional)
     * @param filterHeaderEvidenceHashLike Filter the results where the [header.evidenceHash] field is similar to the given case sensitive value. (optional)
     * @param filterHeaderEvidenceHashIlike Filter the results where the [header.evidenceHash] field is similar to the given case insensitive value. (optional)
     * @param filterHeaderProposerAddress Filter the results where the [header.proposerAddress] field is equal to the given value. (optional)
     * @param filterHeaderProposerAddressNeq Filter the results where the [header.proposerAddress] field is not equal to the given value. (optional)
     * @param filterHeaderProposerAddressLike Filter the results where the [header.proposerAddress] field is similar to the given case sensitive value. (optional)
     * @param filterHeaderProposerAddressIlike Filter the results where the [header.proposerAddress] field is similar to the given case insensitive value. (optional)
     * @param include Include the given relationships. (optional)
     * @param sort Sort the results by the given field and direction. (optional)
     * @return ApiBlocksGet200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiBlocksGet(fieldsBlocks: ApiBlocksGetFieldsBlocksParameter? = null, filterHash: kotlin.String? = null, filterHashNeq: kotlin.String? = null, filterHashLike: kotlin.String? = null, filterHashIlike: kotlin.String? = null, filterHeight: kotlin.Int? = null, filterHeaderVersionBlock: kotlin.Int? = null, filterHeaderChainId: kotlin.String? = null, filterHeaderChainIdNeq: kotlin.String? = null, filterHeaderChainIdLike: kotlin.String? = null, filterHeaderChainIdIlike: kotlin.String? = null, filterHeaderHeight: kotlin.Int? = null, filterHeaderTime: kotlin.String? = null, filterHeaderTimeNeq: kotlin.String? = null, filterHeaderTimeLike: kotlin.String? = null, filterHeaderTimeIlike: kotlin.String? = null, filterHeaderLastBlockIdHash: kotlin.String? = null, filterHeaderLastBlockIdHashNeq: kotlin.String? = null, filterHeaderLastBlockIdHashLike: kotlin.String? = null, filterHeaderLastBlockIdHashIlike: kotlin.String? = null, filterHeaderLastBlockIdPartSetHeaderTotal: kotlin.Int? = null, filterHeaderLastBlockIdPartSetHeaderHash: kotlin.String? = null, filterHeaderLastBlockIdPartSetHeaderHashNeq: kotlin.String? = null, filterHeaderLastBlockIdPartSetHeaderHashLike: kotlin.String? = null, filterHeaderLastBlockIdPartSetHeaderHashIlike: kotlin.String? = null, filterHeaderLastCommitHash: kotlin.String? = null, filterHeaderLastCommitHashNeq: kotlin.String? = null, filterHeaderLastCommitHashLike: kotlin.String? = null, filterHeaderLastCommitHashIlike: kotlin.String? = null, filterHeaderDataHash: kotlin.String? = null, filterHeaderDataHashNeq: kotlin.String? = null, filterHeaderDataHashLike: kotlin.String? = null, filterHeaderDataHashIlike: kotlin.String? = null, filterHeaderValidatorsHash: kotlin.String? = null, filterHeaderValidatorsHashNeq: kotlin.String? = null, filterHeaderValidatorsHashLike: kotlin.String? = null, filterHeaderValidatorsHashIlike: kotlin.String? = null, filterHeaderNextValidatorsHash: kotlin.String? = null, filterHeaderNextValidatorsHashNeq: kotlin.String? = null, filterHeaderNextValidatorsHashLike: kotlin.String? = null, filterHeaderNextValidatorsHashIlike: kotlin.String? = null, filterHeaderConsensusHash: kotlin.String? = null, filterHeaderConsensusHashNeq: kotlin.String? = null, filterHeaderConsensusHashLike: kotlin.String? = null, filterHeaderConsensusHashIlike: kotlin.String? = null, filterHeaderAppHash: kotlin.String? = null, filterHeaderAppHashNeq: kotlin.String? = null, filterHeaderAppHashLike: kotlin.String? = null, filterHeaderAppHashIlike: kotlin.String? = null, filterHeaderLastResultsHash: kotlin.String? = null, filterHeaderLastResultsHashNeq: kotlin.String? = null, filterHeaderLastResultsHashLike: kotlin.String? = null, filterHeaderLastResultsHashIlike: kotlin.String? = null, filterHeaderEvidenceHash: kotlin.String? = null, filterHeaderEvidenceHashNeq: kotlin.String? = null, filterHeaderEvidenceHashLike: kotlin.String? = null, filterHeaderEvidenceHashIlike: kotlin.String? = null, filterHeaderProposerAddress: kotlin.String? = null, filterHeaderProposerAddressNeq: kotlin.String? = null, filterHeaderProposerAddressLike: kotlin.String? = null, filterHeaderProposerAddressIlike: kotlin.String? = null, include: ApiBlocksGetIncludeParameter? = null, sort: ApiBlocksGetSortParameter? = null) : ApiBlocksGet200Response {
        val localVarResponse = apiBlocksGetWithHttpInfo(fieldsBlocks = fieldsBlocks, filterHash = filterHash, filterHashNeq = filterHashNeq, filterHashLike = filterHashLike, filterHashIlike = filterHashIlike, filterHeight = filterHeight, filterHeaderVersionBlock = filterHeaderVersionBlock, filterHeaderChainId = filterHeaderChainId, filterHeaderChainIdNeq = filterHeaderChainIdNeq, filterHeaderChainIdLike = filterHeaderChainIdLike, filterHeaderChainIdIlike = filterHeaderChainIdIlike, filterHeaderHeight = filterHeaderHeight, filterHeaderTime = filterHeaderTime, filterHeaderTimeNeq = filterHeaderTimeNeq, filterHeaderTimeLike = filterHeaderTimeLike, filterHeaderTimeIlike = filterHeaderTimeIlike, filterHeaderLastBlockIdHash = filterHeaderLastBlockIdHash, filterHeaderLastBlockIdHashNeq = filterHeaderLastBlockIdHashNeq, filterHeaderLastBlockIdHashLike = filterHeaderLastBlockIdHashLike, filterHeaderLastBlockIdHashIlike = filterHeaderLastBlockIdHashIlike, filterHeaderLastBlockIdPartSetHeaderTotal = filterHeaderLastBlockIdPartSetHeaderTotal, filterHeaderLastBlockIdPartSetHeaderHash = filterHeaderLastBlockIdPartSetHeaderHash, filterHeaderLastBlockIdPartSetHeaderHashNeq = filterHeaderLastBlockIdPartSetHeaderHashNeq, filterHeaderLastBlockIdPartSetHeaderHashLike = filterHeaderLastBlockIdPartSetHeaderHashLike, filterHeaderLastBlockIdPartSetHeaderHashIlike = filterHeaderLastBlockIdPartSetHeaderHashIlike, filterHeaderLastCommitHash = filterHeaderLastCommitHash, filterHeaderLastCommitHashNeq = filterHeaderLastCommitHashNeq, filterHeaderLastCommitHashLike = filterHeaderLastCommitHashLike, filterHeaderLastCommitHashIlike = filterHeaderLastCommitHashIlike, filterHeaderDataHash = filterHeaderDataHash, filterHeaderDataHashNeq = filterHeaderDataHashNeq, filterHeaderDataHashLike = filterHeaderDataHashLike, filterHeaderDataHashIlike = filterHeaderDataHashIlike, filterHeaderValidatorsHash = filterHeaderValidatorsHash, filterHeaderValidatorsHashNeq = filterHeaderValidatorsHashNeq, filterHeaderValidatorsHashLike = filterHeaderValidatorsHashLike, filterHeaderValidatorsHashIlike = filterHeaderValidatorsHashIlike, filterHeaderNextValidatorsHash = filterHeaderNextValidatorsHash, filterHeaderNextValidatorsHashNeq = filterHeaderNextValidatorsHashNeq, filterHeaderNextValidatorsHashLike = filterHeaderNextValidatorsHashLike, filterHeaderNextValidatorsHashIlike = filterHeaderNextValidatorsHashIlike, filterHeaderConsensusHash = filterHeaderConsensusHash, filterHeaderConsensusHashNeq = filterHeaderConsensusHashNeq, filterHeaderConsensusHashLike = filterHeaderConsensusHashLike, filterHeaderConsensusHashIlike = filterHeaderConsensusHashIlike, filterHeaderAppHash = filterHeaderAppHash, filterHeaderAppHashNeq = filterHeaderAppHashNeq, filterHeaderAppHashLike = filterHeaderAppHashLike, filterHeaderAppHashIlike = filterHeaderAppHashIlike, filterHeaderLastResultsHash = filterHeaderLastResultsHash, filterHeaderLastResultsHashNeq = filterHeaderLastResultsHashNeq, filterHeaderLastResultsHashLike = filterHeaderLastResultsHashLike, filterHeaderLastResultsHashIlike = filterHeaderLastResultsHashIlike, filterHeaderEvidenceHash = filterHeaderEvidenceHash, filterHeaderEvidenceHashNeq = filterHeaderEvidenceHashNeq, filterHeaderEvidenceHashLike = filterHeaderEvidenceHashLike, filterHeaderEvidenceHashIlike = filterHeaderEvidenceHashIlike, filterHeaderProposerAddress = filterHeaderProposerAddress, filterHeaderProposerAddressNeq = filterHeaderProposerAddressNeq, filterHeaderProposerAddressLike = filterHeaderProposerAddressLike, filterHeaderProposerAddressIlike = filterHeaderProposerAddressIlike, include = include, sort = sort)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ApiBlocksGet200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * List blocks
     * 
     * @param fieldsBlocks Include the given fields in the response. (optional)
     * @param filterHash Filter the results where the [hash] field is equal to the given value. (optional)
     * @param filterHashNeq Filter the results where the [hash] field is not equal to the given value. (optional)
     * @param filterHashLike Filter the results where the [hash] field is similar to the given case sensitive value. (optional)
     * @param filterHashIlike Filter the results where the [hash] field is similar to the given case insensitive value. (optional)
     * @param filterHeight Filter the results where the [height] field is equal to the given value. (optional)
     * @param filterHeaderVersionBlock Filter the results where the [header.version.block] field is equal to the given value. (optional)
     * @param filterHeaderChainId Filter the results where the [header.chainId] field is equal to the given value. (optional)
     * @param filterHeaderChainIdNeq Filter the results where the [header.chainId] field is not equal to the given value. (optional)
     * @param filterHeaderChainIdLike Filter the results where the [header.chainId] field is similar to the given case sensitive value. (optional)
     * @param filterHeaderChainIdIlike Filter the results where the [header.chainId] field is similar to the given case insensitive value. (optional)
     * @param filterHeaderHeight Filter the results where the [header.height] field is equal to the given value. (optional)
     * @param filterHeaderTime Filter the results where the [header.time] field is equal to the given value. (optional)
     * @param filterHeaderTimeNeq Filter the results where the [header.time] field is not equal to the given value. (optional)
     * @param filterHeaderTimeLike Filter the results where the [header.time] field is similar to the given case sensitive value. (optional)
     * @param filterHeaderTimeIlike Filter the results where the [header.time] field is similar to the given case insensitive value. (optional)
     * @param filterHeaderLastBlockIdHash Filter the results where the [header.lastBlockId.hash] field is equal to the given value. (optional)
     * @param filterHeaderLastBlockIdHashNeq Filter the results where the [header.lastBlockId.hash] field is not equal to the given value. (optional)
     * @param filterHeaderLastBlockIdHashLike Filter the results where the [header.lastBlockId.hash] field is similar to the given case sensitive value. (optional)
     * @param filterHeaderLastBlockIdHashIlike Filter the results where the [header.lastBlockId.hash] field is similar to the given case insensitive value. (optional)
     * @param filterHeaderLastBlockIdPartSetHeaderTotal Filter the results where the [header.lastBlockId.partSetHeader.total] field is equal to the given value. (optional)
     * @param filterHeaderLastBlockIdPartSetHeaderHash Filter the results where the [header.lastBlockId.partSetHeader.hash] field is equal to the given value. (optional)
     * @param filterHeaderLastBlockIdPartSetHeaderHashNeq Filter the results where the [header.lastBlockId.partSetHeader.hash] field is not equal to the given value. (optional)
     * @param filterHeaderLastBlockIdPartSetHeaderHashLike Filter the results where the [header.lastBlockId.partSetHeader.hash] field is similar to the given case sensitive value. (optional)
     * @param filterHeaderLastBlockIdPartSetHeaderHashIlike Filter the results where the [header.lastBlockId.partSetHeader.hash] field is similar to the given case insensitive value. (optional)
     * @param filterHeaderLastCommitHash Filter the results where the [header.lastCommitHash] field is equal to the given value. (optional)
     * @param filterHeaderLastCommitHashNeq Filter the results where the [header.lastCommitHash] field is not equal to the given value. (optional)
     * @param filterHeaderLastCommitHashLike Filter the results where the [header.lastCommitHash] field is similar to the given case sensitive value. (optional)
     * @param filterHeaderLastCommitHashIlike Filter the results where the [header.lastCommitHash] field is similar to the given case insensitive value. (optional)
     * @param filterHeaderDataHash Filter the results where the [header.dataHash] field is equal to the given value. (optional)
     * @param filterHeaderDataHashNeq Filter the results where the [header.dataHash] field is not equal to the given value. (optional)
     * @param filterHeaderDataHashLike Filter the results where the [header.dataHash] field is similar to the given case sensitive value. (optional)
     * @param filterHeaderDataHashIlike Filter the results where the [header.dataHash] field is similar to the given case insensitive value. (optional)
     * @param filterHeaderValidatorsHash Filter the results where the [header.validatorsHash] field is equal to the given value. (optional)
     * @param filterHeaderValidatorsHashNeq Filter the results where the [header.validatorsHash] field is not equal to the given value. (optional)
     * @param filterHeaderValidatorsHashLike Filter the results where the [header.validatorsHash] field is similar to the given case sensitive value. (optional)
     * @param filterHeaderValidatorsHashIlike Filter the results where the [header.validatorsHash] field is similar to the given case insensitive value. (optional)
     * @param filterHeaderNextValidatorsHash Filter the results where the [header.nextValidatorsHash] field is equal to the given value. (optional)
     * @param filterHeaderNextValidatorsHashNeq Filter the results where the [header.nextValidatorsHash] field is not equal to the given value. (optional)
     * @param filterHeaderNextValidatorsHashLike Filter the results where the [header.nextValidatorsHash] field is similar to the given case sensitive value. (optional)
     * @param filterHeaderNextValidatorsHashIlike Filter the results where the [header.nextValidatorsHash] field is similar to the given case insensitive value. (optional)
     * @param filterHeaderConsensusHash Filter the results where the [header.consensusHash] field is equal to the given value. (optional)
     * @param filterHeaderConsensusHashNeq Filter the results where the [header.consensusHash] field is not equal to the given value. (optional)
     * @param filterHeaderConsensusHashLike Filter the results where the [header.consensusHash] field is similar to the given case sensitive value. (optional)
     * @param filterHeaderConsensusHashIlike Filter the results where the [header.consensusHash] field is similar to the given case insensitive value. (optional)
     * @param filterHeaderAppHash Filter the results where the [header.appHash] field is equal to the given value. (optional)
     * @param filterHeaderAppHashNeq Filter the results where the [header.appHash] field is not equal to the given value. (optional)
     * @param filterHeaderAppHashLike Filter the results where the [header.appHash] field is similar to the given case sensitive value. (optional)
     * @param filterHeaderAppHashIlike Filter the results where the [header.appHash] field is similar to the given case insensitive value. (optional)
     * @param filterHeaderLastResultsHash Filter the results where the [header.lastResultsHash] field is equal to the given value. (optional)
     * @param filterHeaderLastResultsHashNeq Filter the results where the [header.lastResultsHash] field is not equal to the given value. (optional)
     * @param filterHeaderLastResultsHashLike Filter the results where the [header.lastResultsHash] field is similar to the given case sensitive value. (optional)
     * @param filterHeaderLastResultsHashIlike Filter the results where the [header.lastResultsHash] field is similar to the given case insensitive value. (optional)
     * @param filterHeaderEvidenceHash Filter the results where the [header.evidenceHash] field is equal to the given value. (optional)
     * @param filterHeaderEvidenceHashNeq Filter the results where the [header.evidenceHash] field is not equal to the given value. (optional)
     * @param filterHeaderEvidenceHashLike Filter the results where the [header.evidenceHash] field is similar to the given case sensitive value. (optional)
     * @param filterHeaderEvidenceHashIlike Filter the results where the [header.evidenceHash] field is similar to the given case insensitive value. (optional)
     * @param filterHeaderProposerAddress Filter the results where the [header.proposerAddress] field is equal to the given value. (optional)
     * @param filterHeaderProposerAddressNeq Filter the results where the [header.proposerAddress] field is not equal to the given value. (optional)
     * @param filterHeaderProposerAddressLike Filter the results where the [header.proposerAddress] field is similar to the given case sensitive value. (optional)
     * @param filterHeaderProposerAddressIlike Filter the results where the [header.proposerAddress] field is similar to the given case insensitive value. (optional)
     * @param include Include the given relationships. (optional)
     * @param sort Sort the results by the given field and direction. (optional)
     * @return ApiResponse<ApiBlocksGet200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiBlocksGetWithHttpInfo(fieldsBlocks: ApiBlocksGetFieldsBlocksParameter?, filterHash: kotlin.String?, filterHashNeq: kotlin.String?, filterHashLike: kotlin.String?, filterHashIlike: kotlin.String?, filterHeight: kotlin.Int?, filterHeaderVersionBlock: kotlin.Int?, filterHeaderChainId: kotlin.String?, filterHeaderChainIdNeq: kotlin.String?, filterHeaderChainIdLike: kotlin.String?, filterHeaderChainIdIlike: kotlin.String?, filterHeaderHeight: kotlin.Int?, filterHeaderTime: kotlin.String?, filterHeaderTimeNeq: kotlin.String?, filterHeaderTimeLike: kotlin.String?, filterHeaderTimeIlike: kotlin.String?, filterHeaderLastBlockIdHash: kotlin.String?, filterHeaderLastBlockIdHashNeq: kotlin.String?, filterHeaderLastBlockIdHashLike: kotlin.String?, filterHeaderLastBlockIdHashIlike: kotlin.String?, filterHeaderLastBlockIdPartSetHeaderTotal: kotlin.Int?, filterHeaderLastBlockIdPartSetHeaderHash: kotlin.String?, filterHeaderLastBlockIdPartSetHeaderHashNeq: kotlin.String?, filterHeaderLastBlockIdPartSetHeaderHashLike: kotlin.String?, filterHeaderLastBlockIdPartSetHeaderHashIlike: kotlin.String?, filterHeaderLastCommitHash: kotlin.String?, filterHeaderLastCommitHashNeq: kotlin.String?, filterHeaderLastCommitHashLike: kotlin.String?, filterHeaderLastCommitHashIlike: kotlin.String?, filterHeaderDataHash: kotlin.String?, filterHeaderDataHashNeq: kotlin.String?, filterHeaderDataHashLike: kotlin.String?, filterHeaderDataHashIlike: kotlin.String?, filterHeaderValidatorsHash: kotlin.String?, filterHeaderValidatorsHashNeq: kotlin.String?, filterHeaderValidatorsHashLike: kotlin.String?, filterHeaderValidatorsHashIlike: kotlin.String?, filterHeaderNextValidatorsHash: kotlin.String?, filterHeaderNextValidatorsHashNeq: kotlin.String?, filterHeaderNextValidatorsHashLike: kotlin.String?, filterHeaderNextValidatorsHashIlike: kotlin.String?, filterHeaderConsensusHash: kotlin.String?, filterHeaderConsensusHashNeq: kotlin.String?, filterHeaderConsensusHashLike: kotlin.String?, filterHeaderConsensusHashIlike: kotlin.String?, filterHeaderAppHash: kotlin.String?, filterHeaderAppHashNeq: kotlin.String?, filterHeaderAppHashLike: kotlin.String?, filterHeaderAppHashIlike: kotlin.String?, filterHeaderLastResultsHash: kotlin.String?, filterHeaderLastResultsHashNeq: kotlin.String?, filterHeaderLastResultsHashLike: kotlin.String?, filterHeaderLastResultsHashIlike: kotlin.String?, filterHeaderEvidenceHash: kotlin.String?, filterHeaderEvidenceHashNeq: kotlin.String?, filterHeaderEvidenceHashLike: kotlin.String?, filterHeaderEvidenceHashIlike: kotlin.String?, filterHeaderProposerAddress: kotlin.String?, filterHeaderProposerAddressNeq: kotlin.String?, filterHeaderProposerAddressLike: kotlin.String?, filterHeaderProposerAddressIlike: kotlin.String?, include: ApiBlocksGetIncludeParameter?, sort: ApiBlocksGetSortParameter?) : ApiResponse<ApiBlocksGet200Response?> {
        val localVariableConfig = apiBlocksGetRequestConfig(fieldsBlocks = fieldsBlocks, filterHash = filterHash, filterHashNeq = filterHashNeq, filterHashLike = filterHashLike, filterHashIlike = filterHashIlike, filterHeight = filterHeight, filterHeaderVersionBlock = filterHeaderVersionBlock, filterHeaderChainId = filterHeaderChainId, filterHeaderChainIdNeq = filterHeaderChainIdNeq, filterHeaderChainIdLike = filterHeaderChainIdLike, filterHeaderChainIdIlike = filterHeaderChainIdIlike, filterHeaderHeight = filterHeaderHeight, filterHeaderTime = filterHeaderTime, filterHeaderTimeNeq = filterHeaderTimeNeq, filterHeaderTimeLike = filterHeaderTimeLike, filterHeaderTimeIlike = filterHeaderTimeIlike, filterHeaderLastBlockIdHash = filterHeaderLastBlockIdHash, filterHeaderLastBlockIdHashNeq = filterHeaderLastBlockIdHashNeq, filterHeaderLastBlockIdHashLike = filterHeaderLastBlockIdHashLike, filterHeaderLastBlockIdHashIlike = filterHeaderLastBlockIdHashIlike, filterHeaderLastBlockIdPartSetHeaderTotal = filterHeaderLastBlockIdPartSetHeaderTotal, filterHeaderLastBlockIdPartSetHeaderHash = filterHeaderLastBlockIdPartSetHeaderHash, filterHeaderLastBlockIdPartSetHeaderHashNeq = filterHeaderLastBlockIdPartSetHeaderHashNeq, filterHeaderLastBlockIdPartSetHeaderHashLike = filterHeaderLastBlockIdPartSetHeaderHashLike, filterHeaderLastBlockIdPartSetHeaderHashIlike = filterHeaderLastBlockIdPartSetHeaderHashIlike, filterHeaderLastCommitHash = filterHeaderLastCommitHash, filterHeaderLastCommitHashNeq = filterHeaderLastCommitHashNeq, filterHeaderLastCommitHashLike = filterHeaderLastCommitHashLike, filterHeaderLastCommitHashIlike = filterHeaderLastCommitHashIlike, filterHeaderDataHash = filterHeaderDataHash, filterHeaderDataHashNeq = filterHeaderDataHashNeq, filterHeaderDataHashLike = filterHeaderDataHashLike, filterHeaderDataHashIlike = filterHeaderDataHashIlike, filterHeaderValidatorsHash = filterHeaderValidatorsHash, filterHeaderValidatorsHashNeq = filterHeaderValidatorsHashNeq, filterHeaderValidatorsHashLike = filterHeaderValidatorsHashLike, filterHeaderValidatorsHashIlike = filterHeaderValidatorsHashIlike, filterHeaderNextValidatorsHash = filterHeaderNextValidatorsHash, filterHeaderNextValidatorsHashNeq = filterHeaderNextValidatorsHashNeq, filterHeaderNextValidatorsHashLike = filterHeaderNextValidatorsHashLike, filterHeaderNextValidatorsHashIlike = filterHeaderNextValidatorsHashIlike, filterHeaderConsensusHash = filterHeaderConsensusHash, filterHeaderConsensusHashNeq = filterHeaderConsensusHashNeq, filterHeaderConsensusHashLike = filterHeaderConsensusHashLike, filterHeaderConsensusHashIlike = filterHeaderConsensusHashIlike, filterHeaderAppHash = filterHeaderAppHash, filterHeaderAppHashNeq = filterHeaderAppHashNeq, filterHeaderAppHashLike = filterHeaderAppHashLike, filterHeaderAppHashIlike = filterHeaderAppHashIlike, filterHeaderLastResultsHash = filterHeaderLastResultsHash, filterHeaderLastResultsHashNeq = filterHeaderLastResultsHashNeq, filterHeaderLastResultsHashLike = filterHeaderLastResultsHashLike, filterHeaderLastResultsHashIlike = filterHeaderLastResultsHashIlike, filterHeaderEvidenceHash = filterHeaderEvidenceHash, filterHeaderEvidenceHashNeq = filterHeaderEvidenceHashNeq, filterHeaderEvidenceHashLike = filterHeaderEvidenceHashLike, filterHeaderEvidenceHashIlike = filterHeaderEvidenceHashIlike, filterHeaderProposerAddress = filterHeaderProposerAddress, filterHeaderProposerAddressNeq = filterHeaderProposerAddressNeq, filterHeaderProposerAddressLike = filterHeaderProposerAddressLike, filterHeaderProposerAddressIlike = filterHeaderProposerAddressIlike, include = include, sort = sort)

        return request<Unit, ApiBlocksGet200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiBlocksGet
     *
     * @param fieldsBlocks Include the given fields in the response. (optional)
     * @param filterHash Filter the results where the [hash] field is equal to the given value. (optional)
     * @param filterHashNeq Filter the results where the [hash] field is not equal to the given value. (optional)
     * @param filterHashLike Filter the results where the [hash] field is similar to the given case sensitive value. (optional)
     * @param filterHashIlike Filter the results where the [hash] field is similar to the given case insensitive value. (optional)
     * @param filterHeight Filter the results where the [height] field is equal to the given value. (optional)
     * @param filterHeaderVersionBlock Filter the results where the [header.version.block] field is equal to the given value. (optional)
     * @param filterHeaderChainId Filter the results where the [header.chainId] field is equal to the given value. (optional)
     * @param filterHeaderChainIdNeq Filter the results where the [header.chainId] field is not equal to the given value. (optional)
     * @param filterHeaderChainIdLike Filter the results where the [header.chainId] field is similar to the given case sensitive value. (optional)
     * @param filterHeaderChainIdIlike Filter the results where the [header.chainId] field is similar to the given case insensitive value. (optional)
     * @param filterHeaderHeight Filter the results where the [header.height] field is equal to the given value. (optional)
     * @param filterHeaderTime Filter the results where the [header.time] field is equal to the given value. (optional)
     * @param filterHeaderTimeNeq Filter the results where the [header.time] field is not equal to the given value. (optional)
     * @param filterHeaderTimeLike Filter the results where the [header.time] field is similar to the given case sensitive value. (optional)
     * @param filterHeaderTimeIlike Filter the results where the [header.time] field is similar to the given case insensitive value. (optional)
     * @param filterHeaderLastBlockIdHash Filter the results where the [header.lastBlockId.hash] field is equal to the given value. (optional)
     * @param filterHeaderLastBlockIdHashNeq Filter the results where the [header.lastBlockId.hash] field is not equal to the given value. (optional)
     * @param filterHeaderLastBlockIdHashLike Filter the results where the [header.lastBlockId.hash] field is similar to the given case sensitive value. (optional)
     * @param filterHeaderLastBlockIdHashIlike Filter the results where the [header.lastBlockId.hash] field is similar to the given case insensitive value. (optional)
     * @param filterHeaderLastBlockIdPartSetHeaderTotal Filter the results where the [header.lastBlockId.partSetHeader.total] field is equal to the given value. (optional)
     * @param filterHeaderLastBlockIdPartSetHeaderHash Filter the results where the [header.lastBlockId.partSetHeader.hash] field is equal to the given value. (optional)
     * @param filterHeaderLastBlockIdPartSetHeaderHashNeq Filter the results where the [header.lastBlockId.partSetHeader.hash] field is not equal to the given value. (optional)
     * @param filterHeaderLastBlockIdPartSetHeaderHashLike Filter the results where the [header.lastBlockId.partSetHeader.hash] field is similar to the given case sensitive value. (optional)
     * @param filterHeaderLastBlockIdPartSetHeaderHashIlike Filter the results where the [header.lastBlockId.partSetHeader.hash] field is similar to the given case insensitive value. (optional)
     * @param filterHeaderLastCommitHash Filter the results where the [header.lastCommitHash] field is equal to the given value. (optional)
     * @param filterHeaderLastCommitHashNeq Filter the results where the [header.lastCommitHash] field is not equal to the given value. (optional)
     * @param filterHeaderLastCommitHashLike Filter the results where the [header.lastCommitHash] field is similar to the given case sensitive value. (optional)
     * @param filterHeaderLastCommitHashIlike Filter the results where the [header.lastCommitHash] field is similar to the given case insensitive value. (optional)
     * @param filterHeaderDataHash Filter the results where the [header.dataHash] field is equal to the given value. (optional)
     * @param filterHeaderDataHashNeq Filter the results where the [header.dataHash] field is not equal to the given value. (optional)
     * @param filterHeaderDataHashLike Filter the results where the [header.dataHash] field is similar to the given case sensitive value. (optional)
     * @param filterHeaderDataHashIlike Filter the results where the [header.dataHash] field is similar to the given case insensitive value. (optional)
     * @param filterHeaderValidatorsHash Filter the results where the [header.validatorsHash] field is equal to the given value. (optional)
     * @param filterHeaderValidatorsHashNeq Filter the results where the [header.validatorsHash] field is not equal to the given value. (optional)
     * @param filterHeaderValidatorsHashLike Filter the results where the [header.validatorsHash] field is similar to the given case sensitive value. (optional)
     * @param filterHeaderValidatorsHashIlike Filter the results where the [header.validatorsHash] field is similar to the given case insensitive value. (optional)
     * @param filterHeaderNextValidatorsHash Filter the results where the [header.nextValidatorsHash] field is equal to the given value. (optional)
     * @param filterHeaderNextValidatorsHashNeq Filter the results where the [header.nextValidatorsHash] field is not equal to the given value. (optional)
     * @param filterHeaderNextValidatorsHashLike Filter the results where the [header.nextValidatorsHash] field is similar to the given case sensitive value. (optional)
     * @param filterHeaderNextValidatorsHashIlike Filter the results where the [header.nextValidatorsHash] field is similar to the given case insensitive value. (optional)
     * @param filterHeaderConsensusHash Filter the results where the [header.consensusHash] field is equal to the given value. (optional)
     * @param filterHeaderConsensusHashNeq Filter the results where the [header.consensusHash] field is not equal to the given value. (optional)
     * @param filterHeaderConsensusHashLike Filter the results where the [header.consensusHash] field is similar to the given case sensitive value. (optional)
     * @param filterHeaderConsensusHashIlike Filter the results where the [header.consensusHash] field is similar to the given case insensitive value. (optional)
     * @param filterHeaderAppHash Filter the results where the [header.appHash] field is equal to the given value. (optional)
     * @param filterHeaderAppHashNeq Filter the results where the [header.appHash] field is not equal to the given value. (optional)
     * @param filterHeaderAppHashLike Filter the results where the [header.appHash] field is similar to the given case sensitive value. (optional)
     * @param filterHeaderAppHashIlike Filter the results where the [header.appHash] field is similar to the given case insensitive value. (optional)
     * @param filterHeaderLastResultsHash Filter the results where the [header.lastResultsHash] field is equal to the given value. (optional)
     * @param filterHeaderLastResultsHashNeq Filter the results where the [header.lastResultsHash] field is not equal to the given value. (optional)
     * @param filterHeaderLastResultsHashLike Filter the results where the [header.lastResultsHash] field is similar to the given case sensitive value. (optional)
     * @param filterHeaderLastResultsHashIlike Filter the results where the [header.lastResultsHash] field is similar to the given case insensitive value. (optional)
     * @param filterHeaderEvidenceHash Filter the results where the [header.evidenceHash] field is equal to the given value. (optional)
     * @param filterHeaderEvidenceHashNeq Filter the results where the [header.evidenceHash] field is not equal to the given value. (optional)
     * @param filterHeaderEvidenceHashLike Filter the results where the [header.evidenceHash] field is similar to the given case sensitive value. (optional)
     * @param filterHeaderEvidenceHashIlike Filter the results where the [header.evidenceHash] field is similar to the given case insensitive value. (optional)
     * @param filterHeaderProposerAddress Filter the results where the [header.proposerAddress] field is equal to the given value. (optional)
     * @param filterHeaderProposerAddressNeq Filter the results where the [header.proposerAddress] field is not equal to the given value. (optional)
     * @param filterHeaderProposerAddressLike Filter the results where the [header.proposerAddress] field is similar to the given case sensitive value. (optional)
     * @param filterHeaderProposerAddressIlike Filter the results where the [header.proposerAddress] field is similar to the given case insensitive value. (optional)
     * @param include Include the given relationships. (optional)
     * @param sort Sort the results by the given field and direction. (optional)
     * @return RequestConfig
     */
    fun apiBlocksGetRequestConfig(fieldsBlocks: ApiBlocksGetFieldsBlocksParameter?, filterHash: kotlin.String?, filterHashNeq: kotlin.String?, filterHashLike: kotlin.String?, filterHashIlike: kotlin.String?, filterHeight: kotlin.Int?, filterHeaderVersionBlock: kotlin.Int?, filterHeaderChainId: kotlin.String?, filterHeaderChainIdNeq: kotlin.String?, filterHeaderChainIdLike: kotlin.String?, filterHeaderChainIdIlike: kotlin.String?, filterHeaderHeight: kotlin.Int?, filterHeaderTime: kotlin.String?, filterHeaderTimeNeq: kotlin.String?, filterHeaderTimeLike: kotlin.String?, filterHeaderTimeIlike: kotlin.String?, filterHeaderLastBlockIdHash: kotlin.String?, filterHeaderLastBlockIdHashNeq: kotlin.String?, filterHeaderLastBlockIdHashLike: kotlin.String?, filterHeaderLastBlockIdHashIlike: kotlin.String?, filterHeaderLastBlockIdPartSetHeaderTotal: kotlin.Int?, filterHeaderLastBlockIdPartSetHeaderHash: kotlin.String?, filterHeaderLastBlockIdPartSetHeaderHashNeq: kotlin.String?, filterHeaderLastBlockIdPartSetHeaderHashLike: kotlin.String?, filterHeaderLastBlockIdPartSetHeaderHashIlike: kotlin.String?, filterHeaderLastCommitHash: kotlin.String?, filterHeaderLastCommitHashNeq: kotlin.String?, filterHeaderLastCommitHashLike: kotlin.String?, filterHeaderLastCommitHashIlike: kotlin.String?, filterHeaderDataHash: kotlin.String?, filterHeaderDataHashNeq: kotlin.String?, filterHeaderDataHashLike: kotlin.String?, filterHeaderDataHashIlike: kotlin.String?, filterHeaderValidatorsHash: kotlin.String?, filterHeaderValidatorsHashNeq: kotlin.String?, filterHeaderValidatorsHashLike: kotlin.String?, filterHeaderValidatorsHashIlike: kotlin.String?, filterHeaderNextValidatorsHash: kotlin.String?, filterHeaderNextValidatorsHashNeq: kotlin.String?, filterHeaderNextValidatorsHashLike: kotlin.String?, filterHeaderNextValidatorsHashIlike: kotlin.String?, filterHeaderConsensusHash: kotlin.String?, filterHeaderConsensusHashNeq: kotlin.String?, filterHeaderConsensusHashLike: kotlin.String?, filterHeaderConsensusHashIlike: kotlin.String?, filterHeaderAppHash: kotlin.String?, filterHeaderAppHashNeq: kotlin.String?, filterHeaderAppHashLike: kotlin.String?, filterHeaderAppHashIlike: kotlin.String?, filterHeaderLastResultsHash: kotlin.String?, filterHeaderLastResultsHashNeq: kotlin.String?, filterHeaderLastResultsHashLike: kotlin.String?, filterHeaderLastResultsHashIlike: kotlin.String?, filterHeaderEvidenceHash: kotlin.String?, filterHeaderEvidenceHashNeq: kotlin.String?, filterHeaderEvidenceHashLike: kotlin.String?, filterHeaderEvidenceHashIlike: kotlin.String?, filterHeaderProposerAddress: kotlin.String?, filterHeaderProposerAddressNeq: kotlin.String?, filterHeaderProposerAddressLike: kotlin.String?, filterHeaderProposerAddressIlike: kotlin.String?, include: ApiBlocksGetIncludeParameter?, sort: ApiBlocksGetSortParameter?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (fieldsBlocks != null) {
                    put("fields[blocks]", listOf(fieldsBlocks.toString()))
                }
                if (filterHash != null) {
                    put("filter[hash]", listOf(filterHash.toString()))
                }
                if (filterHashNeq != null) {
                    put("filter[hash.neq]", listOf(filterHashNeq.toString()))
                }
                if (filterHashLike != null) {
                    put("filter[hash.like]", listOf(filterHashLike.toString()))
                }
                if (filterHashIlike != null) {
                    put("filter[hash.ilike]", listOf(filterHashIlike.toString()))
                }
                if (filterHeight != null) {
                    put("filter[height]", listOf(filterHeight.toString()))
                }
                if (filterHeaderVersionBlock != null) {
                    put("filter[header.version.block]", listOf(filterHeaderVersionBlock.toString()))
                }
                if (filterHeaderChainId != null) {
                    put("filter[header.chainId]", listOf(filterHeaderChainId.toString()))
                }
                if (filterHeaderChainIdNeq != null) {
                    put("filter[header.chainId.neq]", listOf(filterHeaderChainIdNeq.toString()))
                }
                if (filterHeaderChainIdLike != null) {
                    put("filter[header.chainId.like]", listOf(filterHeaderChainIdLike.toString()))
                }
                if (filterHeaderChainIdIlike != null) {
                    put("filter[header.chainId.ilike]", listOf(filterHeaderChainIdIlike.toString()))
                }
                if (filterHeaderHeight != null) {
                    put("filter[header.height]", listOf(filterHeaderHeight.toString()))
                }
                if (filterHeaderTime != null) {
                    put("filter[header.time]", listOf(filterHeaderTime.toString()))
                }
                if (filterHeaderTimeNeq != null) {
                    put("filter[header.time.neq]", listOf(filterHeaderTimeNeq.toString()))
                }
                if (filterHeaderTimeLike != null) {
                    put("filter[header.time.like]", listOf(filterHeaderTimeLike.toString()))
                }
                if (filterHeaderTimeIlike != null) {
                    put("filter[header.time.ilike]", listOf(filterHeaderTimeIlike.toString()))
                }
                if (filterHeaderLastBlockIdHash != null) {
                    put("filter[header.lastBlockId.hash]", listOf(filterHeaderLastBlockIdHash.toString()))
                }
                if (filterHeaderLastBlockIdHashNeq != null) {
                    put("filter[header.lastBlockId.hash.neq]", listOf(filterHeaderLastBlockIdHashNeq.toString()))
                }
                if (filterHeaderLastBlockIdHashLike != null) {
                    put("filter[header.lastBlockId.hash.like]", listOf(filterHeaderLastBlockIdHashLike.toString()))
                }
                if (filterHeaderLastBlockIdHashIlike != null) {
                    put("filter[header.lastBlockId.hash.ilike]", listOf(filterHeaderLastBlockIdHashIlike.toString()))
                }
                if (filterHeaderLastBlockIdPartSetHeaderTotal != null) {
                    put("filter[header.lastBlockId.partSetHeader.total]", listOf(filterHeaderLastBlockIdPartSetHeaderTotal.toString()))
                }
                if (filterHeaderLastBlockIdPartSetHeaderHash != null) {
                    put("filter[header.lastBlockId.partSetHeader.hash]", listOf(filterHeaderLastBlockIdPartSetHeaderHash.toString()))
                }
                if (filterHeaderLastBlockIdPartSetHeaderHashNeq != null) {
                    put("filter[header.lastBlockId.partSetHeader.hash.neq]", listOf(filterHeaderLastBlockIdPartSetHeaderHashNeq.toString()))
                }
                if (filterHeaderLastBlockIdPartSetHeaderHashLike != null) {
                    put("filter[header.lastBlockId.partSetHeader.hash.like]", listOf(filterHeaderLastBlockIdPartSetHeaderHashLike.toString()))
                }
                if (filterHeaderLastBlockIdPartSetHeaderHashIlike != null) {
                    put("filter[header.lastBlockId.partSetHeader.hash.ilike]", listOf(filterHeaderLastBlockIdPartSetHeaderHashIlike.toString()))
                }
                if (filterHeaderLastCommitHash != null) {
                    put("filter[header.lastCommitHash]", listOf(filterHeaderLastCommitHash.toString()))
                }
                if (filterHeaderLastCommitHashNeq != null) {
                    put("filter[header.lastCommitHash.neq]", listOf(filterHeaderLastCommitHashNeq.toString()))
                }
                if (filterHeaderLastCommitHashLike != null) {
                    put("filter[header.lastCommitHash.like]", listOf(filterHeaderLastCommitHashLike.toString()))
                }
                if (filterHeaderLastCommitHashIlike != null) {
                    put("filter[header.lastCommitHash.ilike]", listOf(filterHeaderLastCommitHashIlike.toString()))
                }
                if (filterHeaderDataHash != null) {
                    put("filter[header.dataHash]", listOf(filterHeaderDataHash.toString()))
                }
                if (filterHeaderDataHashNeq != null) {
                    put("filter[header.dataHash.neq]", listOf(filterHeaderDataHashNeq.toString()))
                }
                if (filterHeaderDataHashLike != null) {
                    put("filter[header.dataHash.like]", listOf(filterHeaderDataHashLike.toString()))
                }
                if (filterHeaderDataHashIlike != null) {
                    put("filter[header.dataHash.ilike]", listOf(filterHeaderDataHashIlike.toString()))
                }
                if (filterHeaderValidatorsHash != null) {
                    put("filter[header.validatorsHash]", listOf(filterHeaderValidatorsHash.toString()))
                }
                if (filterHeaderValidatorsHashNeq != null) {
                    put("filter[header.validatorsHash.neq]", listOf(filterHeaderValidatorsHashNeq.toString()))
                }
                if (filterHeaderValidatorsHashLike != null) {
                    put("filter[header.validatorsHash.like]", listOf(filterHeaderValidatorsHashLike.toString()))
                }
                if (filterHeaderValidatorsHashIlike != null) {
                    put("filter[header.validatorsHash.ilike]", listOf(filterHeaderValidatorsHashIlike.toString()))
                }
                if (filterHeaderNextValidatorsHash != null) {
                    put("filter[header.nextValidatorsHash]", listOf(filterHeaderNextValidatorsHash.toString()))
                }
                if (filterHeaderNextValidatorsHashNeq != null) {
                    put("filter[header.nextValidatorsHash.neq]", listOf(filterHeaderNextValidatorsHashNeq.toString()))
                }
                if (filterHeaderNextValidatorsHashLike != null) {
                    put("filter[header.nextValidatorsHash.like]", listOf(filterHeaderNextValidatorsHashLike.toString()))
                }
                if (filterHeaderNextValidatorsHashIlike != null) {
                    put("filter[header.nextValidatorsHash.ilike]", listOf(filterHeaderNextValidatorsHashIlike.toString()))
                }
                if (filterHeaderConsensusHash != null) {
                    put("filter[header.consensusHash]", listOf(filterHeaderConsensusHash.toString()))
                }
                if (filterHeaderConsensusHashNeq != null) {
                    put("filter[header.consensusHash.neq]", listOf(filterHeaderConsensusHashNeq.toString()))
                }
                if (filterHeaderConsensusHashLike != null) {
                    put("filter[header.consensusHash.like]", listOf(filterHeaderConsensusHashLike.toString()))
                }
                if (filterHeaderConsensusHashIlike != null) {
                    put("filter[header.consensusHash.ilike]", listOf(filterHeaderConsensusHashIlike.toString()))
                }
                if (filterHeaderAppHash != null) {
                    put("filter[header.appHash]", listOf(filterHeaderAppHash.toString()))
                }
                if (filterHeaderAppHashNeq != null) {
                    put("filter[header.appHash.neq]", listOf(filterHeaderAppHashNeq.toString()))
                }
                if (filterHeaderAppHashLike != null) {
                    put("filter[header.appHash.like]", listOf(filterHeaderAppHashLike.toString()))
                }
                if (filterHeaderAppHashIlike != null) {
                    put("filter[header.appHash.ilike]", listOf(filterHeaderAppHashIlike.toString()))
                }
                if (filterHeaderLastResultsHash != null) {
                    put("filter[header.lastResultsHash]", listOf(filterHeaderLastResultsHash.toString()))
                }
                if (filterHeaderLastResultsHashNeq != null) {
                    put("filter[header.lastResultsHash.neq]", listOf(filterHeaderLastResultsHashNeq.toString()))
                }
                if (filterHeaderLastResultsHashLike != null) {
                    put("filter[header.lastResultsHash.like]", listOf(filterHeaderLastResultsHashLike.toString()))
                }
                if (filterHeaderLastResultsHashIlike != null) {
                    put("filter[header.lastResultsHash.ilike]", listOf(filterHeaderLastResultsHashIlike.toString()))
                }
                if (filterHeaderEvidenceHash != null) {
                    put("filter[header.evidenceHash]", listOf(filterHeaderEvidenceHash.toString()))
                }
                if (filterHeaderEvidenceHashNeq != null) {
                    put("filter[header.evidenceHash.neq]", listOf(filterHeaderEvidenceHashNeq.toString()))
                }
                if (filterHeaderEvidenceHashLike != null) {
                    put("filter[header.evidenceHash.like]", listOf(filterHeaderEvidenceHashLike.toString()))
                }
                if (filterHeaderEvidenceHashIlike != null) {
                    put("filter[header.evidenceHash.ilike]", listOf(filterHeaderEvidenceHashIlike.toString()))
                }
                if (filterHeaderProposerAddress != null) {
                    put("filter[header.proposerAddress]", listOf(filterHeaderProposerAddress.toString()))
                }
                if (filterHeaderProposerAddressNeq != null) {
                    put("filter[header.proposerAddress.neq]", listOf(filterHeaderProposerAddressNeq.toString()))
                }
                if (filterHeaderProposerAddressLike != null) {
                    put("filter[header.proposerAddress.like]", listOf(filterHeaderProposerAddressLike.toString()))
                }
                if (filterHeaderProposerAddressIlike != null) {
                    put("filter[header.proposerAddress.ilike]", listOf(filterHeaderProposerAddressIlike.toString()))
                }
                if (include != null) {
                    put("include", listOf(include.toString()))
                }
                if (sort != null) {
                    put("sort", listOf(sort.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/blocks",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * List entities
     * 
     * @param fieldsEntities Include the given fields in the response. (optional)
     * @param filterModule Filter the results where the [module] field is equal to the given value. (optional)
     * @param filterModuleNeq Filter the results where the [module] field is not equal to the given value. (optional)
     * @param filterModuleLike Filter the results where the [module] field is similar to the given case sensitive value. (optional)
     * @param filterModuleIlike Filter the results where the [module] field is similar to the given case insensitive value. (optional)
     * @param filterType Filter the results where the [type] field is equal to the given value. (optional)
     * @param filterTypeNeq Filter the results where the [type] field is not equal to the given value. (optional)
     * @param filterTypeLike Filter the results where the [type] field is similar to the given case sensitive value. (optional)
     * @param filterTypeIlike Filter the results where the [type] field is similar to the given case insensitive value. (optional)
     * @param filterKey Filter the results where the [key] field is equal to the given value. (optional)
     * @param filterKeyNeq Filter the results where the [key] field is not equal to the given value. (optional)
     * @param filterKeyLike Filter the results where the [key] field is similar to the given case sensitive value. (optional)
     * @param filterKeyIlike Filter the results where the [key] field is similar to the given case insensitive value. (optional)
     * @param filterValue Filter the results where the [value] field is equal to the given value. (optional)
     * @param filterValueNeq Filter the results where the [value] field is not equal to the given value. (optional)
     * @param filterValueLike Filter the results where the [value] field is similar to the given case sensitive value. (optional)
     * @param filterValueIlike Filter the results where the [value] field is similar to the given case insensitive value. (optional)
     * @param sort Sort the results by the given field and direction. (optional)
     * @return ApiEntitiesGet200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiEntitiesGet(fieldsEntities: ApiEntitiesGetFieldsEntitiesParameter? = null, filterModule: kotlin.String? = null, filterModuleNeq: kotlin.String? = null, filterModuleLike: kotlin.String? = null, filterModuleIlike: kotlin.String? = null, filterType: kotlin.String? = null, filterTypeNeq: kotlin.String? = null, filterTypeLike: kotlin.String? = null, filterTypeIlike: kotlin.String? = null, filterKey: kotlin.String? = null, filterKeyNeq: kotlin.String? = null, filterKeyLike: kotlin.String? = null, filterKeyIlike: kotlin.String? = null, filterValue: kotlin.String? = null, filterValueNeq: kotlin.String? = null, filterValueLike: kotlin.String? = null, filterValueIlike: kotlin.String? = null, sort: ApiEntitiesGetSortParameter? = null) : ApiEntitiesGet200Response {
        val localVarResponse = apiEntitiesGetWithHttpInfo(fieldsEntities = fieldsEntities, filterModule = filterModule, filterModuleNeq = filterModuleNeq, filterModuleLike = filterModuleLike, filterModuleIlike = filterModuleIlike, filterType = filterType, filterTypeNeq = filterTypeNeq, filterTypeLike = filterTypeLike, filterTypeIlike = filterTypeIlike, filterKey = filterKey, filterKeyNeq = filterKeyNeq, filterKeyLike = filterKeyLike, filterKeyIlike = filterKeyIlike, filterValue = filterValue, filterValueNeq = filterValueNeq, filterValueLike = filterValueLike, filterValueIlike = filterValueIlike, sort = sort)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ApiEntitiesGet200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * List entities
     * 
     * @param fieldsEntities Include the given fields in the response. (optional)
     * @param filterModule Filter the results where the [module] field is equal to the given value. (optional)
     * @param filterModuleNeq Filter the results where the [module] field is not equal to the given value. (optional)
     * @param filterModuleLike Filter the results where the [module] field is similar to the given case sensitive value. (optional)
     * @param filterModuleIlike Filter the results where the [module] field is similar to the given case insensitive value. (optional)
     * @param filterType Filter the results where the [type] field is equal to the given value. (optional)
     * @param filterTypeNeq Filter the results where the [type] field is not equal to the given value. (optional)
     * @param filterTypeLike Filter the results where the [type] field is similar to the given case sensitive value. (optional)
     * @param filterTypeIlike Filter the results where the [type] field is similar to the given case insensitive value. (optional)
     * @param filterKey Filter the results where the [key] field is equal to the given value. (optional)
     * @param filterKeyNeq Filter the results where the [key] field is not equal to the given value. (optional)
     * @param filterKeyLike Filter the results where the [key] field is similar to the given case sensitive value. (optional)
     * @param filterKeyIlike Filter the results where the [key] field is similar to the given case insensitive value. (optional)
     * @param filterValue Filter the results where the [value] field is equal to the given value. (optional)
     * @param filterValueNeq Filter the results where the [value] field is not equal to the given value. (optional)
     * @param filterValueLike Filter the results where the [value] field is similar to the given case sensitive value. (optional)
     * @param filterValueIlike Filter the results where the [value] field is similar to the given case insensitive value. (optional)
     * @param sort Sort the results by the given field and direction. (optional)
     * @return ApiResponse<ApiEntitiesGet200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiEntitiesGetWithHttpInfo(fieldsEntities: ApiEntitiesGetFieldsEntitiesParameter?, filterModule: kotlin.String?, filterModuleNeq: kotlin.String?, filterModuleLike: kotlin.String?, filterModuleIlike: kotlin.String?, filterType: kotlin.String?, filterTypeNeq: kotlin.String?, filterTypeLike: kotlin.String?, filterTypeIlike: kotlin.String?, filterKey: kotlin.String?, filterKeyNeq: kotlin.String?, filterKeyLike: kotlin.String?, filterKeyIlike: kotlin.String?, filterValue: kotlin.String?, filterValueNeq: kotlin.String?, filterValueLike: kotlin.String?, filterValueIlike: kotlin.String?, sort: ApiEntitiesGetSortParameter?) : ApiResponse<ApiEntitiesGet200Response?> {
        val localVariableConfig = apiEntitiesGetRequestConfig(fieldsEntities = fieldsEntities, filterModule = filterModule, filterModuleNeq = filterModuleNeq, filterModuleLike = filterModuleLike, filterModuleIlike = filterModuleIlike, filterType = filterType, filterTypeNeq = filterTypeNeq, filterTypeLike = filterTypeLike, filterTypeIlike = filterTypeIlike, filterKey = filterKey, filterKeyNeq = filterKeyNeq, filterKeyLike = filterKeyLike, filterKeyIlike = filterKeyIlike, filterValue = filterValue, filterValueNeq = filterValueNeq, filterValueLike = filterValueLike, filterValueIlike = filterValueIlike, sort = sort)

        return request<Unit, ApiEntitiesGet200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiEntitiesGet
     *
     * @param fieldsEntities Include the given fields in the response. (optional)
     * @param filterModule Filter the results where the [module] field is equal to the given value. (optional)
     * @param filterModuleNeq Filter the results where the [module] field is not equal to the given value. (optional)
     * @param filterModuleLike Filter the results where the [module] field is similar to the given case sensitive value. (optional)
     * @param filterModuleIlike Filter the results where the [module] field is similar to the given case insensitive value. (optional)
     * @param filterType Filter the results where the [type] field is equal to the given value. (optional)
     * @param filterTypeNeq Filter the results where the [type] field is not equal to the given value. (optional)
     * @param filterTypeLike Filter the results where the [type] field is similar to the given case sensitive value. (optional)
     * @param filterTypeIlike Filter the results where the [type] field is similar to the given case insensitive value. (optional)
     * @param filterKey Filter the results where the [key] field is equal to the given value. (optional)
     * @param filterKeyNeq Filter the results where the [key] field is not equal to the given value. (optional)
     * @param filterKeyLike Filter the results where the [key] field is similar to the given case sensitive value. (optional)
     * @param filterKeyIlike Filter the results where the [key] field is similar to the given case insensitive value. (optional)
     * @param filterValue Filter the results where the [value] field is equal to the given value. (optional)
     * @param filterValueNeq Filter the results where the [value] field is not equal to the given value. (optional)
     * @param filterValueLike Filter the results where the [value] field is similar to the given case sensitive value. (optional)
     * @param filterValueIlike Filter the results where the [value] field is similar to the given case insensitive value. (optional)
     * @param sort Sort the results by the given field and direction. (optional)
     * @return RequestConfig
     */
    fun apiEntitiesGetRequestConfig(fieldsEntities: ApiEntitiesGetFieldsEntitiesParameter?, filterModule: kotlin.String?, filterModuleNeq: kotlin.String?, filterModuleLike: kotlin.String?, filterModuleIlike: kotlin.String?, filterType: kotlin.String?, filterTypeNeq: kotlin.String?, filterTypeLike: kotlin.String?, filterTypeIlike: kotlin.String?, filterKey: kotlin.String?, filterKeyNeq: kotlin.String?, filterKeyLike: kotlin.String?, filterKeyIlike: kotlin.String?, filterValue: kotlin.String?, filterValueNeq: kotlin.String?, filterValueLike: kotlin.String?, filterValueIlike: kotlin.String?, sort: ApiEntitiesGetSortParameter?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (fieldsEntities != null) {
                    put("fields[entities]", listOf(fieldsEntities.toString()))
                }
                if (filterModule != null) {
                    put("filter[module]", listOf(filterModule.toString()))
                }
                if (filterModuleNeq != null) {
                    put("filter[module.neq]", listOf(filterModuleNeq.toString()))
                }
                if (filterModuleLike != null) {
                    put("filter[module.like]", listOf(filterModuleLike.toString()))
                }
                if (filterModuleIlike != null) {
                    put("filter[module.ilike]", listOf(filterModuleIlike.toString()))
                }
                if (filterType != null) {
                    put("filter[type]", listOf(filterType.toString()))
                }
                if (filterTypeNeq != null) {
                    put("filter[type.neq]", listOf(filterTypeNeq.toString()))
                }
                if (filterTypeLike != null) {
                    put("filter[type.like]", listOf(filterTypeLike.toString()))
                }
                if (filterTypeIlike != null) {
                    put("filter[type.ilike]", listOf(filterTypeIlike.toString()))
                }
                if (filterKey != null) {
                    put("filter[key]", listOf(filterKey.toString()))
                }
                if (filterKeyNeq != null) {
                    put("filter[key.neq]", listOf(filterKeyNeq.toString()))
                }
                if (filterKeyLike != null) {
                    put("filter[key.like]", listOf(filterKeyLike.toString()))
                }
                if (filterKeyIlike != null) {
                    put("filter[key.ilike]", listOf(filterKeyIlike.toString()))
                }
                if (filterValue != null) {
                    put("filter[value]", listOf(filterValue.toString()))
                }
                if (filterValueNeq != null) {
                    put("filter[value.neq]", listOf(filterValueNeq.toString()))
                }
                if (filterValueLike != null) {
                    put("filter[value.like]", listOf(filterValueLike.toString()))
                }
                if (filterValueIlike != null) {
                    put("filter[value.ilike]", listOf(filterValueIlike.toString()))
                }
                if (sort != null) {
                    put("sort", listOf(sort.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/entities",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * List transactions
     * 
     * @param fieldsAccounts Include the given fields in the response. (optional)
     * @param filterHash Filter the results where the [hash] field is equal to the given value. (optional)
     * @param filterHashNeq Filter the results where the [hash] field is not equal to the given value. (optional)
     * @param filterHashLike Filter the results where the [hash] field is similar to the given case sensitive value. (optional)
     * @param filterHashIlike Filter the results where the [hash] field is similar to the given case insensitive value. (optional)
     * @param filterSender Filter the results where the [sender] field is equal to the given value. (optional)
     * @param filterSenderNeq Filter the results where the [sender] field is not equal to the given value. (optional)
     * @param filterSenderLike Filter the results where the [sender] field is similar to the given case sensitive value. (optional)
     * @param filterSenderIlike Filter the results where the [sender] field is similar to the given case insensitive value. (optional)
     * @param filterRecipient Filter the results where the [recipient] field is equal to the given value. (optional)
     * @param filterRecipientNeq Filter the results where the [recipient] field is not equal to the given value. (optional)
     * @param filterRecipientLike Filter the results where the [recipient] field is similar to the given case sensitive value. (optional)
     * @param filterRecipientIlike Filter the results where the [recipient] field is similar to the given case insensitive value. (optional)
     * @param filterGas Filter the results where the [gas] field is equal to the given value. (optional)
     * @param filterNonce Filter the results where the [nonce] field is equal to the given value. (optional)
     * @param filterSignature Filter the results where the [signature] field is equal to the given value. (optional)
     * @param filterSignatureNeq Filter the results where the [signature] field is not equal to the given value. (optional)
     * @param filterSignatureLike Filter the results where the [signature] field is similar to the given case sensitive value. (optional)
     * @param filterSignatureIlike Filter the results where the [signature] field is similar to the given case insensitive value. (optional)
     * @param filterVersion Filter the results where the [version] field is equal to the given value. (optional)
     * @param filterVersionNeq Filter the results where the [version] field is not equal to the given value. (optional)
     * @param filterVersionLike Filter the results where the [version] field is similar to the given case sensitive value. (optional)
     * @param filterVersionIlike Filter the results where the [version] field is similar to the given case insensitive value. (optional)
     * @param filterMessageHandler Filter the results where the [message.handler] field is equal to the given value. (optional)
     * @param filterMessageHandlerNeq Filter the results where the [message.handler] field is not equal to the given value. (optional)
     * @param filterMessageHandlerLike Filter the results where the [message.handler] field is similar to the given case sensitive value. (optional)
     * @param filterMessageHandlerIlike Filter the results where the [message.handler] field is similar to the given case insensitive value. (optional)
     * @param filterMessageVersion Filter the results where the [message.version] field is equal to the given value. (optional)
     * @param filterMessageVersionNeq Filter the results where the [message.version] field is not equal to the given value. (optional)
     * @param filterMessageVersionLike Filter the results where the [message.version] field is similar to the given case sensitive value. (optional)
     * @param filterMessageVersionIlike Filter the results where the [message.version] field is similar to the given case insensitive value. (optional)
     * @param filterMessageNetwork Filter the results where the [message.network] field is equal to the given value. (optional)
     * @param filterMessageNetworkNeq Filter the results where the [message.network] field is not equal to the given value. (optional)
     * @param filterMessageNetworkLike Filter the results where the [message.network] field is similar to the given case sensitive value. (optional)
     * @param filterMessageNetworkIlike Filter the results where the [message.network] field is similar to the given case insensitive value. (optional)
     * @param filterMessageContent Filter the results where the [message.content] field is equal to the given value. (optional)
     * @param filterMessageContentNeq Filter the results where the [message.content] field is not equal to the given value. (optional)
     * @param filterMessageContentLike Filter the results where the [message.content] field is similar to the given case sensitive value. (optional)
     * @param filterMessageContentIlike Filter the results where the [message.content] field is similar to the given case insensitive value. (optional)
     * @param include Include the given relationships. (optional)
     * @param sort Sort the results by the given field and direction. (optional)
     * @return ApiTransactionsGet200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiTransactionsGet(fieldsAccounts: ApiTransactionsGetFieldsAccountsParameter? = null, filterHash: kotlin.String? = null, filterHashNeq: kotlin.String? = null, filterHashLike: kotlin.String? = null, filterHashIlike: kotlin.String? = null, filterSender: kotlin.String? = null, filterSenderNeq: kotlin.String? = null, filterSenderLike: kotlin.String? = null, filterSenderIlike: kotlin.String? = null, filterRecipient: kotlin.String? = null, filterRecipientNeq: kotlin.String? = null, filterRecipientLike: kotlin.String? = null, filterRecipientIlike: kotlin.String? = null, filterGas: kotlin.Int? = null, filterNonce: kotlin.Int? = null, filterSignature: kotlin.String? = null, filterSignatureNeq: kotlin.String? = null, filterSignatureLike: kotlin.String? = null, filterSignatureIlike: kotlin.String? = null, filterVersion: kotlin.String? = null, filterVersionNeq: kotlin.String? = null, filterVersionLike: kotlin.String? = null, filterVersionIlike: kotlin.String? = null, filterMessageHandler: kotlin.String? = null, filterMessageHandlerNeq: kotlin.String? = null, filterMessageHandlerLike: kotlin.String? = null, filterMessageHandlerIlike: kotlin.String? = null, filterMessageVersion: kotlin.String? = null, filterMessageVersionNeq: kotlin.String? = null, filterMessageVersionLike: kotlin.String? = null, filterMessageVersionIlike: kotlin.String? = null, filterMessageNetwork: kotlin.String? = null, filterMessageNetworkNeq: kotlin.String? = null, filterMessageNetworkLike: kotlin.String? = null, filterMessageNetworkIlike: kotlin.String? = null, filterMessageContent: kotlin.String? = null, filterMessageContentNeq: kotlin.String? = null, filterMessageContentLike: kotlin.String? = null, filterMessageContentIlike: kotlin.String? = null, include: ApiTransactionsGetIncludeParameter? = null, sort: ApiTransactionsGetSortParameter? = null) : ApiTransactionsGet200Response {
        val localVarResponse = apiTransactionsGetWithHttpInfo(fieldsAccounts = fieldsAccounts, filterHash = filterHash, filterHashNeq = filterHashNeq, filterHashLike = filterHashLike, filterHashIlike = filterHashIlike, filterSender = filterSender, filterSenderNeq = filterSenderNeq, filterSenderLike = filterSenderLike, filterSenderIlike = filterSenderIlike, filterRecipient = filterRecipient, filterRecipientNeq = filterRecipientNeq, filterRecipientLike = filterRecipientLike, filterRecipientIlike = filterRecipientIlike, filterGas = filterGas, filterNonce = filterNonce, filterSignature = filterSignature, filterSignatureNeq = filterSignatureNeq, filterSignatureLike = filterSignatureLike, filterSignatureIlike = filterSignatureIlike, filterVersion = filterVersion, filterVersionNeq = filterVersionNeq, filterVersionLike = filterVersionLike, filterVersionIlike = filterVersionIlike, filterMessageHandler = filterMessageHandler, filterMessageHandlerNeq = filterMessageHandlerNeq, filterMessageHandlerLike = filterMessageHandlerLike, filterMessageHandlerIlike = filterMessageHandlerIlike, filterMessageVersion = filterMessageVersion, filterMessageVersionNeq = filterMessageVersionNeq, filterMessageVersionLike = filterMessageVersionLike, filterMessageVersionIlike = filterMessageVersionIlike, filterMessageNetwork = filterMessageNetwork, filterMessageNetworkNeq = filterMessageNetworkNeq, filterMessageNetworkLike = filterMessageNetworkLike, filterMessageNetworkIlike = filterMessageNetworkIlike, filterMessageContent = filterMessageContent, filterMessageContentNeq = filterMessageContentNeq, filterMessageContentLike = filterMessageContentLike, filterMessageContentIlike = filterMessageContentIlike, include = include, sort = sort)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ApiTransactionsGet200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * List transactions
     * 
     * @param fieldsAccounts Include the given fields in the response. (optional)
     * @param filterHash Filter the results where the [hash] field is equal to the given value. (optional)
     * @param filterHashNeq Filter the results where the [hash] field is not equal to the given value. (optional)
     * @param filterHashLike Filter the results where the [hash] field is similar to the given case sensitive value. (optional)
     * @param filterHashIlike Filter the results where the [hash] field is similar to the given case insensitive value. (optional)
     * @param filterSender Filter the results where the [sender] field is equal to the given value. (optional)
     * @param filterSenderNeq Filter the results where the [sender] field is not equal to the given value. (optional)
     * @param filterSenderLike Filter the results where the [sender] field is similar to the given case sensitive value. (optional)
     * @param filterSenderIlike Filter the results where the [sender] field is similar to the given case insensitive value. (optional)
     * @param filterRecipient Filter the results where the [recipient] field is equal to the given value. (optional)
     * @param filterRecipientNeq Filter the results where the [recipient] field is not equal to the given value. (optional)
     * @param filterRecipientLike Filter the results where the [recipient] field is similar to the given case sensitive value. (optional)
     * @param filterRecipientIlike Filter the results where the [recipient] field is similar to the given case insensitive value. (optional)
     * @param filterGas Filter the results where the [gas] field is equal to the given value. (optional)
     * @param filterNonce Filter the results where the [nonce] field is equal to the given value. (optional)
     * @param filterSignature Filter the results where the [signature] field is equal to the given value. (optional)
     * @param filterSignatureNeq Filter the results where the [signature] field is not equal to the given value. (optional)
     * @param filterSignatureLike Filter the results where the [signature] field is similar to the given case sensitive value. (optional)
     * @param filterSignatureIlike Filter the results where the [signature] field is similar to the given case insensitive value. (optional)
     * @param filterVersion Filter the results where the [version] field is equal to the given value. (optional)
     * @param filterVersionNeq Filter the results where the [version] field is not equal to the given value. (optional)
     * @param filterVersionLike Filter the results where the [version] field is similar to the given case sensitive value. (optional)
     * @param filterVersionIlike Filter the results where the [version] field is similar to the given case insensitive value. (optional)
     * @param filterMessageHandler Filter the results where the [message.handler] field is equal to the given value. (optional)
     * @param filterMessageHandlerNeq Filter the results where the [message.handler] field is not equal to the given value. (optional)
     * @param filterMessageHandlerLike Filter the results where the [message.handler] field is similar to the given case sensitive value. (optional)
     * @param filterMessageHandlerIlike Filter the results where the [message.handler] field is similar to the given case insensitive value. (optional)
     * @param filterMessageVersion Filter the results where the [message.version] field is equal to the given value. (optional)
     * @param filterMessageVersionNeq Filter the results where the [message.version] field is not equal to the given value. (optional)
     * @param filterMessageVersionLike Filter the results where the [message.version] field is similar to the given case sensitive value. (optional)
     * @param filterMessageVersionIlike Filter the results where the [message.version] field is similar to the given case insensitive value. (optional)
     * @param filterMessageNetwork Filter the results where the [message.network] field is equal to the given value. (optional)
     * @param filterMessageNetworkNeq Filter the results where the [message.network] field is not equal to the given value. (optional)
     * @param filterMessageNetworkLike Filter the results where the [message.network] field is similar to the given case sensitive value. (optional)
     * @param filterMessageNetworkIlike Filter the results where the [message.network] field is similar to the given case insensitive value. (optional)
     * @param filterMessageContent Filter the results where the [message.content] field is equal to the given value. (optional)
     * @param filterMessageContentNeq Filter the results where the [message.content] field is not equal to the given value. (optional)
     * @param filterMessageContentLike Filter the results where the [message.content] field is similar to the given case sensitive value. (optional)
     * @param filterMessageContentIlike Filter the results where the [message.content] field is similar to the given case insensitive value. (optional)
     * @param include Include the given relationships. (optional)
     * @param sort Sort the results by the given field and direction. (optional)
     * @return ApiResponse<ApiTransactionsGet200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiTransactionsGetWithHttpInfo(fieldsAccounts: ApiTransactionsGetFieldsAccountsParameter?, filterHash: kotlin.String?, filterHashNeq: kotlin.String?, filterHashLike: kotlin.String?, filterHashIlike: kotlin.String?, filterSender: kotlin.String?, filterSenderNeq: kotlin.String?, filterSenderLike: kotlin.String?, filterSenderIlike: kotlin.String?, filterRecipient: kotlin.String?, filterRecipientNeq: kotlin.String?, filterRecipientLike: kotlin.String?, filterRecipientIlike: kotlin.String?, filterGas: kotlin.Int?, filterNonce: kotlin.Int?, filterSignature: kotlin.String?, filterSignatureNeq: kotlin.String?, filterSignatureLike: kotlin.String?, filterSignatureIlike: kotlin.String?, filterVersion: kotlin.String?, filterVersionNeq: kotlin.String?, filterVersionLike: kotlin.String?, filterVersionIlike: kotlin.String?, filterMessageHandler: kotlin.String?, filterMessageHandlerNeq: kotlin.String?, filterMessageHandlerLike: kotlin.String?, filterMessageHandlerIlike: kotlin.String?, filterMessageVersion: kotlin.String?, filterMessageVersionNeq: kotlin.String?, filterMessageVersionLike: kotlin.String?, filterMessageVersionIlike: kotlin.String?, filterMessageNetwork: kotlin.String?, filterMessageNetworkNeq: kotlin.String?, filterMessageNetworkLike: kotlin.String?, filterMessageNetworkIlike: kotlin.String?, filterMessageContent: kotlin.String?, filterMessageContentNeq: kotlin.String?, filterMessageContentLike: kotlin.String?, filterMessageContentIlike: kotlin.String?, include: ApiTransactionsGetIncludeParameter?, sort: ApiTransactionsGetSortParameter?) : ApiResponse<ApiTransactionsGet200Response?> {
        val localVariableConfig = apiTransactionsGetRequestConfig(fieldsAccounts = fieldsAccounts, filterHash = filterHash, filterHashNeq = filterHashNeq, filterHashLike = filterHashLike, filterHashIlike = filterHashIlike, filterSender = filterSender, filterSenderNeq = filterSenderNeq, filterSenderLike = filterSenderLike, filterSenderIlike = filterSenderIlike, filterRecipient = filterRecipient, filterRecipientNeq = filterRecipientNeq, filterRecipientLike = filterRecipientLike, filterRecipientIlike = filterRecipientIlike, filterGas = filterGas, filterNonce = filterNonce, filterSignature = filterSignature, filterSignatureNeq = filterSignatureNeq, filterSignatureLike = filterSignatureLike, filterSignatureIlike = filterSignatureIlike, filterVersion = filterVersion, filterVersionNeq = filterVersionNeq, filterVersionLike = filterVersionLike, filterVersionIlike = filterVersionIlike, filterMessageHandler = filterMessageHandler, filterMessageHandlerNeq = filterMessageHandlerNeq, filterMessageHandlerLike = filterMessageHandlerLike, filterMessageHandlerIlike = filterMessageHandlerIlike, filterMessageVersion = filterMessageVersion, filterMessageVersionNeq = filterMessageVersionNeq, filterMessageVersionLike = filterMessageVersionLike, filterMessageVersionIlike = filterMessageVersionIlike, filterMessageNetwork = filterMessageNetwork, filterMessageNetworkNeq = filterMessageNetworkNeq, filterMessageNetworkLike = filterMessageNetworkLike, filterMessageNetworkIlike = filterMessageNetworkIlike, filterMessageContent = filterMessageContent, filterMessageContentNeq = filterMessageContentNeq, filterMessageContentLike = filterMessageContentLike, filterMessageContentIlike = filterMessageContentIlike, include = include, sort = sort)

        return request<Unit, ApiTransactionsGet200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiTransactionsGet
     *
     * @param fieldsAccounts Include the given fields in the response. (optional)
     * @param filterHash Filter the results where the [hash] field is equal to the given value. (optional)
     * @param filterHashNeq Filter the results where the [hash] field is not equal to the given value. (optional)
     * @param filterHashLike Filter the results where the [hash] field is similar to the given case sensitive value. (optional)
     * @param filterHashIlike Filter the results where the [hash] field is similar to the given case insensitive value. (optional)
     * @param filterSender Filter the results where the [sender] field is equal to the given value. (optional)
     * @param filterSenderNeq Filter the results where the [sender] field is not equal to the given value. (optional)
     * @param filterSenderLike Filter the results where the [sender] field is similar to the given case sensitive value. (optional)
     * @param filterSenderIlike Filter the results where the [sender] field is similar to the given case insensitive value. (optional)
     * @param filterRecipient Filter the results where the [recipient] field is equal to the given value. (optional)
     * @param filterRecipientNeq Filter the results where the [recipient] field is not equal to the given value. (optional)
     * @param filterRecipientLike Filter the results where the [recipient] field is similar to the given case sensitive value. (optional)
     * @param filterRecipientIlike Filter the results where the [recipient] field is similar to the given case insensitive value. (optional)
     * @param filterGas Filter the results where the [gas] field is equal to the given value. (optional)
     * @param filterNonce Filter the results where the [nonce] field is equal to the given value. (optional)
     * @param filterSignature Filter the results where the [signature] field is equal to the given value. (optional)
     * @param filterSignatureNeq Filter the results where the [signature] field is not equal to the given value. (optional)
     * @param filterSignatureLike Filter the results where the [signature] field is similar to the given case sensitive value. (optional)
     * @param filterSignatureIlike Filter the results where the [signature] field is similar to the given case insensitive value. (optional)
     * @param filterVersion Filter the results where the [version] field is equal to the given value. (optional)
     * @param filterVersionNeq Filter the results where the [version] field is not equal to the given value. (optional)
     * @param filterVersionLike Filter the results where the [version] field is similar to the given case sensitive value. (optional)
     * @param filterVersionIlike Filter the results where the [version] field is similar to the given case insensitive value. (optional)
     * @param filterMessageHandler Filter the results where the [message.handler] field is equal to the given value. (optional)
     * @param filterMessageHandlerNeq Filter the results where the [message.handler] field is not equal to the given value. (optional)
     * @param filterMessageHandlerLike Filter the results where the [message.handler] field is similar to the given case sensitive value. (optional)
     * @param filterMessageHandlerIlike Filter the results where the [message.handler] field is similar to the given case insensitive value. (optional)
     * @param filterMessageVersion Filter the results where the [message.version] field is equal to the given value. (optional)
     * @param filterMessageVersionNeq Filter the results where the [message.version] field is not equal to the given value. (optional)
     * @param filterMessageVersionLike Filter the results where the [message.version] field is similar to the given case sensitive value. (optional)
     * @param filterMessageVersionIlike Filter the results where the [message.version] field is similar to the given case insensitive value. (optional)
     * @param filterMessageNetwork Filter the results where the [message.network] field is equal to the given value. (optional)
     * @param filterMessageNetworkNeq Filter the results where the [message.network] field is not equal to the given value. (optional)
     * @param filterMessageNetworkLike Filter the results where the [message.network] field is similar to the given case sensitive value. (optional)
     * @param filterMessageNetworkIlike Filter the results where the [message.network] field is similar to the given case insensitive value. (optional)
     * @param filterMessageContent Filter the results where the [message.content] field is equal to the given value. (optional)
     * @param filterMessageContentNeq Filter the results where the [message.content] field is not equal to the given value. (optional)
     * @param filterMessageContentLike Filter the results where the [message.content] field is similar to the given case sensitive value. (optional)
     * @param filterMessageContentIlike Filter the results where the [message.content] field is similar to the given case insensitive value. (optional)
     * @param include Include the given relationships. (optional)
     * @param sort Sort the results by the given field and direction. (optional)
     * @return RequestConfig
     */
    fun apiTransactionsGetRequestConfig(fieldsAccounts: ApiTransactionsGetFieldsAccountsParameter?, filterHash: kotlin.String?, filterHashNeq: kotlin.String?, filterHashLike: kotlin.String?, filterHashIlike: kotlin.String?, filterSender: kotlin.String?, filterSenderNeq: kotlin.String?, filterSenderLike: kotlin.String?, filterSenderIlike: kotlin.String?, filterRecipient: kotlin.String?, filterRecipientNeq: kotlin.String?, filterRecipientLike: kotlin.String?, filterRecipientIlike: kotlin.String?, filterGas: kotlin.Int?, filterNonce: kotlin.Int?, filterSignature: kotlin.String?, filterSignatureNeq: kotlin.String?, filterSignatureLike: kotlin.String?, filterSignatureIlike: kotlin.String?, filterVersion: kotlin.String?, filterVersionNeq: kotlin.String?, filterVersionLike: kotlin.String?, filterVersionIlike: kotlin.String?, filterMessageHandler: kotlin.String?, filterMessageHandlerNeq: kotlin.String?, filterMessageHandlerLike: kotlin.String?, filterMessageHandlerIlike: kotlin.String?, filterMessageVersion: kotlin.String?, filterMessageVersionNeq: kotlin.String?, filterMessageVersionLike: kotlin.String?, filterMessageVersionIlike: kotlin.String?, filterMessageNetwork: kotlin.String?, filterMessageNetworkNeq: kotlin.String?, filterMessageNetworkLike: kotlin.String?, filterMessageNetworkIlike: kotlin.String?, filterMessageContent: kotlin.String?, filterMessageContentNeq: kotlin.String?, filterMessageContentLike: kotlin.String?, filterMessageContentIlike: kotlin.String?, include: ApiTransactionsGetIncludeParameter?, sort: ApiTransactionsGetSortParameter?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (fieldsAccounts != null) {
                    put("fields[accounts]", listOf(fieldsAccounts.toString()))
                }
                if (filterHash != null) {
                    put("filter[hash]", listOf(filterHash.toString()))
                }
                if (filterHashNeq != null) {
                    put("filter[hash.neq]", listOf(filterHashNeq.toString()))
                }
                if (filterHashLike != null) {
                    put("filter[hash.like]", listOf(filterHashLike.toString()))
                }
                if (filterHashIlike != null) {
                    put("filter[hash.ilike]", listOf(filterHashIlike.toString()))
                }
                if (filterSender != null) {
                    put("filter[sender]", listOf(filterSender.toString()))
                }
                if (filterSenderNeq != null) {
                    put("filter[sender.neq]", listOf(filterSenderNeq.toString()))
                }
                if (filterSenderLike != null) {
                    put("filter[sender.like]", listOf(filterSenderLike.toString()))
                }
                if (filterSenderIlike != null) {
                    put("filter[sender.ilike]", listOf(filterSenderIlike.toString()))
                }
                if (filterRecipient != null) {
                    put("filter[recipient]", listOf(filterRecipient.toString()))
                }
                if (filterRecipientNeq != null) {
                    put("filter[recipient.neq]", listOf(filterRecipientNeq.toString()))
                }
                if (filterRecipientLike != null) {
                    put("filter[recipient.like]", listOf(filterRecipientLike.toString()))
                }
                if (filterRecipientIlike != null) {
                    put("filter[recipient.ilike]", listOf(filterRecipientIlike.toString()))
                }
                if (filterGas != null) {
                    put("filter[gas]", listOf(filterGas.toString()))
                }
                if (filterNonce != null) {
                    put("filter[nonce]", listOf(filterNonce.toString()))
                }
                if (filterSignature != null) {
                    put("filter[signature]", listOf(filterSignature.toString()))
                }
                if (filterSignatureNeq != null) {
                    put("filter[signature.neq]", listOf(filterSignatureNeq.toString()))
                }
                if (filterSignatureLike != null) {
                    put("filter[signature.like]", listOf(filterSignatureLike.toString()))
                }
                if (filterSignatureIlike != null) {
                    put("filter[signature.ilike]", listOf(filterSignatureIlike.toString()))
                }
                if (filterVersion != null) {
                    put("filter[version]", listOf(filterVersion.toString()))
                }
                if (filterVersionNeq != null) {
                    put("filter[version.neq]", listOf(filterVersionNeq.toString()))
                }
                if (filterVersionLike != null) {
                    put("filter[version.like]", listOf(filterVersionLike.toString()))
                }
                if (filterVersionIlike != null) {
                    put("filter[version.ilike]", listOf(filterVersionIlike.toString()))
                }
                if (filterMessageHandler != null) {
                    put("filter[message.handler]", listOf(filterMessageHandler.toString()))
                }
                if (filterMessageHandlerNeq != null) {
                    put("filter[message.handler.neq]", listOf(filterMessageHandlerNeq.toString()))
                }
                if (filterMessageHandlerLike != null) {
                    put("filter[message.handler.like]", listOf(filterMessageHandlerLike.toString()))
                }
                if (filterMessageHandlerIlike != null) {
                    put("filter[message.handler.ilike]", listOf(filterMessageHandlerIlike.toString()))
                }
                if (filterMessageVersion != null) {
                    put("filter[message.version]", listOf(filterMessageVersion.toString()))
                }
                if (filterMessageVersionNeq != null) {
                    put("filter[message.version.neq]", listOf(filterMessageVersionNeq.toString()))
                }
                if (filterMessageVersionLike != null) {
                    put("filter[message.version.like]", listOf(filterMessageVersionLike.toString()))
                }
                if (filterMessageVersionIlike != null) {
                    put("filter[message.version.ilike]", listOf(filterMessageVersionIlike.toString()))
                }
                if (filterMessageNetwork != null) {
                    put("filter[message.network]", listOf(filterMessageNetwork.toString()))
                }
                if (filterMessageNetworkNeq != null) {
                    put("filter[message.network.neq]", listOf(filterMessageNetworkNeq.toString()))
                }
                if (filterMessageNetworkLike != null) {
                    put("filter[message.network.like]", listOf(filterMessageNetworkLike.toString()))
                }
                if (filterMessageNetworkIlike != null) {
                    put("filter[message.network.ilike]", listOf(filterMessageNetworkIlike.toString()))
                }
                if (filterMessageContent != null) {
                    put("filter[message.content]", listOf(filterMessageContent.toString()))
                }
                if (filterMessageContentNeq != null) {
                    put("filter[message.content.neq]", listOf(filterMessageContentNeq.toString()))
                }
                if (filterMessageContentLike != null) {
                    put("filter[message.content.like]", listOf(filterMessageContentLike.toString()))
                }
                if (filterMessageContentIlike != null) {
                    put("filter[message.content.ilike]", listOf(filterMessageContentIlike.toString()))
                }
                if (include != null) {
                    put("include", listOf(include.toString()))
                }
                if (sort != null) {
                    put("sort", listOf(sort.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/transactions",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * List transaction metadata
     * 
     * @param fieldsTransactionMetadata Include the given fields in the response. (optional)
     * @param filterTransactionId Filter the results where the [transaction_id] field is equal to the given value. (optional)
     * @param filterKey Filter the results where the [key] field is equal to the given value. (optional)
     * @param filterKeyNeq Filter the results where the [key] field is not equal to the given value. (optional)
     * @param filterKeyLike Filter the results where the [key] field is similar to the given case sensitive value. (optional)
     * @param filterKeyIlike Filter the results where the [key] field is similar to the given case insensitive value. (optional)
     * @param filterValue Filter the results where the [value] field is equal to the given value. (optional)
     * @param filterValueNeq Filter the results where the [value] field is not equal to the given value. (optional)
     * @param filterValueLike Filter the results where the [value] field is similar to the given case sensitive value. (optional)
     * @param filterValueIlike Filter the results where the [value] field is similar to the given case insensitive value. (optional)
     * @param include Include the given relationships. (optional)
     * @param sort Sort the results by the given field and direction. (optional)
     * @return ApiTransactionsMetadataGet200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiTransactionsMetadataGet(fieldsTransactionMetadata: ApiTransactionsMetadataGetFieldsTransactionMetadataParameter? = null, filterTransactionId: kotlin.Int? = null, filterKey: kotlin.String? = null, filterKeyNeq: kotlin.String? = null, filterKeyLike: kotlin.String? = null, filterKeyIlike: kotlin.String? = null, filterValue: kotlin.String? = null, filterValueNeq: kotlin.String? = null, filterValueLike: kotlin.String? = null, filterValueIlike: kotlin.String? = null, include: ApiTransactionsMetadataGetIncludeParameter? = null, sort: ApiTransactionsMetadataGetSortParameter? = null) : ApiTransactionsMetadataGet200Response {
        val localVarResponse = apiTransactionsMetadataGetWithHttpInfo(fieldsTransactionMetadata = fieldsTransactionMetadata, filterTransactionId = filterTransactionId, filterKey = filterKey, filterKeyNeq = filterKeyNeq, filterKeyLike = filterKeyLike, filterKeyIlike = filterKeyIlike, filterValue = filterValue, filterValueNeq = filterValueNeq, filterValueLike = filterValueLike, filterValueIlike = filterValueIlike, include = include, sort = sort)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ApiTransactionsMetadataGet200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * List transaction metadata
     * 
     * @param fieldsTransactionMetadata Include the given fields in the response. (optional)
     * @param filterTransactionId Filter the results where the [transaction_id] field is equal to the given value. (optional)
     * @param filterKey Filter the results where the [key] field is equal to the given value. (optional)
     * @param filterKeyNeq Filter the results where the [key] field is not equal to the given value. (optional)
     * @param filterKeyLike Filter the results where the [key] field is similar to the given case sensitive value. (optional)
     * @param filterKeyIlike Filter the results where the [key] field is similar to the given case insensitive value. (optional)
     * @param filterValue Filter the results where the [value] field is equal to the given value. (optional)
     * @param filterValueNeq Filter the results where the [value] field is not equal to the given value. (optional)
     * @param filterValueLike Filter the results where the [value] field is similar to the given case sensitive value. (optional)
     * @param filterValueIlike Filter the results where the [value] field is similar to the given case insensitive value. (optional)
     * @param include Include the given relationships. (optional)
     * @param sort Sort the results by the given field and direction. (optional)
     * @return ApiResponse<ApiTransactionsMetadataGet200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiTransactionsMetadataGetWithHttpInfo(fieldsTransactionMetadata: ApiTransactionsMetadataGetFieldsTransactionMetadataParameter?, filterTransactionId: kotlin.Int?, filterKey: kotlin.String?, filterKeyNeq: kotlin.String?, filterKeyLike: kotlin.String?, filterKeyIlike: kotlin.String?, filterValue: kotlin.String?, filterValueNeq: kotlin.String?, filterValueLike: kotlin.String?, filterValueIlike: kotlin.String?, include: ApiTransactionsMetadataGetIncludeParameter?, sort: ApiTransactionsMetadataGetSortParameter?) : ApiResponse<ApiTransactionsMetadataGet200Response?> {
        val localVariableConfig = apiTransactionsMetadataGetRequestConfig(fieldsTransactionMetadata = fieldsTransactionMetadata, filterTransactionId = filterTransactionId, filterKey = filterKey, filterKeyNeq = filterKeyNeq, filterKeyLike = filterKeyLike, filterKeyIlike = filterKeyIlike, filterValue = filterValue, filterValueNeq = filterValueNeq, filterValueLike = filterValueLike, filterValueIlike = filterValueIlike, include = include, sort = sort)

        return request<Unit, ApiTransactionsMetadataGet200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiTransactionsMetadataGet
     *
     * @param fieldsTransactionMetadata Include the given fields in the response. (optional)
     * @param filterTransactionId Filter the results where the [transaction_id] field is equal to the given value. (optional)
     * @param filterKey Filter the results where the [key] field is equal to the given value. (optional)
     * @param filterKeyNeq Filter the results where the [key] field is not equal to the given value. (optional)
     * @param filterKeyLike Filter the results where the [key] field is similar to the given case sensitive value. (optional)
     * @param filterKeyIlike Filter the results where the [key] field is similar to the given case insensitive value. (optional)
     * @param filterValue Filter the results where the [value] field is equal to the given value. (optional)
     * @param filterValueNeq Filter the results where the [value] field is not equal to the given value. (optional)
     * @param filterValueLike Filter the results where the [value] field is similar to the given case sensitive value. (optional)
     * @param filterValueIlike Filter the results where the [value] field is similar to the given case insensitive value. (optional)
     * @param include Include the given relationships. (optional)
     * @param sort Sort the results by the given field and direction. (optional)
     * @return RequestConfig
     */
    fun apiTransactionsMetadataGetRequestConfig(fieldsTransactionMetadata: ApiTransactionsMetadataGetFieldsTransactionMetadataParameter?, filterTransactionId: kotlin.Int?, filterKey: kotlin.String?, filterKeyNeq: kotlin.String?, filterKeyLike: kotlin.String?, filterKeyIlike: kotlin.String?, filterValue: kotlin.String?, filterValueNeq: kotlin.String?, filterValueLike: kotlin.String?, filterValueIlike: kotlin.String?, include: ApiTransactionsMetadataGetIncludeParameter?, sort: ApiTransactionsMetadataGetSortParameter?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (fieldsTransactionMetadata != null) {
                    put("fields[transaction_metadata]", listOf(fieldsTransactionMetadata.toString()))
                }
                if (filterTransactionId != null) {
                    put("filter[transaction_id]", listOf(filterTransactionId.toString()))
                }
                if (filterKey != null) {
                    put("filter[key]", listOf(filterKey.toString()))
                }
                if (filterKeyNeq != null) {
                    put("filter[key.neq]", listOf(filterKeyNeq.toString()))
                }
                if (filterKeyLike != null) {
                    put("filter[key.like]", listOf(filterKeyLike.toString()))
                }
                if (filterKeyIlike != null) {
                    put("filter[key.ilike]", listOf(filterKeyIlike.toString()))
                }
                if (filterValue != null) {
                    put("filter[value]", listOf(filterValue.toString()))
                }
                if (filterValueNeq != null) {
                    put("filter[value.neq]", listOf(filterValueNeq.toString()))
                }
                if (filterValueLike != null) {
                    put("filter[value.like]", listOf(filterValueLike.toString()))
                }
                if (filterValueIlike != null) {
                    put("filter[value.ilike]", listOf(filterValueIlike.toString()))
                }
                if (include != null) {
                    put("include", listOf(include.toString()))
                }
                if (sort != null) {
                    put("sort", listOf(sort.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/transactions/metadata",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * List transaction receipts
     * 
     * @param fieldsTransactionReceipts Include the given fields in the response. (optional)
     * @param filterTransactionId Filter the results where the [transaction_id] field is equal to the given value. (optional)
     * @param filterBlockHash Filter the results where the [block_hash] field is equal to the given value. (optional)
     * @param filterBlockHashNeq Filter the results where the [block_hash] field is not equal to the given value. (optional)
     * @param filterBlockHashLike Filter the results where the [block_hash] field is similar to the given case sensitive value. (optional)
     * @param filterBlockHashIlike Filter the results where the [block_hash] field is similar to the given case insensitive value. (optional)
     * @param filterBlockNumber Filter the results where the [block_number] field is equal to the given value. (optional)
     * @param filterBlockNumberNeq Filter the results where the [block_number] field is not equal to the given value. (optional)
     * @param filterBlockNumberLike Filter the results where the [block_number] field is similar to the given case sensitive value. (optional)
     * @param filterBlockNumberIlike Filter the results where the [block_number] field is similar to the given case insensitive value. (optional)
     * @param include Include the given relationships. (optional)
     * @param sort Sort the results by the given field and direction. (optional)
     * @return ApiTransactionsReceiptsGet200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiTransactionsReceiptsGet(fieldsTransactionReceipts: ApiTransactionsReceiptsGetFieldsTransactionReceiptsParameter? = null, filterTransactionId: kotlin.Int? = null, filterBlockHash: kotlin.String? = null, filterBlockHashNeq: kotlin.String? = null, filterBlockHashLike: kotlin.String? = null, filterBlockHashIlike: kotlin.String? = null, filterBlockNumber: kotlin.String? = null, filterBlockNumberNeq: kotlin.String? = null, filterBlockNumberLike: kotlin.String? = null, filterBlockNumberIlike: kotlin.String? = null, include: ApiTransactionsMetadataGetIncludeParameter? = null, sort: ApiTransactionsReceiptsGetSortParameter? = null) : ApiTransactionsReceiptsGet200Response {
        val localVarResponse = apiTransactionsReceiptsGetWithHttpInfo(fieldsTransactionReceipts = fieldsTransactionReceipts, filterTransactionId = filterTransactionId, filterBlockHash = filterBlockHash, filterBlockHashNeq = filterBlockHashNeq, filterBlockHashLike = filterBlockHashLike, filterBlockHashIlike = filterBlockHashIlike, filterBlockNumber = filterBlockNumber, filterBlockNumberNeq = filterBlockNumberNeq, filterBlockNumberLike = filterBlockNumberLike, filterBlockNumberIlike = filterBlockNumberIlike, include = include, sort = sort)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ApiTransactionsReceiptsGet200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * List transaction receipts
     * 
     * @param fieldsTransactionReceipts Include the given fields in the response. (optional)
     * @param filterTransactionId Filter the results where the [transaction_id] field is equal to the given value. (optional)
     * @param filterBlockHash Filter the results where the [block_hash] field is equal to the given value. (optional)
     * @param filterBlockHashNeq Filter the results where the [block_hash] field is not equal to the given value. (optional)
     * @param filterBlockHashLike Filter the results where the [block_hash] field is similar to the given case sensitive value. (optional)
     * @param filterBlockHashIlike Filter the results where the [block_hash] field is similar to the given case insensitive value. (optional)
     * @param filterBlockNumber Filter the results where the [block_number] field is equal to the given value. (optional)
     * @param filterBlockNumberNeq Filter the results where the [block_number] field is not equal to the given value. (optional)
     * @param filterBlockNumberLike Filter the results where the [block_number] field is similar to the given case sensitive value. (optional)
     * @param filterBlockNumberIlike Filter the results where the [block_number] field is similar to the given case insensitive value. (optional)
     * @param include Include the given relationships. (optional)
     * @param sort Sort the results by the given field and direction. (optional)
     * @return ApiResponse<ApiTransactionsReceiptsGet200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiTransactionsReceiptsGetWithHttpInfo(fieldsTransactionReceipts: ApiTransactionsReceiptsGetFieldsTransactionReceiptsParameter?, filterTransactionId: kotlin.Int?, filterBlockHash: kotlin.String?, filterBlockHashNeq: kotlin.String?, filterBlockHashLike: kotlin.String?, filterBlockHashIlike: kotlin.String?, filterBlockNumber: kotlin.String?, filterBlockNumberNeq: kotlin.String?, filterBlockNumberLike: kotlin.String?, filterBlockNumberIlike: kotlin.String?, include: ApiTransactionsMetadataGetIncludeParameter?, sort: ApiTransactionsReceiptsGetSortParameter?) : ApiResponse<ApiTransactionsReceiptsGet200Response?> {
        val localVariableConfig = apiTransactionsReceiptsGetRequestConfig(fieldsTransactionReceipts = fieldsTransactionReceipts, filterTransactionId = filterTransactionId, filterBlockHash = filterBlockHash, filterBlockHashNeq = filterBlockHashNeq, filterBlockHashLike = filterBlockHashLike, filterBlockHashIlike = filterBlockHashIlike, filterBlockNumber = filterBlockNumber, filterBlockNumberNeq = filterBlockNumberNeq, filterBlockNumberLike = filterBlockNumberLike, filterBlockNumberIlike = filterBlockNumberIlike, include = include, sort = sort)

        return request<Unit, ApiTransactionsReceiptsGet200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiTransactionsReceiptsGet
     *
     * @param fieldsTransactionReceipts Include the given fields in the response. (optional)
     * @param filterTransactionId Filter the results where the [transaction_id] field is equal to the given value. (optional)
     * @param filterBlockHash Filter the results where the [block_hash] field is equal to the given value. (optional)
     * @param filterBlockHashNeq Filter the results where the [block_hash] field is not equal to the given value. (optional)
     * @param filterBlockHashLike Filter the results where the [block_hash] field is similar to the given case sensitive value. (optional)
     * @param filterBlockHashIlike Filter the results where the [block_hash] field is similar to the given case insensitive value. (optional)
     * @param filterBlockNumber Filter the results where the [block_number] field is equal to the given value. (optional)
     * @param filterBlockNumberNeq Filter the results where the [block_number] field is not equal to the given value. (optional)
     * @param filterBlockNumberLike Filter the results where the [block_number] field is similar to the given case sensitive value. (optional)
     * @param filterBlockNumberIlike Filter the results where the [block_number] field is similar to the given case insensitive value. (optional)
     * @param include Include the given relationships. (optional)
     * @param sort Sort the results by the given field and direction. (optional)
     * @return RequestConfig
     */
    fun apiTransactionsReceiptsGetRequestConfig(fieldsTransactionReceipts: ApiTransactionsReceiptsGetFieldsTransactionReceiptsParameter?, filterTransactionId: kotlin.Int?, filterBlockHash: kotlin.String?, filterBlockHashNeq: kotlin.String?, filterBlockHashLike: kotlin.String?, filterBlockHashIlike: kotlin.String?, filterBlockNumber: kotlin.String?, filterBlockNumberNeq: kotlin.String?, filterBlockNumberLike: kotlin.String?, filterBlockNumberIlike: kotlin.String?, include: ApiTransactionsMetadataGetIncludeParameter?, sort: ApiTransactionsReceiptsGetSortParameter?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (fieldsTransactionReceipts != null) {
                    put("fields[transaction_receipts]", listOf(fieldsTransactionReceipts.toString()))
                }
                if (filterTransactionId != null) {
                    put("filter[transaction_id]", listOf(filterTransactionId.toString()))
                }
                if (filterBlockHash != null) {
                    put("filter[block_hash]", listOf(filterBlockHash.toString()))
                }
                if (filterBlockHashNeq != null) {
                    put("filter[block_hash.neq]", listOf(filterBlockHashNeq.toString()))
                }
                if (filterBlockHashLike != null) {
                    put("filter[block_hash.like]", listOf(filterBlockHashLike.toString()))
                }
                if (filterBlockHashIlike != null) {
                    put("filter[block_hash.ilike]", listOf(filterBlockHashIlike.toString()))
                }
                if (filterBlockNumber != null) {
                    put("filter[block_number]", listOf(filterBlockNumber.toString()))
                }
                if (filterBlockNumberNeq != null) {
                    put("filter[block_number.neq]", listOf(filterBlockNumberNeq.toString()))
                }
                if (filterBlockNumberLike != null) {
                    put("filter[block_number.like]", listOf(filterBlockNumberLike.toString()))
                }
                if (filterBlockNumberIlike != null) {
                    put("filter[block_number.ilike]", listOf(filterBlockNumberIlike.toString()))
                }
                if (include != null) {
                    put("include", listOf(include.toString()))
                }
                if (sort != null) {
                    put("sort", listOf(sort.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/transactions/receipts",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * List validator updates
     * 
     * @param fieldsBlockNumber Include the given fields in the response. (optional)
     * @param filterBlockNumber Filter the results where the [block_number] field is equal to the given value. (optional)
     * @param include Include the given relationships. (optional)
     * @param sort Sort the results by the given field and direction. (optional)
     * @return ApiValidatorsUpdatesGet200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiValidatorsUpdatesGet(fieldsBlockNumber: ApiValidatorsUpdatesGetFieldsBlockNumberParameter? = null, filterBlockNumber: kotlin.Int? = null, include: ApiValidatorsUpdatesGetIncludeParameter? = null, sort: ApiValidatorsUpdatesGetSortParameter? = null) : ApiValidatorsUpdatesGet200Response {
        val localVarResponse = apiValidatorsUpdatesGetWithHttpInfo(fieldsBlockNumber = fieldsBlockNumber, filterBlockNumber = filterBlockNumber, include = include, sort = sort)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ApiValidatorsUpdatesGet200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * List validator updates
     * 
     * @param fieldsBlockNumber Include the given fields in the response. (optional)
     * @param filterBlockNumber Filter the results where the [block_number] field is equal to the given value. (optional)
     * @param include Include the given relationships. (optional)
     * @param sort Sort the results by the given field and direction. (optional)
     * @return ApiResponse<ApiValidatorsUpdatesGet200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiValidatorsUpdatesGetWithHttpInfo(fieldsBlockNumber: ApiValidatorsUpdatesGetFieldsBlockNumberParameter?, filterBlockNumber: kotlin.Int?, include: ApiValidatorsUpdatesGetIncludeParameter?, sort: ApiValidatorsUpdatesGetSortParameter?) : ApiResponse<ApiValidatorsUpdatesGet200Response?> {
        val localVariableConfig = apiValidatorsUpdatesGetRequestConfig(fieldsBlockNumber = fieldsBlockNumber, filterBlockNumber = filterBlockNumber, include = include, sort = sort)

        return request<Unit, ApiValidatorsUpdatesGet200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiValidatorsUpdatesGet
     *
     * @param fieldsBlockNumber Include the given fields in the response. (optional)
     * @param filterBlockNumber Filter the results where the [block_number] field is equal to the given value. (optional)
     * @param include Include the given relationships. (optional)
     * @param sort Sort the results by the given field and direction. (optional)
     * @return RequestConfig
     */
    fun apiValidatorsUpdatesGetRequestConfig(fieldsBlockNumber: ApiValidatorsUpdatesGetFieldsBlockNumberParameter?, filterBlockNumber: kotlin.Int?, include: ApiValidatorsUpdatesGetIncludeParameter?, sort: ApiValidatorsUpdatesGetSortParameter?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (fieldsBlockNumber != null) {
                    put("fields[block_number]", listOf(fieldsBlockNumber.toString()))
                }
                if (filterBlockNumber != null) {
                    put("filter[block_number]", listOf(filterBlockNumber.toString()))
                }
                if (include != null) {
                    put("include", listOf(include.toString()))
                }
                if (sort != null) {
                    put("sort", listOf(sort.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/validators/updates",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
