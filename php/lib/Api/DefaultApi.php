<?php
/**
 * DefaultApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Railway
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * DefaultApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DefaultApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation apiAccountsGet
     *
     * List accounts
     *
     * @param  ApiAccountsGetFieldsAccountsParameter $fields_accounts Include the given fields in the response. (optional)
     * @param  string $filter_address Filter the results where the [address] field is equal to the given value. (optional)
     * @param  string $filter_address_neq Filter the results where the [address] field is not equal to the given value. (optional)
     * @param  string $filter_address_like Filter the results where the [address] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_address_ilike Filter the results where the [address] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_public_key Filter the results where the [public_key] field is equal to the given value. (optional)
     * @param  string $filter_public_key_neq Filter the results where the [public_key] field is not equal to the given value. (optional)
     * @param  string $filter_public_key_like Filter the results where the [public_key] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_public_key_ilike Filter the results where the [public_key] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_name Filter the results where the [name] field is equal to the given value. (optional)
     * @param  string $filter_name_neq Filter the results where the [name] field is not equal to the given value. (optional)
     * @param  string $filter_name_like Filter the results where the [name] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_name_ilike Filter the results where the [name] field is similar to the given case insensitive value. (optional)
     * @param  int $filter_nonce Filter the results where the [nonce] field is equal to the given value. (optional)
     * @param  string $filter_validator_address Filter the results where the [validator.address] field is equal to the given value. (optional)
     * @param  string $filter_validator_address_neq Filter the results where the [validator.address] field is not equal to the given value. (optional)
     * @param  string $filter_validator_address_like Filter the results where the [validator.address] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_validator_address_ilike Filter the results where the [validator.address] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_validator_public_key Filter the results where the [validator.publicKey] field is equal to the given value. (optional)
     * @param  string $filter_validator_public_key_neq Filter the results where the [validator.publicKey] field is not equal to the given value. (optional)
     * @param  string $filter_validator_public_key_like Filter the results where the [validator.publicKey] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_validator_public_key_ilike Filter the results where the [validator.publicKey] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_validator_power Filter the results where the [validator.power] field is equal to the given value. (optional)
     * @param  string $filter_validator_power_neq Filter the results where the [validator.power] field is not equal to the given value. (optional)
     * @param  string $filter_validator_power_like Filter the results where the [validator.power] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_validator_power_ilike Filter the results where the [validator.power] field is similar to the given case insensitive value. (optional)
     * @param  ApiAccountsGetIncludeParameter $include Include the given relationships. (optional)
     * @param  ApiAccountsGetSortParameter $sort Sort the results by the given field and direction. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ApiAccountsGet200Response
     */
    public function apiAccountsGet($fields_accounts = null, $filter_address = null, $filter_address_neq = null, $filter_address_like = null, $filter_address_ilike = null, $filter_public_key = null, $filter_public_key_neq = null, $filter_public_key_like = null, $filter_public_key_ilike = null, $filter_name = null, $filter_name_neq = null, $filter_name_like = null, $filter_name_ilike = null, $filter_nonce = null, $filter_validator_address = null, $filter_validator_address_neq = null, $filter_validator_address_like = null, $filter_validator_address_ilike = null, $filter_validator_public_key = null, $filter_validator_public_key_neq = null, $filter_validator_public_key_like = null, $filter_validator_public_key_ilike = null, $filter_validator_power = null, $filter_validator_power_neq = null, $filter_validator_power_like = null, $filter_validator_power_ilike = null, $include = null, $sort = null)
    {
        list($response) = $this->apiAccountsGetWithHttpInfo($fields_accounts, $filter_address, $filter_address_neq, $filter_address_like, $filter_address_ilike, $filter_public_key, $filter_public_key_neq, $filter_public_key_like, $filter_public_key_ilike, $filter_name, $filter_name_neq, $filter_name_like, $filter_name_ilike, $filter_nonce, $filter_validator_address, $filter_validator_address_neq, $filter_validator_address_like, $filter_validator_address_ilike, $filter_validator_public_key, $filter_validator_public_key_neq, $filter_validator_public_key_like, $filter_validator_public_key_ilike, $filter_validator_power, $filter_validator_power_neq, $filter_validator_power_like, $filter_validator_power_ilike, $include, $sort);
        return $response;
    }

    /**
     * Operation apiAccountsGetWithHttpInfo
     *
     * List accounts
     *
     * @param  ApiAccountsGetFieldsAccountsParameter $fields_accounts Include the given fields in the response. (optional)
     * @param  string $filter_address Filter the results where the [address] field is equal to the given value. (optional)
     * @param  string $filter_address_neq Filter the results where the [address] field is not equal to the given value. (optional)
     * @param  string $filter_address_like Filter the results where the [address] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_address_ilike Filter the results where the [address] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_public_key Filter the results where the [public_key] field is equal to the given value. (optional)
     * @param  string $filter_public_key_neq Filter the results where the [public_key] field is not equal to the given value. (optional)
     * @param  string $filter_public_key_like Filter the results where the [public_key] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_public_key_ilike Filter the results where the [public_key] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_name Filter the results where the [name] field is equal to the given value. (optional)
     * @param  string $filter_name_neq Filter the results where the [name] field is not equal to the given value. (optional)
     * @param  string $filter_name_like Filter the results where the [name] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_name_ilike Filter the results where the [name] field is similar to the given case insensitive value. (optional)
     * @param  int $filter_nonce Filter the results where the [nonce] field is equal to the given value. (optional)
     * @param  string $filter_validator_address Filter the results where the [validator.address] field is equal to the given value. (optional)
     * @param  string $filter_validator_address_neq Filter the results where the [validator.address] field is not equal to the given value. (optional)
     * @param  string $filter_validator_address_like Filter the results where the [validator.address] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_validator_address_ilike Filter the results where the [validator.address] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_validator_public_key Filter the results where the [validator.publicKey] field is equal to the given value. (optional)
     * @param  string $filter_validator_public_key_neq Filter the results where the [validator.publicKey] field is not equal to the given value. (optional)
     * @param  string $filter_validator_public_key_like Filter the results where the [validator.publicKey] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_validator_public_key_ilike Filter the results where the [validator.publicKey] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_validator_power Filter the results where the [validator.power] field is equal to the given value. (optional)
     * @param  string $filter_validator_power_neq Filter the results where the [validator.power] field is not equal to the given value. (optional)
     * @param  string $filter_validator_power_like Filter the results where the [validator.power] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_validator_power_ilike Filter the results where the [validator.power] field is similar to the given case insensitive value. (optional)
     * @param  ApiAccountsGetIncludeParameter $include Include the given relationships. (optional)
     * @param  ApiAccountsGetSortParameter $sort Sort the results by the given field and direction. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ApiAccountsGet200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiAccountsGetWithHttpInfo($fields_accounts = null, $filter_address = null, $filter_address_neq = null, $filter_address_like = null, $filter_address_ilike = null, $filter_public_key = null, $filter_public_key_neq = null, $filter_public_key_like = null, $filter_public_key_ilike = null, $filter_name = null, $filter_name_neq = null, $filter_name_like = null, $filter_name_ilike = null, $filter_nonce = null, $filter_validator_address = null, $filter_validator_address_neq = null, $filter_validator_address_like = null, $filter_validator_address_ilike = null, $filter_validator_public_key = null, $filter_validator_public_key_neq = null, $filter_validator_public_key_like = null, $filter_validator_public_key_ilike = null, $filter_validator_power = null, $filter_validator_power_neq = null, $filter_validator_power_like = null, $filter_validator_power_ilike = null, $include = null, $sort = null)
    {
        $request = $this->apiAccountsGetRequest($fields_accounts, $filter_address, $filter_address_neq, $filter_address_like, $filter_address_ilike, $filter_public_key, $filter_public_key_neq, $filter_public_key_like, $filter_public_key_ilike, $filter_name, $filter_name_neq, $filter_name_like, $filter_name_ilike, $filter_nonce, $filter_validator_address, $filter_validator_address_neq, $filter_validator_address_like, $filter_validator_address_ilike, $filter_validator_public_key, $filter_validator_public_key_neq, $filter_validator_public_key_like, $filter_validator_public_key_ilike, $filter_validator_power, $filter_validator_power_neq, $filter_validator_power_like, $filter_validator_power_ilike, $include, $sort);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
            
                case 200:
                    if ('\OpenAPI\Client\Model\ApiAccountsGet200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ApiAccountsGet200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ApiAccountsGet200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            }

            $returnType = '\OpenAPI\Client\Model\ApiAccountsGet200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ApiAccountsGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            }
            throw $e;
        }
    }

    /**
     * Operation apiAccountsGetAsync
     *
     * List accounts
     *
     * @param  ApiAccountsGetFieldsAccountsParameter $fields_accounts Include the given fields in the response. (optional)
     * @param  string $filter_address Filter the results where the [address] field is equal to the given value. (optional)
     * @param  string $filter_address_neq Filter the results where the [address] field is not equal to the given value. (optional)
     * @param  string $filter_address_like Filter the results where the [address] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_address_ilike Filter the results where the [address] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_public_key Filter the results where the [public_key] field is equal to the given value. (optional)
     * @param  string $filter_public_key_neq Filter the results where the [public_key] field is not equal to the given value. (optional)
     * @param  string $filter_public_key_like Filter the results where the [public_key] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_public_key_ilike Filter the results where the [public_key] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_name Filter the results where the [name] field is equal to the given value. (optional)
     * @param  string $filter_name_neq Filter the results where the [name] field is not equal to the given value. (optional)
     * @param  string $filter_name_like Filter the results where the [name] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_name_ilike Filter the results where the [name] field is similar to the given case insensitive value. (optional)
     * @param  int $filter_nonce Filter the results where the [nonce] field is equal to the given value. (optional)
     * @param  string $filter_validator_address Filter the results where the [validator.address] field is equal to the given value. (optional)
     * @param  string $filter_validator_address_neq Filter the results where the [validator.address] field is not equal to the given value. (optional)
     * @param  string $filter_validator_address_like Filter the results where the [validator.address] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_validator_address_ilike Filter the results where the [validator.address] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_validator_public_key Filter the results where the [validator.publicKey] field is equal to the given value. (optional)
     * @param  string $filter_validator_public_key_neq Filter the results where the [validator.publicKey] field is not equal to the given value. (optional)
     * @param  string $filter_validator_public_key_like Filter the results where the [validator.publicKey] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_validator_public_key_ilike Filter the results where the [validator.publicKey] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_validator_power Filter the results where the [validator.power] field is equal to the given value. (optional)
     * @param  string $filter_validator_power_neq Filter the results where the [validator.power] field is not equal to the given value. (optional)
     * @param  string $filter_validator_power_like Filter the results where the [validator.power] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_validator_power_ilike Filter the results where the [validator.power] field is similar to the given case insensitive value. (optional)
     * @param  ApiAccountsGetIncludeParameter $include Include the given relationships. (optional)
     * @param  ApiAccountsGetSortParameter $sort Sort the results by the given field and direction. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiAccountsGetAsync($fields_accounts = null, $filter_address = null, $filter_address_neq = null, $filter_address_like = null, $filter_address_ilike = null, $filter_public_key = null, $filter_public_key_neq = null, $filter_public_key_like = null, $filter_public_key_ilike = null, $filter_name = null, $filter_name_neq = null, $filter_name_like = null, $filter_name_ilike = null, $filter_nonce = null, $filter_validator_address = null, $filter_validator_address_neq = null, $filter_validator_address_like = null, $filter_validator_address_ilike = null, $filter_validator_public_key = null, $filter_validator_public_key_neq = null, $filter_validator_public_key_like = null, $filter_validator_public_key_ilike = null, $filter_validator_power = null, $filter_validator_power_neq = null, $filter_validator_power_like = null, $filter_validator_power_ilike = null, $include = null, $sort = null)
    {
        return $this->apiAccountsGetAsyncWithHttpInfo($fields_accounts, $filter_address, $filter_address_neq, $filter_address_like, $filter_address_ilike, $filter_public_key, $filter_public_key_neq, $filter_public_key_like, $filter_public_key_ilike, $filter_name, $filter_name_neq, $filter_name_like, $filter_name_ilike, $filter_nonce, $filter_validator_address, $filter_validator_address_neq, $filter_validator_address_like, $filter_validator_address_ilike, $filter_validator_public_key, $filter_validator_public_key_neq, $filter_validator_public_key_like, $filter_validator_public_key_ilike, $filter_validator_power, $filter_validator_power_neq, $filter_validator_power_like, $filter_validator_power_ilike, $include, $sort)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiAccountsGetAsyncWithHttpInfo
     *
     * List accounts
     *
     * @param  ApiAccountsGetFieldsAccountsParameter $fields_accounts Include the given fields in the response. (optional)
     * @param  string $filter_address Filter the results where the [address] field is equal to the given value. (optional)
     * @param  string $filter_address_neq Filter the results where the [address] field is not equal to the given value. (optional)
     * @param  string $filter_address_like Filter the results where the [address] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_address_ilike Filter the results where the [address] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_public_key Filter the results where the [public_key] field is equal to the given value. (optional)
     * @param  string $filter_public_key_neq Filter the results where the [public_key] field is not equal to the given value. (optional)
     * @param  string $filter_public_key_like Filter the results where the [public_key] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_public_key_ilike Filter the results where the [public_key] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_name Filter the results where the [name] field is equal to the given value. (optional)
     * @param  string $filter_name_neq Filter the results where the [name] field is not equal to the given value. (optional)
     * @param  string $filter_name_like Filter the results where the [name] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_name_ilike Filter the results where the [name] field is similar to the given case insensitive value. (optional)
     * @param  int $filter_nonce Filter the results where the [nonce] field is equal to the given value. (optional)
     * @param  string $filter_validator_address Filter the results where the [validator.address] field is equal to the given value. (optional)
     * @param  string $filter_validator_address_neq Filter the results where the [validator.address] field is not equal to the given value. (optional)
     * @param  string $filter_validator_address_like Filter the results where the [validator.address] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_validator_address_ilike Filter the results where the [validator.address] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_validator_public_key Filter the results where the [validator.publicKey] field is equal to the given value. (optional)
     * @param  string $filter_validator_public_key_neq Filter the results where the [validator.publicKey] field is not equal to the given value. (optional)
     * @param  string $filter_validator_public_key_like Filter the results where the [validator.publicKey] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_validator_public_key_ilike Filter the results where the [validator.publicKey] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_validator_power Filter the results where the [validator.power] field is equal to the given value. (optional)
     * @param  string $filter_validator_power_neq Filter the results where the [validator.power] field is not equal to the given value. (optional)
     * @param  string $filter_validator_power_like Filter the results where the [validator.power] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_validator_power_ilike Filter the results where the [validator.power] field is similar to the given case insensitive value. (optional)
     * @param  ApiAccountsGetIncludeParameter $include Include the given relationships. (optional)
     * @param  ApiAccountsGetSortParameter $sort Sort the results by the given field and direction. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiAccountsGetAsyncWithHttpInfo($fields_accounts = null, $filter_address = null, $filter_address_neq = null, $filter_address_like = null, $filter_address_ilike = null, $filter_public_key = null, $filter_public_key_neq = null, $filter_public_key_like = null, $filter_public_key_ilike = null, $filter_name = null, $filter_name_neq = null, $filter_name_like = null, $filter_name_ilike = null, $filter_nonce = null, $filter_validator_address = null, $filter_validator_address_neq = null, $filter_validator_address_like = null, $filter_validator_address_ilike = null, $filter_validator_public_key = null, $filter_validator_public_key_neq = null, $filter_validator_public_key_like = null, $filter_validator_public_key_ilike = null, $filter_validator_power = null, $filter_validator_power_neq = null, $filter_validator_power_like = null, $filter_validator_power_ilike = null, $include = null, $sort = null)
    {
        $returnType = '\OpenAPI\Client\Model\ApiAccountsGet200Response';
        $request = $this->apiAccountsGetRequest($fields_accounts, $filter_address, $filter_address_neq, $filter_address_like, $filter_address_ilike, $filter_public_key, $filter_public_key_neq, $filter_public_key_like, $filter_public_key_ilike, $filter_name, $filter_name_neq, $filter_name_like, $filter_name_ilike, $filter_nonce, $filter_validator_address, $filter_validator_address_neq, $filter_validator_address_like, $filter_validator_address_ilike, $filter_validator_public_key, $filter_validator_public_key_neq, $filter_validator_public_key_like, $filter_validator_public_key_ilike, $filter_validator_power, $filter_validator_power_neq, $filter_validator_power_like, $filter_validator_power_ilike, $include, $sort);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiAccountsGet'
     *
     * @param  ApiAccountsGetFieldsAccountsParameter $fields_accounts Include the given fields in the response. (optional)
     * @param  string $filter_address Filter the results where the [address] field is equal to the given value. (optional)
     * @param  string $filter_address_neq Filter the results where the [address] field is not equal to the given value. (optional)
     * @param  string $filter_address_like Filter the results where the [address] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_address_ilike Filter the results where the [address] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_public_key Filter the results where the [public_key] field is equal to the given value. (optional)
     * @param  string $filter_public_key_neq Filter the results where the [public_key] field is not equal to the given value. (optional)
     * @param  string $filter_public_key_like Filter the results where the [public_key] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_public_key_ilike Filter the results where the [public_key] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_name Filter the results where the [name] field is equal to the given value. (optional)
     * @param  string $filter_name_neq Filter the results where the [name] field is not equal to the given value. (optional)
     * @param  string $filter_name_like Filter the results where the [name] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_name_ilike Filter the results where the [name] field is similar to the given case insensitive value. (optional)
     * @param  int $filter_nonce Filter the results where the [nonce] field is equal to the given value. (optional)
     * @param  string $filter_validator_address Filter the results where the [validator.address] field is equal to the given value. (optional)
     * @param  string $filter_validator_address_neq Filter the results where the [validator.address] field is not equal to the given value. (optional)
     * @param  string $filter_validator_address_like Filter the results where the [validator.address] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_validator_address_ilike Filter the results where the [validator.address] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_validator_public_key Filter the results where the [validator.publicKey] field is equal to the given value. (optional)
     * @param  string $filter_validator_public_key_neq Filter the results where the [validator.publicKey] field is not equal to the given value. (optional)
     * @param  string $filter_validator_public_key_like Filter the results where the [validator.publicKey] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_validator_public_key_ilike Filter the results where the [validator.publicKey] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_validator_power Filter the results where the [validator.power] field is equal to the given value. (optional)
     * @param  string $filter_validator_power_neq Filter the results where the [validator.power] field is not equal to the given value. (optional)
     * @param  string $filter_validator_power_like Filter the results where the [validator.power] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_validator_power_ilike Filter the results where the [validator.power] field is similar to the given case insensitive value. (optional)
     * @param  ApiAccountsGetIncludeParameter $include Include the given relationships. (optional)
     * @param  ApiAccountsGetSortParameter $sort Sort the results by the given field and direction. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiAccountsGetRequest($fields_accounts = null, $filter_address = null, $filter_address_neq = null, $filter_address_like = null, $filter_address_ilike = null, $filter_public_key = null, $filter_public_key_neq = null, $filter_public_key_like = null, $filter_public_key_ilike = null, $filter_name = null, $filter_name_neq = null, $filter_name_like = null, $filter_name_ilike = null, $filter_nonce = null, $filter_validator_address = null, $filter_validator_address_neq = null, $filter_validator_address_like = null, $filter_validator_address_ilike = null, $filter_validator_public_key = null, $filter_validator_public_key_neq = null, $filter_validator_public_key_like = null, $filter_validator_public_key_ilike = null, $filter_validator_power = null, $filter_validator_power_neq = null, $filter_validator_power_like = null, $filter_validator_power_ilike = null, $include = null, $sort = null)
    {





























        $resourcePath = '/api/accounts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fields_accounts,
            'fields[accounts]', // param base name
            'AnyOfStringStringStringStringStringStringStringStringString', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_address,
            'filter[address]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_address_neq,
            'filter[address.neq]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_address_like,
            'filter[address.like]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_address_ilike,
            'filter[address.ilike]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_public_key,
            'filter[public_key]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_public_key_neq,
            'filter[public_key.neq]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_public_key_like,
            'filter[public_key.like]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_public_key_ilike,
            'filter[public_key.ilike]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_name,
            'filter[name]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_name_neq,
            'filter[name.neq]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_name_like,
            'filter[name.like]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_name_ilike,
            'filter[name.ilike]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_nonce,
            'filter[nonce]', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_validator_address,
            'filter[validator.address]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_validator_address_neq,
            'filter[validator.address.neq]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_validator_address_like,
            'filter[validator.address.like]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_validator_address_ilike,
            'filter[validator.address.ilike]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_validator_public_key,
            'filter[validator.publicKey]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_validator_public_key_neq,
            'filter[validator.publicKey.neq]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_validator_public_key_like,
            'filter[validator.publicKey.like]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_validator_public_key_ilike,
            'filter[validator.publicKey.ilike]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_validator_power,
            'filter[validator.power]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_validator_power_neq,
            'filter[validator.power.neq]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_validator_power_like,
            'filter[validator.power.like]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_validator_power_ilike,
            'filter[validator.power.ilike]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include,
            'include', // param base name
            'AnyOfString', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'AnyOfStringStringStringStringStringString', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiAccountsMetadataGet
     *
     * List account metadata
     *
     * @param  ApiAccountsMetadataGetFieldsAccountsMetadataParameter $fields_accounts_metadata Include the given fields in the response. (optional)
     * @param  int $filter_account_id Filter the results where the [account_id] field is equal to the given value. (optional)
     * @param  string $filter_module Filter the results where the [module] field is equal to the given value. (optional)
     * @param  string $filter_module_neq Filter the results where the [module] field is not equal to the given value. (optional)
     * @param  string $filter_module_like Filter the results where the [module] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_module_ilike Filter the results where the [module] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_key Filter the results where the [key] field is equal to the given value. (optional)
     * @param  string $filter_key_neq Filter the results where the [key] field is not equal to the given value. (optional)
     * @param  string $filter_key_like Filter the results where the [key] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_key_ilike Filter the results where the [key] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_value Filter the results where the [value] field is equal to the given value. (optional)
     * @param  string $filter_value_neq Filter the results where the [value] field is not equal to the given value. (optional)
     * @param  string $filter_value_like Filter the results where the [value] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_value_ilike Filter the results where the [value] field is similar to the given case insensitive value. (optional)
     * @param  ApiAccountsMetadataGetIncludeParameter $include Include the given relationships. (optional)
     * @param  ApiAccountsMetadataGetSortParameter $sort Sort the results by the given field and direction. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ApiAccountsMetadataGet200Response
     */
    public function apiAccountsMetadataGet($fields_accounts_metadata = null, $filter_account_id = null, $filter_module = null, $filter_module_neq = null, $filter_module_like = null, $filter_module_ilike = null, $filter_key = null, $filter_key_neq = null, $filter_key_like = null, $filter_key_ilike = null, $filter_value = null, $filter_value_neq = null, $filter_value_like = null, $filter_value_ilike = null, $include = null, $sort = null)
    {
        list($response) = $this->apiAccountsMetadataGetWithHttpInfo($fields_accounts_metadata, $filter_account_id, $filter_module, $filter_module_neq, $filter_module_like, $filter_module_ilike, $filter_key, $filter_key_neq, $filter_key_like, $filter_key_ilike, $filter_value, $filter_value_neq, $filter_value_like, $filter_value_ilike, $include, $sort);
        return $response;
    }

    /**
     * Operation apiAccountsMetadataGetWithHttpInfo
     *
     * List account metadata
     *
     * @param  ApiAccountsMetadataGetFieldsAccountsMetadataParameter $fields_accounts_metadata Include the given fields in the response. (optional)
     * @param  int $filter_account_id Filter the results where the [account_id] field is equal to the given value. (optional)
     * @param  string $filter_module Filter the results where the [module] field is equal to the given value. (optional)
     * @param  string $filter_module_neq Filter the results where the [module] field is not equal to the given value. (optional)
     * @param  string $filter_module_like Filter the results where the [module] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_module_ilike Filter the results where the [module] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_key Filter the results where the [key] field is equal to the given value. (optional)
     * @param  string $filter_key_neq Filter the results where the [key] field is not equal to the given value. (optional)
     * @param  string $filter_key_like Filter the results where the [key] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_key_ilike Filter the results where the [key] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_value Filter the results where the [value] field is equal to the given value. (optional)
     * @param  string $filter_value_neq Filter the results where the [value] field is not equal to the given value. (optional)
     * @param  string $filter_value_like Filter the results where the [value] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_value_ilike Filter the results where the [value] field is similar to the given case insensitive value. (optional)
     * @param  ApiAccountsMetadataGetIncludeParameter $include Include the given relationships. (optional)
     * @param  ApiAccountsMetadataGetSortParameter $sort Sort the results by the given field and direction. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ApiAccountsMetadataGet200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiAccountsMetadataGetWithHttpInfo($fields_accounts_metadata = null, $filter_account_id = null, $filter_module = null, $filter_module_neq = null, $filter_module_like = null, $filter_module_ilike = null, $filter_key = null, $filter_key_neq = null, $filter_key_like = null, $filter_key_ilike = null, $filter_value = null, $filter_value_neq = null, $filter_value_like = null, $filter_value_ilike = null, $include = null, $sort = null)
    {
        $request = $this->apiAccountsMetadataGetRequest($fields_accounts_metadata, $filter_account_id, $filter_module, $filter_module_neq, $filter_module_like, $filter_module_ilike, $filter_key, $filter_key_neq, $filter_key_like, $filter_key_ilike, $filter_value, $filter_value_neq, $filter_value_like, $filter_value_ilike, $include, $sort);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
            
                case 200:
                    if ('\OpenAPI\Client\Model\ApiAccountsMetadataGet200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ApiAccountsMetadataGet200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ApiAccountsMetadataGet200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            }

            $returnType = '\OpenAPI\Client\Model\ApiAccountsMetadataGet200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ApiAccountsMetadataGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            }
            throw $e;
        }
    }

    /**
     * Operation apiAccountsMetadataGetAsync
     *
     * List account metadata
     *
     * @param  ApiAccountsMetadataGetFieldsAccountsMetadataParameter $fields_accounts_metadata Include the given fields in the response. (optional)
     * @param  int $filter_account_id Filter the results where the [account_id] field is equal to the given value. (optional)
     * @param  string $filter_module Filter the results where the [module] field is equal to the given value. (optional)
     * @param  string $filter_module_neq Filter the results where the [module] field is not equal to the given value. (optional)
     * @param  string $filter_module_like Filter the results where the [module] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_module_ilike Filter the results where the [module] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_key Filter the results where the [key] field is equal to the given value. (optional)
     * @param  string $filter_key_neq Filter the results where the [key] field is not equal to the given value. (optional)
     * @param  string $filter_key_like Filter the results where the [key] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_key_ilike Filter the results where the [key] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_value Filter the results where the [value] field is equal to the given value. (optional)
     * @param  string $filter_value_neq Filter the results where the [value] field is not equal to the given value. (optional)
     * @param  string $filter_value_like Filter the results where the [value] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_value_ilike Filter the results where the [value] field is similar to the given case insensitive value. (optional)
     * @param  ApiAccountsMetadataGetIncludeParameter $include Include the given relationships. (optional)
     * @param  ApiAccountsMetadataGetSortParameter $sort Sort the results by the given field and direction. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiAccountsMetadataGetAsync($fields_accounts_metadata = null, $filter_account_id = null, $filter_module = null, $filter_module_neq = null, $filter_module_like = null, $filter_module_ilike = null, $filter_key = null, $filter_key_neq = null, $filter_key_like = null, $filter_key_ilike = null, $filter_value = null, $filter_value_neq = null, $filter_value_like = null, $filter_value_ilike = null, $include = null, $sort = null)
    {
        return $this->apiAccountsMetadataGetAsyncWithHttpInfo($fields_accounts_metadata, $filter_account_id, $filter_module, $filter_module_neq, $filter_module_like, $filter_module_ilike, $filter_key, $filter_key_neq, $filter_key_like, $filter_key_ilike, $filter_value, $filter_value_neq, $filter_value_like, $filter_value_ilike, $include, $sort)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiAccountsMetadataGetAsyncWithHttpInfo
     *
     * List account metadata
     *
     * @param  ApiAccountsMetadataGetFieldsAccountsMetadataParameter $fields_accounts_metadata Include the given fields in the response. (optional)
     * @param  int $filter_account_id Filter the results where the [account_id] field is equal to the given value. (optional)
     * @param  string $filter_module Filter the results where the [module] field is equal to the given value. (optional)
     * @param  string $filter_module_neq Filter the results where the [module] field is not equal to the given value. (optional)
     * @param  string $filter_module_like Filter the results where the [module] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_module_ilike Filter the results where the [module] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_key Filter the results where the [key] field is equal to the given value. (optional)
     * @param  string $filter_key_neq Filter the results where the [key] field is not equal to the given value. (optional)
     * @param  string $filter_key_like Filter the results where the [key] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_key_ilike Filter the results where the [key] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_value Filter the results where the [value] field is equal to the given value. (optional)
     * @param  string $filter_value_neq Filter the results where the [value] field is not equal to the given value. (optional)
     * @param  string $filter_value_like Filter the results where the [value] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_value_ilike Filter the results where the [value] field is similar to the given case insensitive value. (optional)
     * @param  ApiAccountsMetadataGetIncludeParameter $include Include the given relationships. (optional)
     * @param  ApiAccountsMetadataGetSortParameter $sort Sort the results by the given field and direction. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiAccountsMetadataGetAsyncWithHttpInfo($fields_accounts_metadata = null, $filter_account_id = null, $filter_module = null, $filter_module_neq = null, $filter_module_like = null, $filter_module_ilike = null, $filter_key = null, $filter_key_neq = null, $filter_key_like = null, $filter_key_ilike = null, $filter_value = null, $filter_value_neq = null, $filter_value_like = null, $filter_value_ilike = null, $include = null, $sort = null)
    {
        $returnType = '\OpenAPI\Client\Model\ApiAccountsMetadataGet200Response';
        $request = $this->apiAccountsMetadataGetRequest($fields_accounts_metadata, $filter_account_id, $filter_module, $filter_module_neq, $filter_module_like, $filter_module_ilike, $filter_key, $filter_key_neq, $filter_key_like, $filter_key_ilike, $filter_value, $filter_value_neq, $filter_value_like, $filter_value_ilike, $include, $sort);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiAccountsMetadataGet'
     *
     * @param  ApiAccountsMetadataGetFieldsAccountsMetadataParameter $fields_accounts_metadata Include the given fields in the response. (optional)
     * @param  int $filter_account_id Filter the results where the [account_id] field is equal to the given value. (optional)
     * @param  string $filter_module Filter the results where the [module] field is equal to the given value. (optional)
     * @param  string $filter_module_neq Filter the results where the [module] field is not equal to the given value. (optional)
     * @param  string $filter_module_like Filter the results where the [module] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_module_ilike Filter the results where the [module] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_key Filter the results where the [key] field is equal to the given value. (optional)
     * @param  string $filter_key_neq Filter the results where the [key] field is not equal to the given value. (optional)
     * @param  string $filter_key_like Filter the results where the [key] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_key_ilike Filter the results where the [key] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_value Filter the results where the [value] field is equal to the given value. (optional)
     * @param  string $filter_value_neq Filter the results where the [value] field is not equal to the given value. (optional)
     * @param  string $filter_value_like Filter the results where the [value] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_value_ilike Filter the results where the [value] field is similar to the given case insensitive value. (optional)
     * @param  ApiAccountsMetadataGetIncludeParameter $include Include the given relationships. (optional)
     * @param  ApiAccountsMetadataGetSortParameter $sort Sort the results by the given field and direction. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiAccountsMetadataGetRequest($fields_accounts_metadata = null, $filter_account_id = null, $filter_module = null, $filter_module_neq = null, $filter_module_like = null, $filter_module_ilike = null, $filter_key = null, $filter_key_neq = null, $filter_key_like = null, $filter_key_ilike = null, $filter_value = null, $filter_value_neq = null, $filter_value_like = null, $filter_value_ilike = null, $include = null, $sort = null)
    {

















        $resourcePath = '/api/accounts/metadata';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fields_accounts_metadata,
            'fields[accounts_metadata]', // param base name
            'AnyOfStringStringStringString', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_account_id,
            'filter[account_id]', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_module,
            'filter[module]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_module_neq,
            'filter[module.neq]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_module_like,
            'filter[module.like]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_module_ilike,
            'filter[module.ilike]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_key,
            'filter[key]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_key_neq,
            'filter[key.neq]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_key_like,
            'filter[key.like]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_key_ilike,
            'filter[key.ilike]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_value,
            'filter[value]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_value_neq,
            'filter[value.neq]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_value_like,
            'filter[value.like]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_value_ilike,
            'filter[value.ilike]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include,
            'include', // param base name
            'AnyOfString', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'AnyOfStringStringStringStringStringStringStringString', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiBlocksGet
     *
     * List blocks
     *
     * @param  ApiBlocksGetFieldsBlocksParameter $fields_blocks Include the given fields in the response. (optional)
     * @param  string $filter_hash Filter the results where the [hash] field is equal to the given value. (optional)
     * @param  string $filter_hash_neq Filter the results where the [hash] field is not equal to the given value. (optional)
     * @param  string $filter_hash_like Filter the results where the [hash] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_hash_ilike Filter the results where the [hash] field is similar to the given case insensitive value. (optional)
     * @param  int $filter_height Filter the results where the [height] field is equal to the given value. (optional)
     * @param  int $filter_header_version_block Filter the results where the [header.version.block] field is equal to the given value. (optional)
     * @param  string $filter_header_chain_id Filter the results where the [header.chainId] field is equal to the given value. (optional)
     * @param  string $filter_header_chain_id_neq Filter the results where the [header.chainId] field is not equal to the given value. (optional)
     * @param  string $filter_header_chain_id_like Filter the results where the [header.chainId] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_header_chain_id_ilike Filter the results where the [header.chainId] field is similar to the given case insensitive value. (optional)
     * @param  int $filter_header_height Filter the results where the [header.height] field is equal to the given value. (optional)
     * @param  string $filter_header_time Filter the results where the [header.time] field is equal to the given value. (optional)
     * @param  string $filter_header_time_neq Filter the results where the [header.time] field is not equal to the given value. (optional)
     * @param  string $filter_header_time_like Filter the results where the [header.time] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_header_time_ilike Filter the results where the [header.time] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_header_last_block_id_hash Filter the results where the [header.lastBlockId.hash] field is equal to the given value. (optional)
     * @param  string $filter_header_last_block_id_hash_neq Filter the results where the [header.lastBlockId.hash] field is not equal to the given value. (optional)
     * @param  string $filter_header_last_block_id_hash_like Filter the results where the [header.lastBlockId.hash] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_header_last_block_id_hash_ilike Filter the results where the [header.lastBlockId.hash] field is similar to the given case insensitive value. (optional)
     * @param  int $filter_header_last_block_id_part_set_header_total Filter the results where the [header.lastBlockId.partSetHeader.total] field is equal to the given value. (optional)
     * @param  string $filter_header_last_block_id_part_set_header_hash Filter the results where the [header.lastBlockId.partSetHeader.hash] field is equal to the given value. (optional)
     * @param  string $filter_header_last_block_id_part_set_header_hash_neq Filter the results where the [header.lastBlockId.partSetHeader.hash] field is not equal to the given value. (optional)
     * @param  string $filter_header_last_block_id_part_set_header_hash_like Filter the results where the [header.lastBlockId.partSetHeader.hash] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_header_last_block_id_part_set_header_hash_ilike Filter the results where the [header.lastBlockId.partSetHeader.hash] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_header_last_commit_hash Filter the results where the [header.lastCommitHash] field is equal to the given value. (optional)
     * @param  string $filter_header_last_commit_hash_neq Filter the results where the [header.lastCommitHash] field is not equal to the given value. (optional)
     * @param  string $filter_header_last_commit_hash_like Filter the results where the [header.lastCommitHash] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_header_last_commit_hash_ilike Filter the results where the [header.lastCommitHash] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_header_data_hash Filter the results where the [header.dataHash] field is equal to the given value. (optional)
     * @param  string $filter_header_data_hash_neq Filter the results where the [header.dataHash] field is not equal to the given value. (optional)
     * @param  string $filter_header_data_hash_like Filter the results where the [header.dataHash] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_header_data_hash_ilike Filter the results where the [header.dataHash] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_header_validators_hash Filter the results where the [header.validatorsHash] field is equal to the given value. (optional)
     * @param  string $filter_header_validators_hash_neq Filter the results where the [header.validatorsHash] field is not equal to the given value. (optional)
     * @param  string $filter_header_validators_hash_like Filter the results where the [header.validatorsHash] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_header_validators_hash_ilike Filter the results where the [header.validatorsHash] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_header_next_validators_hash Filter the results where the [header.nextValidatorsHash] field is equal to the given value. (optional)
     * @param  string $filter_header_next_validators_hash_neq Filter the results where the [header.nextValidatorsHash] field is not equal to the given value. (optional)
     * @param  string $filter_header_next_validators_hash_like Filter the results where the [header.nextValidatorsHash] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_header_next_validators_hash_ilike Filter the results where the [header.nextValidatorsHash] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_header_consensus_hash Filter the results where the [header.consensusHash] field is equal to the given value. (optional)
     * @param  string $filter_header_consensus_hash_neq Filter the results where the [header.consensusHash] field is not equal to the given value. (optional)
     * @param  string $filter_header_consensus_hash_like Filter the results where the [header.consensusHash] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_header_consensus_hash_ilike Filter the results where the [header.consensusHash] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_header_app_hash Filter the results where the [header.appHash] field is equal to the given value. (optional)
     * @param  string $filter_header_app_hash_neq Filter the results where the [header.appHash] field is not equal to the given value. (optional)
     * @param  string $filter_header_app_hash_like Filter the results where the [header.appHash] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_header_app_hash_ilike Filter the results where the [header.appHash] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_header_last_results_hash Filter the results where the [header.lastResultsHash] field is equal to the given value. (optional)
     * @param  string $filter_header_last_results_hash_neq Filter the results where the [header.lastResultsHash] field is not equal to the given value. (optional)
     * @param  string $filter_header_last_results_hash_like Filter the results where the [header.lastResultsHash] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_header_last_results_hash_ilike Filter the results where the [header.lastResultsHash] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_header_evidence_hash Filter the results where the [header.evidenceHash] field is equal to the given value. (optional)
     * @param  string $filter_header_evidence_hash_neq Filter the results where the [header.evidenceHash] field is not equal to the given value. (optional)
     * @param  string $filter_header_evidence_hash_like Filter the results where the [header.evidenceHash] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_header_evidence_hash_ilike Filter the results where the [header.evidenceHash] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_header_proposer_address Filter the results where the [header.proposerAddress] field is equal to the given value. (optional)
     * @param  string $filter_header_proposer_address_neq Filter the results where the [header.proposerAddress] field is not equal to the given value. (optional)
     * @param  string $filter_header_proposer_address_like Filter the results where the [header.proposerAddress] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_header_proposer_address_ilike Filter the results where the [header.proposerAddress] field is similar to the given case insensitive value. (optional)
     * @param  ApiBlocksGetIncludeParameter $include Include the given relationships. (optional)
     * @param  ApiBlocksGetSortParameter $sort Sort the results by the given field and direction. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ApiBlocksGet200Response
     */
    public function apiBlocksGet($fields_blocks = null, $filter_hash = null, $filter_hash_neq = null, $filter_hash_like = null, $filter_hash_ilike = null, $filter_height = null, $filter_header_version_block = null, $filter_header_chain_id = null, $filter_header_chain_id_neq = null, $filter_header_chain_id_like = null, $filter_header_chain_id_ilike = null, $filter_header_height = null, $filter_header_time = null, $filter_header_time_neq = null, $filter_header_time_like = null, $filter_header_time_ilike = null, $filter_header_last_block_id_hash = null, $filter_header_last_block_id_hash_neq = null, $filter_header_last_block_id_hash_like = null, $filter_header_last_block_id_hash_ilike = null, $filter_header_last_block_id_part_set_header_total = null, $filter_header_last_block_id_part_set_header_hash = null, $filter_header_last_block_id_part_set_header_hash_neq = null, $filter_header_last_block_id_part_set_header_hash_like = null, $filter_header_last_block_id_part_set_header_hash_ilike = null, $filter_header_last_commit_hash = null, $filter_header_last_commit_hash_neq = null, $filter_header_last_commit_hash_like = null, $filter_header_last_commit_hash_ilike = null, $filter_header_data_hash = null, $filter_header_data_hash_neq = null, $filter_header_data_hash_like = null, $filter_header_data_hash_ilike = null, $filter_header_validators_hash = null, $filter_header_validators_hash_neq = null, $filter_header_validators_hash_like = null, $filter_header_validators_hash_ilike = null, $filter_header_next_validators_hash = null, $filter_header_next_validators_hash_neq = null, $filter_header_next_validators_hash_like = null, $filter_header_next_validators_hash_ilike = null, $filter_header_consensus_hash = null, $filter_header_consensus_hash_neq = null, $filter_header_consensus_hash_like = null, $filter_header_consensus_hash_ilike = null, $filter_header_app_hash = null, $filter_header_app_hash_neq = null, $filter_header_app_hash_like = null, $filter_header_app_hash_ilike = null, $filter_header_last_results_hash = null, $filter_header_last_results_hash_neq = null, $filter_header_last_results_hash_like = null, $filter_header_last_results_hash_ilike = null, $filter_header_evidence_hash = null, $filter_header_evidence_hash_neq = null, $filter_header_evidence_hash_like = null, $filter_header_evidence_hash_ilike = null, $filter_header_proposer_address = null, $filter_header_proposer_address_neq = null, $filter_header_proposer_address_like = null, $filter_header_proposer_address_ilike = null, $include = null, $sort = null)
    {
        list($response) = $this->apiBlocksGetWithHttpInfo($fields_blocks, $filter_hash, $filter_hash_neq, $filter_hash_like, $filter_hash_ilike, $filter_height, $filter_header_version_block, $filter_header_chain_id, $filter_header_chain_id_neq, $filter_header_chain_id_like, $filter_header_chain_id_ilike, $filter_header_height, $filter_header_time, $filter_header_time_neq, $filter_header_time_like, $filter_header_time_ilike, $filter_header_last_block_id_hash, $filter_header_last_block_id_hash_neq, $filter_header_last_block_id_hash_like, $filter_header_last_block_id_hash_ilike, $filter_header_last_block_id_part_set_header_total, $filter_header_last_block_id_part_set_header_hash, $filter_header_last_block_id_part_set_header_hash_neq, $filter_header_last_block_id_part_set_header_hash_like, $filter_header_last_block_id_part_set_header_hash_ilike, $filter_header_last_commit_hash, $filter_header_last_commit_hash_neq, $filter_header_last_commit_hash_like, $filter_header_last_commit_hash_ilike, $filter_header_data_hash, $filter_header_data_hash_neq, $filter_header_data_hash_like, $filter_header_data_hash_ilike, $filter_header_validators_hash, $filter_header_validators_hash_neq, $filter_header_validators_hash_like, $filter_header_validators_hash_ilike, $filter_header_next_validators_hash, $filter_header_next_validators_hash_neq, $filter_header_next_validators_hash_like, $filter_header_next_validators_hash_ilike, $filter_header_consensus_hash, $filter_header_consensus_hash_neq, $filter_header_consensus_hash_like, $filter_header_consensus_hash_ilike, $filter_header_app_hash, $filter_header_app_hash_neq, $filter_header_app_hash_like, $filter_header_app_hash_ilike, $filter_header_last_results_hash, $filter_header_last_results_hash_neq, $filter_header_last_results_hash_like, $filter_header_last_results_hash_ilike, $filter_header_evidence_hash, $filter_header_evidence_hash_neq, $filter_header_evidence_hash_like, $filter_header_evidence_hash_ilike, $filter_header_proposer_address, $filter_header_proposer_address_neq, $filter_header_proposer_address_like, $filter_header_proposer_address_ilike, $include, $sort);
        return $response;
    }

    /**
     * Operation apiBlocksGetWithHttpInfo
     *
     * List blocks
     *
     * @param  ApiBlocksGetFieldsBlocksParameter $fields_blocks Include the given fields in the response. (optional)
     * @param  string $filter_hash Filter the results where the [hash] field is equal to the given value. (optional)
     * @param  string $filter_hash_neq Filter the results where the [hash] field is not equal to the given value. (optional)
     * @param  string $filter_hash_like Filter the results where the [hash] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_hash_ilike Filter the results where the [hash] field is similar to the given case insensitive value. (optional)
     * @param  int $filter_height Filter the results where the [height] field is equal to the given value. (optional)
     * @param  int $filter_header_version_block Filter the results where the [header.version.block] field is equal to the given value. (optional)
     * @param  string $filter_header_chain_id Filter the results where the [header.chainId] field is equal to the given value. (optional)
     * @param  string $filter_header_chain_id_neq Filter the results where the [header.chainId] field is not equal to the given value. (optional)
     * @param  string $filter_header_chain_id_like Filter the results where the [header.chainId] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_header_chain_id_ilike Filter the results where the [header.chainId] field is similar to the given case insensitive value. (optional)
     * @param  int $filter_header_height Filter the results where the [header.height] field is equal to the given value. (optional)
     * @param  string $filter_header_time Filter the results where the [header.time] field is equal to the given value. (optional)
     * @param  string $filter_header_time_neq Filter the results where the [header.time] field is not equal to the given value. (optional)
     * @param  string $filter_header_time_like Filter the results where the [header.time] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_header_time_ilike Filter the results where the [header.time] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_header_last_block_id_hash Filter the results where the [header.lastBlockId.hash] field is equal to the given value. (optional)
     * @param  string $filter_header_last_block_id_hash_neq Filter the results where the [header.lastBlockId.hash] field is not equal to the given value. (optional)
     * @param  string $filter_header_last_block_id_hash_like Filter the results where the [header.lastBlockId.hash] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_header_last_block_id_hash_ilike Filter the results where the [header.lastBlockId.hash] field is similar to the given case insensitive value. (optional)
     * @param  int $filter_header_last_block_id_part_set_header_total Filter the results where the [header.lastBlockId.partSetHeader.total] field is equal to the given value. (optional)
     * @param  string $filter_header_last_block_id_part_set_header_hash Filter the results where the [header.lastBlockId.partSetHeader.hash] field is equal to the given value. (optional)
     * @param  string $filter_header_last_block_id_part_set_header_hash_neq Filter the results where the [header.lastBlockId.partSetHeader.hash] field is not equal to the given value. (optional)
     * @param  string $filter_header_last_block_id_part_set_header_hash_like Filter the results where the [header.lastBlockId.partSetHeader.hash] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_header_last_block_id_part_set_header_hash_ilike Filter the results where the [header.lastBlockId.partSetHeader.hash] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_header_last_commit_hash Filter the results where the [header.lastCommitHash] field is equal to the given value. (optional)
     * @param  string $filter_header_last_commit_hash_neq Filter the results where the [header.lastCommitHash] field is not equal to the given value. (optional)
     * @param  string $filter_header_last_commit_hash_like Filter the results where the [header.lastCommitHash] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_header_last_commit_hash_ilike Filter the results where the [header.lastCommitHash] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_header_data_hash Filter the results where the [header.dataHash] field is equal to the given value. (optional)
     * @param  string $filter_header_data_hash_neq Filter the results where the [header.dataHash] field is not equal to the given value. (optional)
     * @param  string $filter_header_data_hash_like Filter the results where the [header.dataHash] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_header_data_hash_ilike Filter the results where the [header.dataHash] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_header_validators_hash Filter the results where the [header.validatorsHash] field is equal to the given value. (optional)
     * @param  string $filter_header_validators_hash_neq Filter the results where the [header.validatorsHash] field is not equal to the given value. (optional)
     * @param  string $filter_header_validators_hash_like Filter the results where the [header.validatorsHash] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_header_validators_hash_ilike Filter the results where the [header.validatorsHash] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_header_next_validators_hash Filter the results where the [header.nextValidatorsHash] field is equal to the given value. (optional)
     * @param  string $filter_header_next_validators_hash_neq Filter the results where the [header.nextValidatorsHash] field is not equal to the given value. (optional)
     * @param  string $filter_header_next_validators_hash_like Filter the results where the [header.nextValidatorsHash] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_header_next_validators_hash_ilike Filter the results where the [header.nextValidatorsHash] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_header_consensus_hash Filter the results where the [header.consensusHash] field is equal to the given value. (optional)
     * @param  string $filter_header_consensus_hash_neq Filter the results where the [header.consensusHash] field is not equal to the given value. (optional)
     * @param  string $filter_header_consensus_hash_like Filter the results where the [header.consensusHash] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_header_consensus_hash_ilike Filter the results where the [header.consensusHash] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_header_app_hash Filter the results where the [header.appHash] field is equal to the given value. (optional)
     * @param  string $filter_header_app_hash_neq Filter the results where the [header.appHash] field is not equal to the given value. (optional)
     * @param  string $filter_header_app_hash_like Filter the results where the [header.appHash] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_header_app_hash_ilike Filter the results where the [header.appHash] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_header_last_results_hash Filter the results where the [header.lastResultsHash] field is equal to the given value. (optional)
     * @param  string $filter_header_last_results_hash_neq Filter the results where the [header.lastResultsHash] field is not equal to the given value. (optional)
     * @param  string $filter_header_last_results_hash_like Filter the results where the [header.lastResultsHash] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_header_last_results_hash_ilike Filter the results where the [header.lastResultsHash] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_header_evidence_hash Filter the results where the [header.evidenceHash] field is equal to the given value. (optional)
     * @param  string $filter_header_evidence_hash_neq Filter the results where the [header.evidenceHash] field is not equal to the given value. (optional)
     * @param  string $filter_header_evidence_hash_like Filter the results where the [header.evidenceHash] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_header_evidence_hash_ilike Filter the results where the [header.evidenceHash] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_header_proposer_address Filter the results where the [header.proposerAddress] field is equal to the given value. (optional)
     * @param  string $filter_header_proposer_address_neq Filter the results where the [header.proposerAddress] field is not equal to the given value. (optional)
     * @param  string $filter_header_proposer_address_like Filter the results where the [header.proposerAddress] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_header_proposer_address_ilike Filter the results where the [header.proposerAddress] field is similar to the given case insensitive value. (optional)
     * @param  ApiBlocksGetIncludeParameter $include Include the given relationships. (optional)
     * @param  ApiBlocksGetSortParameter $sort Sort the results by the given field and direction. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ApiBlocksGet200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiBlocksGetWithHttpInfo($fields_blocks = null, $filter_hash = null, $filter_hash_neq = null, $filter_hash_like = null, $filter_hash_ilike = null, $filter_height = null, $filter_header_version_block = null, $filter_header_chain_id = null, $filter_header_chain_id_neq = null, $filter_header_chain_id_like = null, $filter_header_chain_id_ilike = null, $filter_header_height = null, $filter_header_time = null, $filter_header_time_neq = null, $filter_header_time_like = null, $filter_header_time_ilike = null, $filter_header_last_block_id_hash = null, $filter_header_last_block_id_hash_neq = null, $filter_header_last_block_id_hash_like = null, $filter_header_last_block_id_hash_ilike = null, $filter_header_last_block_id_part_set_header_total = null, $filter_header_last_block_id_part_set_header_hash = null, $filter_header_last_block_id_part_set_header_hash_neq = null, $filter_header_last_block_id_part_set_header_hash_like = null, $filter_header_last_block_id_part_set_header_hash_ilike = null, $filter_header_last_commit_hash = null, $filter_header_last_commit_hash_neq = null, $filter_header_last_commit_hash_like = null, $filter_header_last_commit_hash_ilike = null, $filter_header_data_hash = null, $filter_header_data_hash_neq = null, $filter_header_data_hash_like = null, $filter_header_data_hash_ilike = null, $filter_header_validators_hash = null, $filter_header_validators_hash_neq = null, $filter_header_validators_hash_like = null, $filter_header_validators_hash_ilike = null, $filter_header_next_validators_hash = null, $filter_header_next_validators_hash_neq = null, $filter_header_next_validators_hash_like = null, $filter_header_next_validators_hash_ilike = null, $filter_header_consensus_hash = null, $filter_header_consensus_hash_neq = null, $filter_header_consensus_hash_like = null, $filter_header_consensus_hash_ilike = null, $filter_header_app_hash = null, $filter_header_app_hash_neq = null, $filter_header_app_hash_like = null, $filter_header_app_hash_ilike = null, $filter_header_last_results_hash = null, $filter_header_last_results_hash_neq = null, $filter_header_last_results_hash_like = null, $filter_header_last_results_hash_ilike = null, $filter_header_evidence_hash = null, $filter_header_evidence_hash_neq = null, $filter_header_evidence_hash_like = null, $filter_header_evidence_hash_ilike = null, $filter_header_proposer_address = null, $filter_header_proposer_address_neq = null, $filter_header_proposer_address_like = null, $filter_header_proposer_address_ilike = null, $include = null, $sort = null)
    {
        $request = $this->apiBlocksGetRequest($fields_blocks, $filter_hash, $filter_hash_neq, $filter_hash_like, $filter_hash_ilike, $filter_height, $filter_header_version_block, $filter_header_chain_id, $filter_header_chain_id_neq, $filter_header_chain_id_like, $filter_header_chain_id_ilike, $filter_header_height, $filter_header_time, $filter_header_time_neq, $filter_header_time_like, $filter_header_time_ilike, $filter_header_last_block_id_hash, $filter_header_last_block_id_hash_neq, $filter_header_last_block_id_hash_like, $filter_header_last_block_id_hash_ilike, $filter_header_last_block_id_part_set_header_total, $filter_header_last_block_id_part_set_header_hash, $filter_header_last_block_id_part_set_header_hash_neq, $filter_header_last_block_id_part_set_header_hash_like, $filter_header_last_block_id_part_set_header_hash_ilike, $filter_header_last_commit_hash, $filter_header_last_commit_hash_neq, $filter_header_last_commit_hash_like, $filter_header_last_commit_hash_ilike, $filter_header_data_hash, $filter_header_data_hash_neq, $filter_header_data_hash_like, $filter_header_data_hash_ilike, $filter_header_validators_hash, $filter_header_validators_hash_neq, $filter_header_validators_hash_like, $filter_header_validators_hash_ilike, $filter_header_next_validators_hash, $filter_header_next_validators_hash_neq, $filter_header_next_validators_hash_like, $filter_header_next_validators_hash_ilike, $filter_header_consensus_hash, $filter_header_consensus_hash_neq, $filter_header_consensus_hash_like, $filter_header_consensus_hash_ilike, $filter_header_app_hash, $filter_header_app_hash_neq, $filter_header_app_hash_like, $filter_header_app_hash_ilike, $filter_header_last_results_hash, $filter_header_last_results_hash_neq, $filter_header_last_results_hash_like, $filter_header_last_results_hash_ilike, $filter_header_evidence_hash, $filter_header_evidence_hash_neq, $filter_header_evidence_hash_like, $filter_header_evidence_hash_ilike, $filter_header_proposer_address, $filter_header_proposer_address_neq, $filter_header_proposer_address_like, $filter_header_proposer_address_ilike, $include, $sort);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
            
                case 200:
                    if ('\OpenAPI\Client\Model\ApiBlocksGet200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ApiBlocksGet200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ApiBlocksGet200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            }

            $returnType = '\OpenAPI\Client\Model\ApiBlocksGet200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ApiBlocksGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            }
            throw $e;
        }
    }

    /**
     * Operation apiBlocksGetAsync
     *
     * List blocks
     *
     * @param  ApiBlocksGetFieldsBlocksParameter $fields_blocks Include the given fields in the response. (optional)
     * @param  string $filter_hash Filter the results where the [hash] field is equal to the given value. (optional)
     * @param  string $filter_hash_neq Filter the results where the [hash] field is not equal to the given value. (optional)
     * @param  string $filter_hash_like Filter the results where the [hash] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_hash_ilike Filter the results where the [hash] field is similar to the given case insensitive value. (optional)
     * @param  int $filter_height Filter the results where the [height] field is equal to the given value. (optional)
     * @param  int $filter_header_version_block Filter the results where the [header.version.block] field is equal to the given value. (optional)
     * @param  string $filter_header_chain_id Filter the results where the [header.chainId] field is equal to the given value. (optional)
     * @param  string $filter_header_chain_id_neq Filter the results where the [header.chainId] field is not equal to the given value. (optional)
     * @param  string $filter_header_chain_id_like Filter the results where the [header.chainId] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_header_chain_id_ilike Filter the results where the [header.chainId] field is similar to the given case insensitive value. (optional)
     * @param  int $filter_header_height Filter the results where the [header.height] field is equal to the given value. (optional)
     * @param  string $filter_header_time Filter the results where the [header.time] field is equal to the given value. (optional)
     * @param  string $filter_header_time_neq Filter the results where the [header.time] field is not equal to the given value. (optional)
     * @param  string $filter_header_time_like Filter the results where the [header.time] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_header_time_ilike Filter the results where the [header.time] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_header_last_block_id_hash Filter the results where the [header.lastBlockId.hash] field is equal to the given value. (optional)
     * @param  string $filter_header_last_block_id_hash_neq Filter the results where the [header.lastBlockId.hash] field is not equal to the given value. (optional)
     * @param  string $filter_header_last_block_id_hash_like Filter the results where the [header.lastBlockId.hash] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_header_last_block_id_hash_ilike Filter the results where the [header.lastBlockId.hash] field is similar to the given case insensitive value. (optional)
     * @param  int $filter_header_last_block_id_part_set_header_total Filter the results where the [header.lastBlockId.partSetHeader.total] field is equal to the given value. (optional)
     * @param  string $filter_header_last_block_id_part_set_header_hash Filter the results where the [header.lastBlockId.partSetHeader.hash] field is equal to the given value. (optional)
     * @param  string $filter_header_last_block_id_part_set_header_hash_neq Filter the results where the [header.lastBlockId.partSetHeader.hash] field is not equal to the given value. (optional)
     * @param  string $filter_header_last_block_id_part_set_header_hash_like Filter the results where the [header.lastBlockId.partSetHeader.hash] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_header_last_block_id_part_set_header_hash_ilike Filter the results where the [header.lastBlockId.partSetHeader.hash] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_header_last_commit_hash Filter the results where the [header.lastCommitHash] field is equal to the given value. (optional)
     * @param  string $filter_header_last_commit_hash_neq Filter the results where the [header.lastCommitHash] field is not equal to the given value. (optional)
     * @param  string $filter_header_last_commit_hash_like Filter the results where the [header.lastCommitHash] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_header_last_commit_hash_ilike Filter the results where the [header.lastCommitHash] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_header_data_hash Filter the results where the [header.dataHash] field is equal to the given value. (optional)
     * @param  string $filter_header_data_hash_neq Filter the results where the [header.dataHash] field is not equal to the given value. (optional)
     * @param  string $filter_header_data_hash_like Filter the results where the [header.dataHash] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_header_data_hash_ilike Filter the results where the [header.dataHash] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_header_validators_hash Filter the results where the [header.validatorsHash] field is equal to the given value. (optional)
     * @param  string $filter_header_validators_hash_neq Filter the results where the [header.validatorsHash] field is not equal to the given value. (optional)
     * @param  string $filter_header_validators_hash_like Filter the results where the [header.validatorsHash] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_header_validators_hash_ilike Filter the results where the [header.validatorsHash] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_header_next_validators_hash Filter the results where the [header.nextValidatorsHash] field is equal to the given value. (optional)
     * @param  string $filter_header_next_validators_hash_neq Filter the results where the [header.nextValidatorsHash] field is not equal to the given value. (optional)
     * @param  string $filter_header_next_validators_hash_like Filter the results where the [header.nextValidatorsHash] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_header_next_validators_hash_ilike Filter the results where the [header.nextValidatorsHash] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_header_consensus_hash Filter the results where the [header.consensusHash] field is equal to the given value. (optional)
     * @param  string $filter_header_consensus_hash_neq Filter the results where the [header.consensusHash] field is not equal to the given value. (optional)
     * @param  string $filter_header_consensus_hash_like Filter the results where the [header.consensusHash] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_header_consensus_hash_ilike Filter the results where the [header.consensusHash] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_header_app_hash Filter the results where the [header.appHash] field is equal to the given value. (optional)
     * @param  string $filter_header_app_hash_neq Filter the results where the [header.appHash] field is not equal to the given value. (optional)
     * @param  string $filter_header_app_hash_like Filter the results where the [header.appHash] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_header_app_hash_ilike Filter the results where the [header.appHash] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_header_last_results_hash Filter the results where the [header.lastResultsHash] field is equal to the given value. (optional)
     * @param  string $filter_header_last_results_hash_neq Filter the results where the [header.lastResultsHash] field is not equal to the given value. (optional)
     * @param  string $filter_header_last_results_hash_like Filter the results where the [header.lastResultsHash] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_header_last_results_hash_ilike Filter the results where the [header.lastResultsHash] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_header_evidence_hash Filter the results where the [header.evidenceHash] field is equal to the given value. (optional)
     * @param  string $filter_header_evidence_hash_neq Filter the results where the [header.evidenceHash] field is not equal to the given value. (optional)
     * @param  string $filter_header_evidence_hash_like Filter the results where the [header.evidenceHash] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_header_evidence_hash_ilike Filter the results where the [header.evidenceHash] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_header_proposer_address Filter the results where the [header.proposerAddress] field is equal to the given value. (optional)
     * @param  string $filter_header_proposer_address_neq Filter the results where the [header.proposerAddress] field is not equal to the given value. (optional)
     * @param  string $filter_header_proposer_address_like Filter the results where the [header.proposerAddress] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_header_proposer_address_ilike Filter the results where the [header.proposerAddress] field is similar to the given case insensitive value. (optional)
     * @param  ApiBlocksGetIncludeParameter $include Include the given relationships. (optional)
     * @param  ApiBlocksGetSortParameter $sort Sort the results by the given field and direction. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiBlocksGetAsync($fields_blocks = null, $filter_hash = null, $filter_hash_neq = null, $filter_hash_like = null, $filter_hash_ilike = null, $filter_height = null, $filter_header_version_block = null, $filter_header_chain_id = null, $filter_header_chain_id_neq = null, $filter_header_chain_id_like = null, $filter_header_chain_id_ilike = null, $filter_header_height = null, $filter_header_time = null, $filter_header_time_neq = null, $filter_header_time_like = null, $filter_header_time_ilike = null, $filter_header_last_block_id_hash = null, $filter_header_last_block_id_hash_neq = null, $filter_header_last_block_id_hash_like = null, $filter_header_last_block_id_hash_ilike = null, $filter_header_last_block_id_part_set_header_total = null, $filter_header_last_block_id_part_set_header_hash = null, $filter_header_last_block_id_part_set_header_hash_neq = null, $filter_header_last_block_id_part_set_header_hash_like = null, $filter_header_last_block_id_part_set_header_hash_ilike = null, $filter_header_last_commit_hash = null, $filter_header_last_commit_hash_neq = null, $filter_header_last_commit_hash_like = null, $filter_header_last_commit_hash_ilike = null, $filter_header_data_hash = null, $filter_header_data_hash_neq = null, $filter_header_data_hash_like = null, $filter_header_data_hash_ilike = null, $filter_header_validators_hash = null, $filter_header_validators_hash_neq = null, $filter_header_validators_hash_like = null, $filter_header_validators_hash_ilike = null, $filter_header_next_validators_hash = null, $filter_header_next_validators_hash_neq = null, $filter_header_next_validators_hash_like = null, $filter_header_next_validators_hash_ilike = null, $filter_header_consensus_hash = null, $filter_header_consensus_hash_neq = null, $filter_header_consensus_hash_like = null, $filter_header_consensus_hash_ilike = null, $filter_header_app_hash = null, $filter_header_app_hash_neq = null, $filter_header_app_hash_like = null, $filter_header_app_hash_ilike = null, $filter_header_last_results_hash = null, $filter_header_last_results_hash_neq = null, $filter_header_last_results_hash_like = null, $filter_header_last_results_hash_ilike = null, $filter_header_evidence_hash = null, $filter_header_evidence_hash_neq = null, $filter_header_evidence_hash_like = null, $filter_header_evidence_hash_ilike = null, $filter_header_proposer_address = null, $filter_header_proposer_address_neq = null, $filter_header_proposer_address_like = null, $filter_header_proposer_address_ilike = null, $include = null, $sort = null)
    {
        return $this->apiBlocksGetAsyncWithHttpInfo($fields_blocks, $filter_hash, $filter_hash_neq, $filter_hash_like, $filter_hash_ilike, $filter_height, $filter_header_version_block, $filter_header_chain_id, $filter_header_chain_id_neq, $filter_header_chain_id_like, $filter_header_chain_id_ilike, $filter_header_height, $filter_header_time, $filter_header_time_neq, $filter_header_time_like, $filter_header_time_ilike, $filter_header_last_block_id_hash, $filter_header_last_block_id_hash_neq, $filter_header_last_block_id_hash_like, $filter_header_last_block_id_hash_ilike, $filter_header_last_block_id_part_set_header_total, $filter_header_last_block_id_part_set_header_hash, $filter_header_last_block_id_part_set_header_hash_neq, $filter_header_last_block_id_part_set_header_hash_like, $filter_header_last_block_id_part_set_header_hash_ilike, $filter_header_last_commit_hash, $filter_header_last_commit_hash_neq, $filter_header_last_commit_hash_like, $filter_header_last_commit_hash_ilike, $filter_header_data_hash, $filter_header_data_hash_neq, $filter_header_data_hash_like, $filter_header_data_hash_ilike, $filter_header_validators_hash, $filter_header_validators_hash_neq, $filter_header_validators_hash_like, $filter_header_validators_hash_ilike, $filter_header_next_validators_hash, $filter_header_next_validators_hash_neq, $filter_header_next_validators_hash_like, $filter_header_next_validators_hash_ilike, $filter_header_consensus_hash, $filter_header_consensus_hash_neq, $filter_header_consensus_hash_like, $filter_header_consensus_hash_ilike, $filter_header_app_hash, $filter_header_app_hash_neq, $filter_header_app_hash_like, $filter_header_app_hash_ilike, $filter_header_last_results_hash, $filter_header_last_results_hash_neq, $filter_header_last_results_hash_like, $filter_header_last_results_hash_ilike, $filter_header_evidence_hash, $filter_header_evidence_hash_neq, $filter_header_evidence_hash_like, $filter_header_evidence_hash_ilike, $filter_header_proposer_address, $filter_header_proposer_address_neq, $filter_header_proposer_address_like, $filter_header_proposer_address_ilike, $include, $sort)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiBlocksGetAsyncWithHttpInfo
     *
     * List blocks
     *
     * @param  ApiBlocksGetFieldsBlocksParameter $fields_blocks Include the given fields in the response. (optional)
     * @param  string $filter_hash Filter the results where the [hash] field is equal to the given value. (optional)
     * @param  string $filter_hash_neq Filter the results where the [hash] field is not equal to the given value. (optional)
     * @param  string $filter_hash_like Filter the results where the [hash] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_hash_ilike Filter the results where the [hash] field is similar to the given case insensitive value. (optional)
     * @param  int $filter_height Filter the results where the [height] field is equal to the given value. (optional)
     * @param  int $filter_header_version_block Filter the results where the [header.version.block] field is equal to the given value. (optional)
     * @param  string $filter_header_chain_id Filter the results where the [header.chainId] field is equal to the given value. (optional)
     * @param  string $filter_header_chain_id_neq Filter the results where the [header.chainId] field is not equal to the given value. (optional)
     * @param  string $filter_header_chain_id_like Filter the results where the [header.chainId] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_header_chain_id_ilike Filter the results where the [header.chainId] field is similar to the given case insensitive value. (optional)
     * @param  int $filter_header_height Filter the results where the [header.height] field is equal to the given value. (optional)
     * @param  string $filter_header_time Filter the results where the [header.time] field is equal to the given value. (optional)
     * @param  string $filter_header_time_neq Filter the results where the [header.time] field is not equal to the given value. (optional)
     * @param  string $filter_header_time_like Filter the results where the [header.time] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_header_time_ilike Filter the results where the [header.time] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_header_last_block_id_hash Filter the results where the [header.lastBlockId.hash] field is equal to the given value. (optional)
     * @param  string $filter_header_last_block_id_hash_neq Filter the results where the [header.lastBlockId.hash] field is not equal to the given value. (optional)
     * @param  string $filter_header_last_block_id_hash_like Filter the results where the [header.lastBlockId.hash] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_header_last_block_id_hash_ilike Filter the results where the [header.lastBlockId.hash] field is similar to the given case insensitive value. (optional)
     * @param  int $filter_header_last_block_id_part_set_header_total Filter the results where the [header.lastBlockId.partSetHeader.total] field is equal to the given value. (optional)
     * @param  string $filter_header_last_block_id_part_set_header_hash Filter the results where the [header.lastBlockId.partSetHeader.hash] field is equal to the given value. (optional)
     * @param  string $filter_header_last_block_id_part_set_header_hash_neq Filter the results where the [header.lastBlockId.partSetHeader.hash] field is not equal to the given value. (optional)
     * @param  string $filter_header_last_block_id_part_set_header_hash_like Filter the results where the [header.lastBlockId.partSetHeader.hash] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_header_last_block_id_part_set_header_hash_ilike Filter the results where the [header.lastBlockId.partSetHeader.hash] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_header_last_commit_hash Filter the results where the [header.lastCommitHash] field is equal to the given value. (optional)
     * @param  string $filter_header_last_commit_hash_neq Filter the results where the [header.lastCommitHash] field is not equal to the given value. (optional)
     * @param  string $filter_header_last_commit_hash_like Filter the results where the [header.lastCommitHash] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_header_last_commit_hash_ilike Filter the results where the [header.lastCommitHash] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_header_data_hash Filter the results where the [header.dataHash] field is equal to the given value. (optional)
     * @param  string $filter_header_data_hash_neq Filter the results where the [header.dataHash] field is not equal to the given value. (optional)
     * @param  string $filter_header_data_hash_like Filter the results where the [header.dataHash] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_header_data_hash_ilike Filter the results where the [header.dataHash] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_header_validators_hash Filter the results where the [header.validatorsHash] field is equal to the given value. (optional)
     * @param  string $filter_header_validators_hash_neq Filter the results where the [header.validatorsHash] field is not equal to the given value. (optional)
     * @param  string $filter_header_validators_hash_like Filter the results where the [header.validatorsHash] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_header_validators_hash_ilike Filter the results where the [header.validatorsHash] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_header_next_validators_hash Filter the results where the [header.nextValidatorsHash] field is equal to the given value. (optional)
     * @param  string $filter_header_next_validators_hash_neq Filter the results where the [header.nextValidatorsHash] field is not equal to the given value. (optional)
     * @param  string $filter_header_next_validators_hash_like Filter the results where the [header.nextValidatorsHash] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_header_next_validators_hash_ilike Filter the results where the [header.nextValidatorsHash] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_header_consensus_hash Filter the results where the [header.consensusHash] field is equal to the given value. (optional)
     * @param  string $filter_header_consensus_hash_neq Filter the results where the [header.consensusHash] field is not equal to the given value. (optional)
     * @param  string $filter_header_consensus_hash_like Filter the results where the [header.consensusHash] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_header_consensus_hash_ilike Filter the results where the [header.consensusHash] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_header_app_hash Filter the results where the [header.appHash] field is equal to the given value. (optional)
     * @param  string $filter_header_app_hash_neq Filter the results where the [header.appHash] field is not equal to the given value. (optional)
     * @param  string $filter_header_app_hash_like Filter the results where the [header.appHash] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_header_app_hash_ilike Filter the results where the [header.appHash] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_header_last_results_hash Filter the results where the [header.lastResultsHash] field is equal to the given value. (optional)
     * @param  string $filter_header_last_results_hash_neq Filter the results where the [header.lastResultsHash] field is not equal to the given value. (optional)
     * @param  string $filter_header_last_results_hash_like Filter the results where the [header.lastResultsHash] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_header_last_results_hash_ilike Filter the results where the [header.lastResultsHash] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_header_evidence_hash Filter the results where the [header.evidenceHash] field is equal to the given value. (optional)
     * @param  string $filter_header_evidence_hash_neq Filter the results where the [header.evidenceHash] field is not equal to the given value. (optional)
     * @param  string $filter_header_evidence_hash_like Filter the results where the [header.evidenceHash] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_header_evidence_hash_ilike Filter the results where the [header.evidenceHash] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_header_proposer_address Filter the results where the [header.proposerAddress] field is equal to the given value. (optional)
     * @param  string $filter_header_proposer_address_neq Filter the results where the [header.proposerAddress] field is not equal to the given value. (optional)
     * @param  string $filter_header_proposer_address_like Filter the results where the [header.proposerAddress] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_header_proposer_address_ilike Filter the results where the [header.proposerAddress] field is similar to the given case insensitive value. (optional)
     * @param  ApiBlocksGetIncludeParameter $include Include the given relationships. (optional)
     * @param  ApiBlocksGetSortParameter $sort Sort the results by the given field and direction. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiBlocksGetAsyncWithHttpInfo($fields_blocks = null, $filter_hash = null, $filter_hash_neq = null, $filter_hash_like = null, $filter_hash_ilike = null, $filter_height = null, $filter_header_version_block = null, $filter_header_chain_id = null, $filter_header_chain_id_neq = null, $filter_header_chain_id_like = null, $filter_header_chain_id_ilike = null, $filter_header_height = null, $filter_header_time = null, $filter_header_time_neq = null, $filter_header_time_like = null, $filter_header_time_ilike = null, $filter_header_last_block_id_hash = null, $filter_header_last_block_id_hash_neq = null, $filter_header_last_block_id_hash_like = null, $filter_header_last_block_id_hash_ilike = null, $filter_header_last_block_id_part_set_header_total = null, $filter_header_last_block_id_part_set_header_hash = null, $filter_header_last_block_id_part_set_header_hash_neq = null, $filter_header_last_block_id_part_set_header_hash_like = null, $filter_header_last_block_id_part_set_header_hash_ilike = null, $filter_header_last_commit_hash = null, $filter_header_last_commit_hash_neq = null, $filter_header_last_commit_hash_like = null, $filter_header_last_commit_hash_ilike = null, $filter_header_data_hash = null, $filter_header_data_hash_neq = null, $filter_header_data_hash_like = null, $filter_header_data_hash_ilike = null, $filter_header_validators_hash = null, $filter_header_validators_hash_neq = null, $filter_header_validators_hash_like = null, $filter_header_validators_hash_ilike = null, $filter_header_next_validators_hash = null, $filter_header_next_validators_hash_neq = null, $filter_header_next_validators_hash_like = null, $filter_header_next_validators_hash_ilike = null, $filter_header_consensus_hash = null, $filter_header_consensus_hash_neq = null, $filter_header_consensus_hash_like = null, $filter_header_consensus_hash_ilike = null, $filter_header_app_hash = null, $filter_header_app_hash_neq = null, $filter_header_app_hash_like = null, $filter_header_app_hash_ilike = null, $filter_header_last_results_hash = null, $filter_header_last_results_hash_neq = null, $filter_header_last_results_hash_like = null, $filter_header_last_results_hash_ilike = null, $filter_header_evidence_hash = null, $filter_header_evidence_hash_neq = null, $filter_header_evidence_hash_like = null, $filter_header_evidence_hash_ilike = null, $filter_header_proposer_address = null, $filter_header_proposer_address_neq = null, $filter_header_proposer_address_like = null, $filter_header_proposer_address_ilike = null, $include = null, $sort = null)
    {
        $returnType = '\OpenAPI\Client\Model\ApiBlocksGet200Response';
        $request = $this->apiBlocksGetRequest($fields_blocks, $filter_hash, $filter_hash_neq, $filter_hash_like, $filter_hash_ilike, $filter_height, $filter_header_version_block, $filter_header_chain_id, $filter_header_chain_id_neq, $filter_header_chain_id_like, $filter_header_chain_id_ilike, $filter_header_height, $filter_header_time, $filter_header_time_neq, $filter_header_time_like, $filter_header_time_ilike, $filter_header_last_block_id_hash, $filter_header_last_block_id_hash_neq, $filter_header_last_block_id_hash_like, $filter_header_last_block_id_hash_ilike, $filter_header_last_block_id_part_set_header_total, $filter_header_last_block_id_part_set_header_hash, $filter_header_last_block_id_part_set_header_hash_neq, $filter_header_last_block_id_part_set_header_hash_like, $filter_header_last_block_id_part_set_header_hash_ilike, $filter_header_last_commit_hash, $filter_header_last_commit_hash_neq, $filter_header_last_commit_hash_like, $filter_header_last_commit_hash_ilike, $filter_header_data_hash, $filter_header_data_hash_neq, $filter_header_data_hash_like, $filter_header_data_hash_ilike, $filter_header_validators_hash, $filter_header_validators_hash_neq, $filter_header_validators_hash_like, $filter_header_validators_hash_ilike, $filter_header_next_validators_hash, $filter_header_next_validators_hash_neq, $filter_header_next_validators_hash_like, $filter_header_next_validators_hash_ilike, $filter_header_consensus_hash, $filter_header_consensus_hash_neq, $filter_header_consensus_hash_like, $filter_header_consensus_hash_ilike, $filter_header_app_hash, $filter_header_app_hash_neq, $filter_header_app_hash_like, $filter_header_app_hash_ilike, $filter_header_last_results_hash, $filter_header_last_results_hash_neq, $filter_header_last_results_hash_like, $filter_header_last_results_hash_ilike, $filter_header_evidence_hash, $filter_header_evidence_hash_neq, $filter_header_evidence_hash_like, $filter_header_evidence_hash_ilike, $filter_header_proposer_address, $filter_header_proposer_address_neq, $filter_header_proposer_address_like, $filter_header_proposer_address_ilike, $include, $sort);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiBlocksGet'
     *
     * @param  ApiBlocksGetFieldsBlocksParameter $fields_blocks Include the given fields in the response. (optional)
     * @param  string $filter_hash Filter the results where the [hash] field is equal to the given value. (optional)
     * @param  string $filter_hash_neq Filter the results where the [hash] field is not equal to the given value. (optional)
     * @param  string $filter_hash_like Filter the results where the [hash] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_hash_ilike Filter the results where the [hash] field is similar to the given case insensitive value. (optional)
     * @param  int $filter_height Filter the results where the [height] field is equal to the given value. (optional)
     * @param  int $filter_header_version_block Filter the results where the [header.version.block] field is equal to the given value. (optional)
     * @param  string $filter_header_chain_id Filter the results where the [header.chainId] field is equal to the given value. (optional)
     * @param  string $filter_header_chain_id_neq Filter the results where the [header.chainId] field is not equal to the given value. (optional)
     * @param  string $filter_header_chain_id_like Filter the results where the [header.chainId] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_header_chain_id_ilike Filter the results where the [header.chainId] field is similar to the given case insensitive value. (optional)
     * @param  int $filter_header_height Filter the results where the [header.height] field is equal to the given value. (optional)
     * @param  string $filter_header_time Filter the results where the [header.time] field is equal to the given value. (optional)
     * @param  string $filter_header_time_neq Filter the results where the [header.time] field is not equal to the given value. (optional)
     * @param  string $filter_header_time_like Filter the results where the [header.time] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_header_time_ilike Filter the results where the [header.time] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_header_last_block_id_hash Filter the results where the [header.lastBlockId.hash] field is equal to the given value. (optional)
     * @param  string $filter_header_last_block_id_hash_neq Filter the results where the [header.lastBlockId.hash] field is not equal to the given value. (optional)
     * @param  string $filter_header_last_block_id_hash_like Filter the results where the [header.lastBlockId.hash] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_header_last_block_id_hash_ilike Filter the results where the [header.lastBlockId.hash] field is similar to the given case insensitive value. (optional)
     * @param  int $filter_header_last_block_id_part_set_header_total Filter the results where the [header.lastBlockId.partSetHeader.total] field is equal to the given value. (optional)
     * @param  string $filter_header_last_block_id_part_set_header_hash Filter the results where the [header.lastBlockId.partSetHeader.hash] field is equal to the given value. (optional)
     * @param  string $filter_header_last_block_id_part_set_header_hash_neq Filter the results where the [header.lastBlockId.partSetHeader.hash] field is not equal to the given value. (optional)
     * @param  string $filter_header_last_block_id_part_set_header_hash_like Filter the results where the [header.lastBlockId.partSetHeader.hash] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_header_last_block_id_part_set_header_hash_ilike Filter the results where the [header.lastBlockId.partSetHeader.hash] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_header_last_commit_hash Filter the results where the [header.lastCommitHash] field is equal to the given value. (optional)
     * @param  string $filter_header_last_commit_hash_neq Filter the results where the [header.lastCommitHash] field is not equal to the given value. (optional)
     * @param  string $filter_header_last_commit_hash_like Filter the results where the [header.lastCommitHash] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_header_last_commit_hash_ilike Filter the results where the [header.lastCommitHash] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_header_data_hash Filter the results where the [header.dataHash] field is equal to the given value. (optional)
     * @param  string $filter_header_data_hash_neq Filter the results where the [header.dataHash] field is not equal to the given value. (optional)
     * @param  string $filter_header_data_hash_like Filter the results where the [header.dataHash] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_header_data_hash_ilike Filter the results where the [header.dataHash] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_header_validators_hash Filter the results where the [header.validatorsHash] field is equal to the given value. (optional)
     * @param  string $filter_header_validators_hash_neq Filter the results where the [header.validatorsHash] field is not equal to the given value. (optional)
     * @param  string $filter_header_validators_hash_like Filter the results where the [header.validatorsHash] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_header_validators_hash_ilike Filter the results where the [header.validatorsHash] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_header_next_validators_hash Filter the results where the [header.nextValidatorsHash] field is equal to the given value. (optional)
     * @param  string $filter_header_next_validators_hash_neq Filter the results where the [header.nextValidatorsHash] field is not equal to the given value. (optional)
     * @param  string $filter_header_next_validators_hash_like Filter the results where the [header.nextValidatorsHash] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_header_next_validators_hash_ilike Filter the results where the [header.nextValidatorsHash] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_header_consensus_hash Filter the results where the [header.consensusHash] field is equal to the given value. (optional)
     * @param  string $filter_header_consensus_hash_neq Filter the results where the [header.consensusHash] field is not equal to the given value. (optional)
     * @param  string $filter_header_consensus_hash_like Filter the results where the [header.consensusHash] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_header_consensus_hash_ilike Filter the results where the [header.consensusHash] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_header_app_hash Filter the results where the [header.appHash] field is equal to the given value. (optional)
     * @param  string $filter_header_app_hash_neq Filter the results where the [header.appHash] field is not equal to the given value. (optional)
     * @param  string $filter_header_app_hash_like Filter the results where the [header.appHash] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_header_app_hash_ilike Filter the results where the [header.appHash] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_header_last_results_hash Filter the results where the [header.lastResultsHash] field is equal to the given value. (optional)
     * @param  string $filter_header_last_results_hash_neq Filter the results where the [header.lastResultsHash] field is not equal to the given value. (optional)
     * @param  string $filter_header_last_results_hash_like Filter the results where the [header.lastResultsHash] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_header_last_results_hash_ilike Filter the results where the [header.lastResultsHash] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_header_evidence_hash Filter the results where the [header.evidenceHash] field is equal to the given value. (optional)
     * @param  string $filter_header_evidence_hash_neq Filter the results where the [header.evidenceHash] field is not equal to the given value. (optional)
     * @param  string $filter_header_evidence_hash_like Filter the results where the [header.evidenceHash] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_header_evidence_hash_ilike Filter the results where the [header.evidenceHash] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_header_proposer_address Filter the results where the [header.proposerAddress] field is equal to the given value. (optional)
     * @param  string $filter_header_proposer_address_neq Filter the results where the [header.proposerAddress] field is not equal to the given value. (optional)
     * @param  string $filter_header_proposer_address_like Filter the results where the [header.proposerAddress] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_header_proposer_address_ilike Filter the results where the [header.proposerAddress] field is similar to the given case insensitive value. (optional)
     * @param  ApiBlocksGetIncludeParameter $include Include the given relationships. (optional)
     * @param  ApiBlocksGetSortParameter $sort Sort the results by the given field and direction. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiBlocksGetRequest($fields_blocks = null, $filter_hash = null, $filter_hash_neq = null, $filter_hash_like = null, $filter_hash_ilike = null, $filter_height = null, $filter_header_version_block = null, $filter_header_chain_id = null, $filter_header_chain_id_neq = null, $filter_header_chain_id_like = null, $filter_header_chain_id_ilike = null, $filter_header_height = null, $filter_header_time = null, $filter_header_time_neq = null, $filter_header_time_like = null, $filter_header_time_ilike = null, $filter_header_last_block_id_hash = null, $filter_header_last_block_id_hash_neq = null, $filter_header_last_block_id_hash_like = null, $filter_header_last_block_id_hash_ilike = null, $filter_header_last_block_id_part_set_header_total = null, $filter_header_last_block_id_part_set_header_hash = null, $filter_header_last_block_id_part_set_header_hash_neq = null, $filter_header_last_block_id_part_set_header_hash_like = null, $filter_header_last_block_id_part_set_header_hash_ilike = null, $filter_header_last_commit_hash = null, $filter_header_last_commit_hash_neq = null, $filter_header_last_commit_hash_like = null, $filter_header_last_commit_hash_ilike = null, $filter_header_data_hash = null, $filter_header_data_hash_neq = null, $filter_header_data_hash_like = null, $filter_header_data_hash_ilike = null, $filter_header_validators_hash = null, $filter_header_validators_hash_neq = null, $filter_header_validators_hash_like = null, $filter_header_validators_hash_ilike = null, $filter_header_next_validators_hash = null, $filter_header_next_validators_hash_neq = null, $filter_header_next_validators_hash_like = null, $filter_header_next_validators_hash_ilike = null, $filter_header_consensus_hash = null, $filter_header_consensus_hash_neq = null, $filter_header_consensus_hash_like = null, $filter_header_consensus_hash_ilike = null, $filter_header_app_hash = null, $filter_header_app_hash_neq = null, $filter_header_app_hash_like = null, $filter_header_app_hash_ilike = null, $filter_header_last_results_hash = null, $filter_header_last_results_hash_neq = null, $filter_header_last_results_hash_like = null, $filter_header_last_results_hash_ilike = null, $filter_header_evidence_hash = null, $filter_header_evidence_hash_neq = null, $filter_header_evidence_hash_like = null, $filter_header_evidence_hash_ilike = null, $filter_header_proposer_address = null, $filter_header_proposer_address_neq = null, $filter_header_proposer_address_like = null, $filter_header_proposer_address_ilike = null, $include = null, $sort = null)
    {
































































        $resourcePath = '/api/blocks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fields_blocks,
            'fields[blocks]', // param base name
            'AnyOfStringStringStringStringString', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_hash,
            'filter[hash]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_hash_neq,
            'filter[hash.neq]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_hash_like,
            'filter[hash.like]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_hash_ilike,
            'filter[hash.ilike]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_height,
            'filter[height]', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_header_version_block,
            'filter[header.version.block]', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_header_chain_id,
            'filter[header.chainId]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_header_chain_id_neq,
            'filter[header.chainId.neq]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_header_chain_id_like,
            'filter[header.chainId.like]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_header_chain_id_ilike,
            'filter[header.chainId.ilike]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_header_height,
            'filter[header.height]', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_header_time,
            'filter[header.time]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_header_time_neq,
            'filter[header.time.neq]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_header_time_like,
            'filter[header.time.like]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_header_time_ilike,
            'filter[header.time.ilike]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_header_last_block_id_hash,
            'filter[header.lastBlockId.hash]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_header_last_block_id_hash_neq,
            'filter[header.lastBlockId.hash.neq]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_header_last_block_id_hash_like,
            'filter[header.lastBlockId.hash.like]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_header_last_block_id_hash_ilike,
            'filter[header.lastBlockId.hash.ilike]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_header_last_block_id_part_set_header_total,
            'filter[header.lastBlockId.partSetHeader.total]', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_header_last_block_id_part_set_header_hash,
            'filter[header.lastBlockId.partSetHeader.hash]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_header_last_block_id_part_set_header_hash_neq,
            'filter[header.lastBlockId.partSetHeader.hash.neq]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_header_last_block_id_part_set_header_hash_like,
            'filter[header.lastBlockId.partSetHeader.hash.like]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_header_last_block_id_part_set_header_hash_ilike,
            'filter[header.lastBlockId.partSetHeader.hash.ilike]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_header_last_commit_hash,
            'filter[header.lastCommitHash]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_header_last_commit_hash_neq,
            'filter[header.lastCommitHash.neq]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_header_last_commit_hash_like,
            'filter[header.lastCommitHash.like]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_header_last_commit_hash_ilike,
            'filter[header.lastCommitHash.ilike]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_header_data_hash,
            'filter[header.dataHash]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_header_data_hash_neq,
            'filter[header.dataHash.neq]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_header_data_hash_like,
            'filter[header.dataHash.like]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_header_data_hash_ilike,
            'filter[header.dataHash.ilike]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_header_validators_hash,
            'filter[header.validatorsHash]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_header_validators_hash_neq,
            'filter[header.validatorsHash.neq]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_header_validators_hash_like,
            'filter[header.validatorsHash.like]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_header_validators_hash_ilike,
            'filter[header.validatorsHash.ilike]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_header_next_validators_hash,
            'filter[header.nextValidatorsHash]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_header_next_validators_hash_neq,
            'filter[header.nextValidatorsHash.neq]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_header_next_validators_hash_like,
            'filter[header.nextValidatorsHash.like]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_header_next_validators_hash_ilike,
            'filter[header.nextValidatorsHash.ilike]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_header_consensus_hash,
            'filter[header.consensusHash]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_header_consensus_hash_neq,
            'filter[header.consensusHash.neq]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_header_consensus_hash_like,
            'filter[header.consensusHash.like]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_header_consensus_hash_ilike,
            'filter[header.consensusHash.ilike]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_header_app_hash,
            'filter[header.appHash]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_header_app_hash_neq,
            'filter[header.appHash.neq]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_header_app_hash_like,
            'filter[header.appHash.like]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_header_app_hash_ilike,
            'filter[header.appHash.ilike]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_header_last_results_hash,
            'filter[header.lastResultsHash]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_header_last_results_hash_neq,
            'filter[header.lastResultsHash.neq]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_header_last_results_hash_like,
            'filter[header.lastResultsHash.like]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_header_last_results_hash_ilike,
            'filter[header.lastResultsHash.ilike]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_header_evidence_hash,
            'filter[header.evidenceHash]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_header_evidence_hash_neq,
            'filter[header.evidenceHash.neq]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_header_evidence_hash_like,
            'filter[header.evidenceHash.like]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_header_evidence_hash_ilike,
            'filter[header.evidenceHash.ilike]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_header_proposer_address,
            'filter[header.proposerAddress]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_header_proposer_address_neq,
            'filter[header.proposerAddress.neq]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_header_proposer_address_like,
            'filter[header.proposerAddress.like]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_header_proposer_address_ilike,
            'filter[header.proposerAddress.ilike]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include,
            'include', // param base name
            'AnyOfString', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'AnyOfStringStringStringString', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiEntitiesGet
     *
     * List entities
     *
     * @param  ApiEntitiesGetFieldsEntitiesParameter $fields_entities Include the given fields in the response. (optional)
     * @param  string $filter_module Filter the results where the [module] field is equal to the given value. (optional)
     * @param  string $filter_module_neq Filter the results where the [module] field is not equal to the given value. (optional)
     * @param  string $filter_module_like Filter the results where the [module] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_module_ilike Filter the results where the [module] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_type Filter the results where the [type] field is equal to the given value. (optional)
     * @param  string $filter_type_neq Filter the results where the [type] field is not equal to the given value. (optional)
     * @param  string $filter_type_like Filter the results where the [type] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_type_ilike Filter the results where the [type] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_key Filter the results where the [key] field is equal to the given value. (optional)
     * @param  string $filter_key_neq Filter the results where the [key] field is not equal to the given value. (optional)
     * @param  string $filter_key_like Filter the results where the [key] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_key_ilike Filter the results where the [key] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_value Filter the results where the [value] field is equal to the given value. (optional)
     * @param  string $filter_value_neq Filter the results where the [value] field is not equal to the given value. (optional)
     * @param  string $filter_value_like Filter the results where the [value] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_value_ilike Filter the results where the [value] field is similar to the given case insensitive value. (optional)
     * @param  ApiEntitiesGetSortParameter $sort Sort the results by the given field and direction. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ApiEntitiesGet200Response
     */
    public function apiEntitiesGet($fields_entities = null, $filter_module = null, $filter_module_neq = null, $filter_module_like = null, $filter_module_ilike = null, $filter_type = null, $filter_type_neq = null, $filter_type_like = null, $filter_type_ilike = null, $filter_key = null, $filter_key_neq = null, $filter_key_like = null, $filter_key_ilike = null, $filter_value = null, $filter_value_neq = null, $filter_value_like = null, $filter_value_ilike = null, $sort = null)
    {
        list($response) = $this->apiEntitiesGetWithHttpInfo($fields_entities, $filter_module, $filter_module_neq, $filter_module_like, $filter_module_ilike, $filter_type, $filter_type_neq, $filter_type_like, $filter_type_ilike, $filter_key, $filter_key_neq, $filter_key_like, $filter_key_ilike, $filter_value, $filter_value_neq, $filter_value_like, $filter_value_ilike, $sort);
        return $response;
    }

    /**
     * Operation apiEntitiesGetWithHttpInfo
     *
     * List entities
     *
     * @param  ApiEntitiesGetFieldsEntitiesParameter $fields_entities Include the given fields in the response. (optional)
     * @param  string $filter_module Filter the results where the [module] field is equal to the given value. (optional)
     * @param  string $filter_module_neq Filter the results where the [module] field is not equal to the given value. (optional)
     * @param  string $filter_module_like Filter the results where the [module] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_module_ilike Filter the results where the [module] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_type Filter the results where the [type] field is equal to the given value. (optional)
     * @param  string $filter_type_neq Filter the results where the [type] field is not equal to the given value. (optional)
     * @param  string $filter_type_like Filter the results where the [type] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_type_ilike Filter the results where the [type] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_key Filter the results where the [key] field is equal to the given value. (optional)
     * @param  string $filter_key_neq Filter the results where the [key] field is not equal to the given value. (optional)
     * @param  string $filter_key_like Filter the results where the [key] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_key_ilike Filter the results where the [key] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_value Filter the results where the [value] field is equal to the given value. (optional)
     * @param  string $filter_value_neq Filter the results where the [value] field is not equal to the given value. (optional)
     * @param  string $filter_value_like Filter the results where the [value] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_value_ilike Filter the results where the [value] field is similar to the given case insensitive value. (optional)
     * @param  ApiEntitiesGetSortParameter $sort Sort the results by the given field and direction. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ApiEntitiesGet200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiEntitiesGetWithHttpInfo($fields_entities = null, $filter_module = null, $filter_module_neq = null, $filter_module_like = null, $filter_module_ilike = null, $filter_type = null, $filter_type_neq = null, $filter_type_like = null, $filter_type_ilike = null, $filter_key = null, $filter_key_neq = null, $filter_key_like = null, $filter_key_ilike = null, $filter_value = null, $filter_value_neq = null, $filter_value_like = null, $filter_value_ilike = null, $sort = null)
    {
        $request = $this->apiEntitiesGetRequest($fields_entities, $filter_module, $filter_module_neq, $filter_module_like, $filter_module_ilike, $filter_type, $filter_type_neq, $filter_type_like, $filter_type_ilike, $filter_key, $filter_key_neq, $filter_key_like, $filter_key_ilike, $filter_value, $filter_value_neq, $filter_value_like, $filter_value_ilike, $sort);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
            
                case 200:
                    if ('\OpenAPI\Client\Model\ApiEntitiesGet200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ApiEntitiesGet200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ApiEntitiesGet200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            }

            $returnType = '\OpenAPI\Client\Model\ApiEntitiesGet200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ApiEntitiesGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            }
            throw $e;
        }
    }

    /**
     * Operation apiEntitiesGetAsync
     *
     * List entities
     *
     * @param  ApiEntitiesGetFieldsEntitiesParameter $fields_entities Include the given fields in the response. (optional)
     * @param  string $filter_module Filter the results where the [module] field is equal to the given value. (optional)
     * @param  string $filter_module_neq Filter the results where the [module] field is not equal to the given value. (optional)
     * @param  string $filter_module_like Filter the results where the [module] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_module_ilike Filter the results where the [module] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_type Filter the results where the [type] field is equal to the given value. (optional)
     * @param  string $filter_type_neq Filter the results where the [type] field is not equal to the given value. (optional)
     * @param  string $filter_type_like Filter the results where the [type] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_type_ilike Filter the results where the [type] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_key Filter the results where the [key] field is equal to the given value. (optional)
     * @param  string $filter_key_neq Filter the results where the [key] field is not equal to the given value. (optional)
     * @param  string $filter_key_like Filter the results where the [key] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_key_ilike Filter the results where the [key] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_value Filter the results where the [value] field is equal to the given value. (optional)
     * @param  string $filter_value_neq Filter the results where the [value] field is not equal to the given value. (optional)
     * @param  string $filter_value_like Filter the results where the [value] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_value_ilike Filter the results where the [value] field is similar to the given case insensitive value. (optional)
     * @param  ApiEntitiesGetSortParameter $sort Sort the results by the given field and direction. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiEntitiesGetAsync($fields_entities = null, $filter_module = null, $filter_module_neq = null, $filter_module_like = null, $filter_module_ilike = null, $filter_type = null, $filter_type_neq = null, $filter_type_like = null, $filter_type_ilike = null, $filter_key = null, $filter_key_neq = null, $filter_key_like = null, $filter_key_ilike = null, $filter_value = null, $filter_value_neq = null, $filter_value_like = null, $filter_value_ilike = null, $sort = null)
    {
        return $this->apiEntitiesGetAsyncWithHttpInfo($fields_entities, $filter_module, $filter_module_neq, $filter_module_like, $filter_module_ilike, $filter_type, $filter_type_neq, $filter_type_like, $filter_type_ilike, $filter_key, $filter_key_neq, $filter_key_like, $filter_key_ilike, $filter_value, $filter_value_neq, $filter_value_like, $filter_value_ilike, $sort)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiEntitiesGetAsyncWithHttpInfo
     *
     * List entities
     *
     * @param  ApiEntitiesGetFieldsEntitiesParameter $fields_entities Include the given fields in the response. (optional)
     * @param  string $filter_module Filter the results where the [module] field is equal to the given value. (optional)
     * @param  string $filter_module_neq Filter the results where the [module] field is not equal to the given value. (optional)
     * @param  string $filter_module_like Filter the results where the [module] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_module_ilike Filter the results where the [module] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_type Filter the results where the [type] field is equal to the given value. (optional)
     * @param  string $filter_type_neq Filter the results where the [type] field is not equal to the given value. (optional)
     * @param  string $filter_type_like Filter the results where the [type] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_type_ilike Filter the results where the [type] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_key Filter the results where the [key] field is equal to the given value. (optional)
     * @param  string $filter_key_neq Filter the results where the [key] field is not equal to the given value. (optional)
     * @param  string $filter_key_like Filter the results where the [key] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_key_ilike Filter the results where the [key] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_value Filter the results where the [value] field is equal to the given value. (optional)
     * @param  string $filter_value_neq Filter the results where the [value] field is not equal to the given value. (optional)
     * @param  string $filter_value_like Filter the results where the [value] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_value_ilike Filter the results where the [value] field is similar to the given case insensitive value. (optional)
     * @param  ApiEntitiesGetSortParameter $sort Sort the results by the given field and direction. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiEntitiesGetAsyncWithHttpInfo($fields_entities = null, $filter_module = null, $filter_module_neq = null, $filter_module_like = null, $filter_module_ilike = null, $filter_type = null, $filter_type_neq = null, $filter_type_like = null, $filter_type_ilike = null, $filter_key = null, $filter_key_neq = null, $filter_key_like = null, $filter_key_ilike = null, $filter_value = null, $filter_value_neq = null, $filter_value_like = null, $filter_value_ilike = null, $sort = null)
    {
        $returnType = '\OpenAPI\Client\Model\ApiEntitiesGet200Response';
        $request = $this->apiEntitiesGetRequest($fields_entities, $filter_module, $filter_module_neq, $filter_module_like, $filter_module_ilike, $filter_type, $filter_type_neq, $filter_type_like, $filter_type_ilike, $filter_key, $filter_key_neq, $filter_key_like, $filter_key_ilike, $filter_value, $filter_value_neq, $filter_value_like, $filter_value_ilike, $sort);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiEntitiesGet'
     *
     * @param  ApiEntitiesGetFieldsEntitiesParameter $fields_entities Include the given fields in the response. (optional)
     * @param  string $filter_module Filter the results where the [module] field is equal to the given value. (optional)
     * @param  string $filter_module_neq Filter the results where the [module] field is not equal to the given value. (optional)
     * @param  string $filter_module_like Filter the results where the [module] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_module_ilike Filter the results where the [module] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_type Filter the results where the [type] field is equal to the given value. (optional)
     * @param  string $filter_type_neq Filter the results where the [type] field is not equal to the given value. (optional)
     * @param  string $filter_type_like Filter the results where the [type] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_type_ilike Filter the results where the [type] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_key Filter the results where the [key] field is equal to the given value. (optional)
     * @param  string $filter_key_neq Filter the results where the [key] field is not equal to the given value. (optional)
     * @param  string $filter_key_like Filter the results where the [key] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_key_ilike Filter the results where the [key] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_value Filter the results where the [value] field is equal to the given value. (optional)
     * @param  string $filter_value_neq Filter the results where the [value] field is not equal to the given value. (optional)
     * @param  string $filter_value_like Filter the results where the [value] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_value_ilike Filter the results where the [value] field is similar to the given case insensitive value. (optional)
     * @param  ApiEntitiesGetSortParameter $sort Sort the results by the given field and direction. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiEntitiesGetRequest($fields_entities = null, $filter_module = null, $filter_module_neq = null, $filter_module_like = null, $filter_module_ilike = null, $filter_type = null, $filter_type_neq = null, $filter_type_like = null, $filter_type_ilike = null, $filter_key = null, $filter_key_neq = null, $filter_key_like = null, $filter_key_ilike = null, $filter_value = null, $filter_value_neq = null, $filter_value_like = null, $filter_value_ilike = null, $sort = null)
    {



















        $resourcePath = '/api/entities';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fields_entities,
            'fields[entities]', // param base name
            'AnyOfStringStringStringString', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_module,
            'filter[module]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_module_neq,
            'filter[module.neq]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_module_like,
            'filter[module.like]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_module_ilike,
            'filter[module.ilike]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_type,
            'filter[type]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_type_neq,
            'filter[type.neq]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_type_like,
            'filter[type.like]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_type_ilike,
            'filter[type.ilike]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_key,
            'filter[key]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_key_neq,
            'filter[key.neq]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_key_like,
            'filter[key.like]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_key_ilike,
            'filter[key.ilike]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_value,
            'filter[value]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_value_neq,
            'filter[value.neq]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_value_like,
            'filter[value.like]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_value_ilike,
            'filter[value.ilike]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'AnyOfStringStringStringStringStringString', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiTransactionsGet
     *
     * List transactions
     *
     * @param  ApiTransactionsGetFieldsAccountsParameter $fields_accounts Include the given fields in the response. (optional)
     * @param  string $filter_hash Filter the results where the [hash] field is equal to the given value. (optional)
     * @param  string $filter_hash_neq Filter the results where the [hash] field is not equal to the given value. (optional)
     * @param  string $filter_hash_like Filter the results where the [hash] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_hash_ilike Filter the results where the [hash] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_sender Filter the results where the [sender] field is equal to the given value. (optional)
     * @param  string $filter_sender_neq Filter the results where the [sender] field is not equal to the given value. (optional)
     * @param  string $filter_sender_like Filter the results where the [sender] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_sender_ilike Filter the results where the [sender] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_recipient Filter the results where the [recipient] field is equal to the given value. (optional)
     * @param  string $filter_recipient_neq Filter the results where the [recipient] field is not equal to the given value. (optional)
     * @param  string $filter_recipient_like Filter the results where the [recipient] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_recipient_ilike Filter the results where the [recipient] field is similar to the given case insensitive value. (optional)
     * @param  int $filter_gas Filter the results where the [gas] field is equal to the given value. (optional)
     * @param  int $filter_nonce Filter the results where the [nonce] field is equal to the given value. (optional)
     * @param  string $filter_signature Filter the results where the [signature] field is equal to the given value. (optional)
     * @param  string $filter_signature_neq Filter the results where the [signature] field is not equal to the given value. (optional)
     * @param  string $filter_signature_like Filter the results where the [signature] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_signature_ilike Filter the results where the [signature] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_version Filter the results where the [version] field is equal to the given value. (optional)
     * @param  string $filter_version_neq Filter the results where the [version] field is not equal to the given value. (optional)
     * @param  string $filter_version_like Filter the results where the [version] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_version_ilike Filter the results where the [version] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_message_handler Filter the results where the [message.handler] field is equal to the given value. (optional)
     * @param  string $filter_message_handler_neq Filter the results where the [message.handler] field is not equal to the given value. (optional)
     * @param  string $filter_message_handler_like Filter the results where the [message.handler] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_message_handler_ilike Filter the results where the [message.handler] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_message_version Filter the results where the [message.version] field is equal to the given value. (optional)
     * @param  string $filter_message_version_neq Filter the results where the [message.version] field is not equal to the given value. (optional)
     * @param  string $filter_message_version_like Filter the results where the [message.version] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_message_version_ilike Filter the results where the [message.version] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_message_network Filter the results where the [message.network] field is equal to the given value. (optional)
     * @param  string $filter_message_network_neq Filter the results where the [message.network] field is not equal to the given value. (optional)
     * @param  string $filter_message_network_like Filter the results where the [message.network] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_message_network_ilike Filter the results where the [message.network] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_message_content Filter the results where the [message.content] field is equal to the given value. (optional)
     * @param  string $filter_message_content_neq Filter the results where the [message.content] field is not equal to the given value. (optional)
     * @param  string $filter_message_content_like Filter the results where the [message.content] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_message_content_ilike Filter the results where the [message.content] field is similar to the given case insensitive value. (optional)
     * @param  ApiTransactionsGetIncludeParameter $include Include the given relationships. (optional)
     * @param  ApiTransactionsGetSortParameter $sort Sort the results by the given field and direction. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ApiTransactionsGet200Response
     */
    public function apiTransactionsGet($fields_accounts = null, $filter_hash = null, $filter_hash_neq = null, $filter_hash_like = null, $filter_hash_ilike = null, $filter_sender = null, $filter_sender_neq = null, $filter_sender_like = null, $filter_sender_ilike = null, $filter_recipient = null, $filter_recipient_neq = null, $filter_recipient_like = null, $filter_recipient_ilike = null, $filter_gas = null, $filter_nonce = null, $filter_signature = null, $filter_signature_neq = null, $filter_signature_like = null, $filter_signature_ilike = null, $filter_version = null, $filter_version_neq = null, $filter_version_like = null, $filter_version_ilike = null, $filter_message_handler = null, $filter_message_handler_neq = null, $filter_message_handler_like = null, $filter_message_handler_ilike = null, $filter_message_version = null, $filter_message_version_neq = null, $filter_message_version_like = null, $filter_message_version_ilike = null, $filter_message_network = null, $filter_message_network_neq = null, $filter_message_network_like = null, $filter_message_network_ilike = null, $filter_message_content = null, $filter_message_content_neq = null, $filter_message_content_like = null, $filter_message_content_ilike = null, $include = null, $sort = null)
    {
        list($response) = $this->apiTransactionsGetWithHttpInfo($fields_accounts, $filter_hash, $filter_hash_neq, $filter_hash_like, $filter_hash_ilike, $filter_sender, $filter_sender_neq, $filter_sender_like, $filter_sender_ilike, $filter_recipient, $filter_recipient_neq, $filter_recipient_like, $filter_recipient_ilike, $filter_gas, $filter_nonce, $filter_signature, $filter_signature_neq, $filter_signature_like, $filter_signature_ilike, $filter_version, $filter_version_neq, $filter_version_like, $filter_version_ilike, $filter_message_handler, $filter_message_handler_neq, $filter_message_handler_like, $filter_message_handler_ilike, $filter_message_version, $filter_message_version_neq, $filter_message_version_like, $filter_message_version_ilike, $filter_message_network, $filter_message_network_neq, $filter_message_network_like, $filter_message_network_ilike, $filter_message_content, $filter_message_content_neq, $filter_message_content_like, $filter_message_content_ilike, $include, $sort);
        return $response;
    }

    /**
     * Operation apiTransactionsGetWithHttpInfo
     *
     * List transactions
     *
     * @param  ApiTransactionsGetFieldsAccountsParameter $fields_accounts Include the given fields in the response. (optional)
     * @param  string $filter_hash Filter the results where the [hash] field is equal to the given value. (optional)
     * @param  string $filter_hash_neq Filter the results where the [hash] field is not equal to the given value. (optional)
     * @param  string $filter_hash_like Filter the results where the [hash] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_hash_ilike Filter the results where the [hash] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_sender Filter the results where the [sender] field is equal to the given value. (optional)
     * @param  string $filter_sender_neq Filter the results where the [sender] field is not equal to the given value. (optional)
     * @param  string $filter_sender_like Filter the results where the [sender] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_sender_ilike Filter the results where the [sender] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_recipient Filter the results where the [recipient] field is equal to the given value. (optional)
     * @param  string $filter_recipient_neq Filter the results where the [recipient] field is not equal to the given value. (optional)
     * @param  string $filter_recipient_like Filter the results where the [recipient] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_recipient_ilike Filter the results where the [recipient] field is similar to the given case insensitive value. (optional)
     * @param  int $filter_gas Filter the results where the [gas] field is equal to the given value. (optional)
     * @param  int $filter_nonce Filter the results where the [nonce] field is equal to the given value. (optional)
     * @param  string $filter_signature Filter the results where the [signature] field is equal to the given value. (optional)
     * @param  string $filter_signature_neq Filter the results where the [signature] field is not equal to the given value. (optional)
     * @param  string $filter_signature_like Filter the results where the [signature] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_signature_ilike Filter the results where the [signature] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_version Filter the results where the [version] field is equal to the given value. (optional)
     * @param  string $filter_version_neq Filter the results where the [version] field is not equal to the given value. (optional)
     * @param  string $filter_version_like Filter the results where the [version] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_version_ilike Filter the results where the [version] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_message_handler Filter the results where the [message.handler] field is equal to the given value. (optional)
     * @param  string $filter_message_handler_neq Filter the results where the [message.handler] field is not equal to the given value. (optional)
     * @param  string $filter_message_handler_like Filter the results where the [message.handler] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_message_handler_ilike Filter the results where the [message.handler] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_message_version Filter the results where the [message.version] field is equal to the given value. (optional)
     * @param  string $filter_message_version_neq Filter the results where the [message.version] field is not equal to the given value. (optional)
     * @param  string $filter_message_version_like Filter the results where the [message.version] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_message_version_ilike Filter the results where the [message.version] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_message_network Filter the results where the [message.network] field is equal to the given value. (optional)
     * @param  string $filter_message_network_neq Filter the results where the [message.network] field is not equal to the given value. (optional)
     * @param  string $filter_message_network_like Filter the results where the [message.network] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_message_network_ilike Filter the results where the [message.network] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_message_content Filter the results where the [message.content] field is equal to the given value. (optional)
     * @param  string $filter_message_content_neq Filter the results where the [message.content] field is not equal to the given value. (optional)
     * @param  string $filter_message_content_like Filter the results where the [message.content] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_message_content_ilike Filter the results where the [message.content] field is similar to the given case insensitive value. (optional)
     * @param  ApiTransactionsGetIncludeParameter $include Include the given relationships. (optional)
     * @param  ApiTransactionsGetSortParameter $sort Sort the results by the given field and direction. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ApiTransactionsGet200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiTransactionsGetWithHttpInfo($fields_accounts = null, $filter_hash = null, $filter_hash_neq = null, $filter_hash_like = null, $filter_hash_ilike = null, $filter_sender = null, $filter_sender_neq = null, $filter_sender_like = null, $filter_sender_ilike = null, $filter_recipient = null, $filter_recipient_neq = null, $filter_recipient_like = null, $filter_recipient_ilike = null, $filter_gas = null, $filter_nonce = null, $filter_signature = null, $filter_signature_neq = null, $filter_signature_like = null, $filter_signature_ilike = null, $filter_version = null, $filter_version_neq = null, $filter_version_like = null, $filter_version_ilike = null, $filter_message_handler = null, $filter_message_handler_neq = null, $filter_message_handler_like = null, $filter_message_handler_ilike = null, $filter_message_version = null, $filter_message_version_neq = null, $filter_message_version_like = null, $filter_message_version_ilike = null, $filter_message_network = null, $filter_message_network_neq = null, $filter_message_network_like = null, $filter_message_network_ilike = null, $filter_message_content = null, $filter_message_content_neq = null, $filter_message_content_like = null, $filter_message_content_ilike = null, $include = null, $sort = null)
    {
        $request = $this->apiTransactionsGetRequest($fields_accounts, $filter_hash, $filter_hash_neq, $filter_hash_like, $filter_hash_ilike, $filter_sender, $filter_sender_neq, $filter_sender_like, $filter_sender_ilike, $filter_recipient, $filter_recipient_neq, $filter_recipient_like, $filter_recipient_ilike, $filter_gas, $filter_nonce, $filter_signature, $filter_signature_neq, $filter_signature_like, $filter_signature_ilike, $filter_version, $filter_version_neq, $filter_version_like, $filter_version_ilike, $filter_message_handler, $filter_message_handler_neq, $filter_message_handler_like, $filter_message_handler_ilike, $filter_message_version, $filter_message_version_neq, $filter_message_version_like, $filter_message_version_ilike, $filter_message_network, $filter_message_network_neq, $filter_message_network_like, $filter_message_network_ilike, $filter_message_content, $filter_message_content_neq, $filter_message_content_like, $filter_message_content_ilike, $include, $sort);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
            
                case 200:
                    if ('\OpenAPI\Client\Model\ApiTransactionsGet200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ApiTransactionsGet200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ApiTransactionsGet200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            }

            $returnType = '\OpenAPI\Client\Model\ApiTransactionsGet200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ApiTransactionsGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            }
            throw $e;
        }
    }

    /**
     * Operation apiTransactionsGetAsync
     *
     * List transactions
     *
     * @param  ApiTransactionsGetFieldsAccountsParameter $fields_accounts Include the given fields in the response. (optional)
     * @param  string $filter_hash Filter the results where the [hash] field is equal to the given value. (optional)
     * @param  string $filter_hash_neq Filter the results where the [hash] field is not equal to the given value. (optional)
     * @param  string $filter_hash_like Filter the results where the [hash] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_hash_ilike Filter the results where the [hash] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_sender Filter the results where the [sender] field is equal to the given value. (optional)
     * @param  string $filter_sender_neq Filter the results where the [sender] field is not equal to the given value. (optional)
     * @param  string $filter_sender_like Filter the results where the [sender] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_sender_ilike Filter the results where the [sender] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_recipient Filter the results where the [recipient] field is equal to the given value. (optional)
     * @param  string $filter_recipient_neq Filter the results where the [recipient] field is not equal to the given value. (optional)
     * @param  string $filter_recipient_like Filter the results where the [recipient] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_recipient_ilike Filter the results where the [recipient] field is similar to the given case insensitive value. (optional)
     * @param  int $filter_gas Filter the results where the [gas] field is equal to the given value. (optional)
     * @param  int $filter_nonce Filter the results where the [nonce] field is equal to the given value. (optional)
     * @param  string $filter_signature Filter the results where the [signature] field is equal to the given value. (optional)
     * @param  string $filter_signature_neq Filter the results where the [signature] field is not equal to the given value. (optional)
     * @param  string $filter_signature_like Filter the results where the [signature] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_signature_ilike Filter the results where the [signature] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_version Filter the results where the [version] field is equal to the given value. (optional)
     * @param  string $filter_version_neq Filter the results where the [version] field is not equal to the given value. (optional)
     * @param  string $filter_version_like Filter the results where the [version] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_version_ilike Filter the results where the [version] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_message_handler Filter the results where the [message.handler] field is equal to the given value. (optional)
     * @param  string $filter_message_handler_neq Filter the results where the [message.handler] field is not equal to the given value. (optional)
     * @param  string $filter_message_handler_like Filter the results where the [message.handler] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_message_handler_ilike Filter the results where the [message.handler] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_message_version Filter the results where the [message.version] field is equal to the given value. (optional)
     * @param  string $filter_message_version_neq Filter the results where the [message.version] field is not equal to the given value. (optional)
     * @param  string $filter_message_version_like Filter the results where the [message.version] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_message_version_ilike Filter the results where the [message.version] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_message_network Filter the results where the [message.network] field is equal to the given value. (optional)
     * @param  string $filter_message_network_neq Filter the results where the [message.network] field is not equal to the given value. (optional)
     * @param  string $filter_message_network_like Filter the results where the [message.network] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_message_network_ilike Filter the results where the [message.network] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_message_content Filter the results where the [message.content] field is equal to the given value. (optional)
     * @param  string $filter_message_content_neq Filter the results where the [message.content] field is not equal to the given value. (optional)
     * @param  string $filter_message_content_like Filter the results where the [message.content] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_message_content_ilike Filter the results where the [message.content] field is similar to the given case insensitive value. (optional)
     * @param  ApiTransactionsGetIncludeParameter $include Include the given relationships. (optional)
     * @param  ApiTransactionsGetSortParameter $sort Sort the results by the given field and direction. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTransactionsGetAsync($fields_accounts = null, $filter_hash = null, $filter_hash_neq = null, $filter_hash_like = null, $filter_hash_ilike = null, $filter_sender = null, $filter_sender_neq = null, $filter_sender_like = null, $filter_sender_ilike = null, $filter_recipient = null, $filter_recipient_neq = null, $filter_recipient_like = null, $filter_recipient_ilike = null, $filter_gas = null, $filter_nonce = null, $filter_signature = null, $filter_signature_neq = null, $filter_signature_like = null, $filter_signature_ilike = null, $filter_version = null, $filter_version_neq = null, $filter_version_like = null, $filter_version_ilike = null, $filter_message_handler = null, $filter_message_handler_neq = null, $filter_message_handler_like = null, $filter_message_handler_ilike = null, $filter_message_version = null, $filter_message_version_neq = null, $filter_message_version_like = null, $filter_message_version_ilike = null, $filter_message_network = null, $filter_message_network_neq = null, $filter_message_network_like = null, $filter_message_network_ilike = null, $filter_message_content = null, $filter_message_content_neq = null, $filter_message_content_like = null, $filter_message_content_ilike = null, $include = null, $sort = null)
    {
        return $this->apiTransactionsGetAsyncWithHttpInfo($fields_accounts, $filter_hash, $filter_hash_neq, $filter_hash_like, $filter_hash_ilike, $filter_sender, $filter_sender_neq, $filter_sender_like, $filter_sender_ilike, $filter_recipient, $filter_recipient_neq, $filter_recipient_like, $filter_recipient_ilike, $filter_gas, $filter_nonce, $filter_signature, $filter_signature_neq, $filter_signature_like, $filter_signature_ilike, $filter_version, $filter_version_neq, $filter_version_like, $filter_version_ilike, $filter_message_handler, $filter_message_handler_neq, $filter_message_handler_like, $filter_message_handler_ilike, $filter_message_version, $filter_message_version_neq, $filter_message_version_like, $filter_message_version_ilike, $filter_message_network, $filter_message_network_neq, $filter_message_network_like, $filter_message_network_ilike, $filter_message_content, $filter_message_content_neq, $filter_message_content_like, $filter_message_content_ilike, $include, $sort)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiTransactionsGetAsyncWithHttpInfo
     *
     * List transactions
     *
     * @param  ApiTransactionsGetFieldsAccountsParameter $fields_accounts Include the given fields in the response. (optional)
     * @param  string $filter_hash Filter the results where the [hash] field is equal to the given value. (optional)
     * @param  string $filter_hash_neq Filter the results where the [hash] field is not equal to the given value. (optional)
     * @param  string $filter_hash_like Filter the results where the [hash] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_hash_ilike Filter the results where the [hash] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_sender Filter the results where the [sender] field is equal to the given value. (optional)
     * @param  string $filter_sender_neq Filter the results where the [sender] field is not equal to the given value. (optional)
     * @param  string $filter_sender_like Filter the results where the [sender] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_sender_ilike Filter the results where the [sender] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_recipient Filter the results where the [recipient] field is equal to the given value. (optional)
     * @param  string $filter_recipient_neq Filter the results where the [recipient] field is not equal to the given value. (optional)
     * @param  string $filter_recipient_like Filter the results where the [recipient] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_recipient_ilike Filter the results where the [recipient] field is similar to the given case insensitive value. (optional)
     * @param  int $filter_gas Filter the results where the [gas] field is equal to the given value. (optional)
     * @param  int $filter_nonce Filter the results where the [nonce] field is equal to the given value. (optional)
     * @param  string $filter_signature Filter the results where the [signature] field is equal to the given value. (optional)
     * @param  string $filter_signature_neq Filter the results where the [signature] field is not equal to the given value. (optional)
     * @param  string $filter_signature_like Filter the results where the [signature] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_signature_ilike Filter the results where the [signature] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_version Filter the results where the [version] field is equal to the given value. (optional)
     * @param  string $filter_version_neq Filter the results where the [version] field is not equal to the given value. (optional)
     * @param  string $filter_version_like Filter the results where the [version] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_version_ilike Filter the results where the [version] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_message_handler Filter the results where the [message.handler] field is equal to the given value. (optional)
     * @param  string $filter_message_handler_neq Filter the results where the [message.handler] field is not equal to the given value. (optional)
     * @param  string $filter_message_handler_like Filter the results where the [message.handler] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_message_handler_ilike Filter the results where the [message.handler] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_message_version Filter the results where the [message.version] field is equal to the given value. (optional)
     * @param  string $filter_message_version_neq Filter the results where the [message.version] field is not equal to the given value. (optional)
     * @param  string $filter_message_version_like Filter the results where the [message.version] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_message_version_ilike Filter the results where the [message.version] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_message_network Filter the results where the [message.network] field is equal to the given value. (optional)
     * @param  string $filter_message_network_neq Filter the results where the [message.network] field is not equal to the given value. (optional)
     * @param  string $filter_message_network_like Filter the results where the [message.network] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_message_network_ilike Filter the results where the [message.network] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_message_content Filter the results where the [message.content] field is equal to the given value. (optional)
     * @param  string $filter_message_content_neq Filter the results where the [message.content] field is not equal to the given value. (optional)
     * @param  string $filter_message_content_like Filter the results where the [message.content] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_message_content_ilike Filter the results where the [message.content] field is similar to the given case insensitive value. (optional)
     * @param  ApiTransactionsGetIncludeParameter $include Include the given relationships. (optional)
     * @param  ApiTransactionsGetSortParameter $sort Sort the results by the given field and direction. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTransactionsGetAsyncWithHttpInfo($fields_accounts = null, $filter_hash = null, $filter_hash_neq = null, $filter_hash_like = null, $filter_hash_ilike = null, $filter_sender = null, $filter_sender_neq = null, $filter_sender_like = null, $filter_sender_ilike = null, $filter_recipient = null, $filter_recipient_neq = null, $filter_recipient_like = null, $filter_recipient_ilike = null, $filter_gas = null, $filter_nonce = null, $filter_signature = null, $filter_signature_neq = null, $filter_signature_like = null, $filter_signature_ilike = null, $filter_version = null, $filter_version_neq = null, $filter_version_like = null, $filter_version_ilike = null, $filter_message_handler = null, $filter_message_handler_neq = null, $filter_message_handler_like = null, $filter_message_handler_ilike = null, $filter_message_version = null, $filter_message_version_neq = null, $filter_message_version_like = null, $filter_message_version_ilike = null, $filter_message_network = null, $filter_message_network_neq = null, $filter_message_network_like = null, $filter_message_network_ilike = null, $filter_message_content = null, $filter_message_content_neq = null, $filter_message_content_like = null, $filter_message_content_ilike = null, $include = null, $sort = null)
    {
        $returnType = '\OpenAPI\Client\Model\ApiTransactionsGet200Response';
        $request = $this->apiTransactionsGetRequest($fields_accounts, $filter_hash, $filter_hash_neq, $filter_hash_like, $filter_hash_ilike, $filter_sender, $filter_sender_neq, $filter_sender_like, $filter_sender_ilike, $filter_recipient, $filter_recipient_neq, $filter_recipient_like, $filter_recipient_ilike, $filter_gas, $filter_nonce, $filter_signature, $filter_signature_neq, $filter_signature_like, $filter_signature_ilike, $filter_version, $filter_version_neq, $filter_version_like, $filter_version_ilike, $filter_message_handler, $filter_message_handler_neq, $filter_message_handler_like, $filter_message_handler_ilike, $filter_message_version, $filter_message_version_neq, $filter_message_version_like, $filter_message_version_ilike, $filter_message_network, $filter_message_network_neq, $filter_message_network_like, $filter_message_network_ilike, $filter_message_content, $filter_message_content_neq, $filter_message_content_like, $filter_message_content_ilike, $include, $sort);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiTransactionsGet'
     *
     * @param  ApiTransactionsGetFieldsAccountsParameter $fields_accounts Include the given fields in the response. (optional)
     * @param  string $filter_hash Filter the results where the [hash] field is equal to the given value. (optional)
     * @param  string $filter_hash_neq Filter the results where the [hash] field is not equal to the given value. (optional)
     * @param  string $filter_hash_like Filter the results where the [hash] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_hash_ilike Filter the results where the [hash] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_sender Filter the results where the [sender] field is equal to the given value. (optional)
     * @param  string $filter_sender_neq Filter the results where the [sender] field is not equal to the given value. (optional)
     * @param  string $filter_sender_like Filter the results where the [sender] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_sender_ilike Filter the results where the [sender] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_recipient Filter the results where the [recipient] field is equal to the given value. (optional)
     * @param  string $filter_recipient_neq Filter the results where the [recipient] field is not equal to the given value. (optional)
     * @param  string $filter_recipient_like Filter the results where the [recipient] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_recipient_ilike Filter the results where the [recipient] field is similar to the given case insensitive value. (optional)
     * @param  int $filter_gas Filter the results where the [gas] field is equal to the given value. (optional)
     * @param  int $filter_nonce Filter the results where the [nonce] field is equal to the given value. (optional)
     * @param  string $filter_signature Filter the results where the [signature] field is equal to the given value. (optional)
     * @param  string $filter_signature_neq Filter the results where the [signature] field is not equal to the given value. (optional)
     * @param  string $filter_signature_like Filter the results where the [signature] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_signature_ilike Filter the results where the [signature] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_version Filter the results where the [version] field is equal to the given value. (optional)
     * @param  string $filter_version_neq Filter the results where the [version] field is not equal to the given value. (optional)
     * @param  string $filter_version_like Filter the results where the [version] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_version_ilike Filter the results where the [version] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_message_handler Filter the results where the [message.handler] field is equal to the given value. (optional)
     * @param  string $filter_message_handler_neq Filter the results where the [message.handler] field is not equal to the given value. (optional)
     * @param  string $filter_message_handler_like Filter the results where the [message.handler] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_message_handler_ilike Filter the results where the [message.handler] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_message_version Filter the results where the [message.version] field is equal to the given value. (optional)
     * @param  string $filter_message_version_neq Filter the results where the [message.version] field is not equal to the given value. (optional)
     * @param  string $filter_message_version_like Filter the results where the [message.version] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_message_version_ilike Filter the results where the [message.version] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_message_network Filter the results where the [message.network] field is equal to the given value. (optional)
     * @param  string $filter_message_network_neq Filter the results where the [message.network] field is not equal to the given value. (optional)
     * @param  string $filter_message_network_like Filter the results where the [message.network] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_message_network_ilike Filter the results where the [message.network] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_message_content Filter the results where the [message.content] field is equal to the given value. (optional)
     * @param  string $filter_message_content_neq Filter the results where the [message.content] field is not equal to the given value. (optional)
     * @param  string $filter_message_content_like Filter the results where the [message.content] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_message_content_ilike Filter the results where the [message.content] field is similar to the given case insensitive value. (optional)
     * @param  ApiTransactionsGetIncludeParameter $include Include the given relationships. (optional)
     * @param  ApiTransactionsGetSortParameter $sort Sort the results by the given field and direction. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiTransactionsGetRequest($fields_accounts = null, $filter_hash = null, $filter_hash_neq = null, $filter_hash_like = null, $filter_hash_ilike = null, $filter_sender = null, $filter_sender_neq = null, $filter_sender_like = null, $filter_sender_ilike = null, $filter_recipient = null, $filter_recipient_neq = null, $filter_recipient_like = null, $filter_recipient_ilike = null, $filter_gas = null, $filter_nonce = null, $filter_signature = null, $filter_signature_neq = null, $filter_signature_like = null, $filter_signature_ilike = null, $filter_version = null, $filter_version_neq = null, $filter_version_like = null, $filter_version_ilike = null, $filter_message_handler = null, $filter_message_handler_neq = null, $filter_message_handler_like = null, $filter_message_handler_ilike = null, $filter_message_version = null, $filter_message_version_neq = null, $filter_message_version_like = null, $filter_message_version_ilike = null, $filter_message_network = null, $filter_message_network_neq = null, $filter_message_network_like = null, $filter_message_network_ilike = null, $filter_message_content = null, $filter_message_content_neq = null, $filter_message_content_like = null, $filter_message_content_ilike = null, $include = null, $sort = null)
    {










































        $resourcePath = '/api/transactions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fields_accounts,
            'fields[accounts]', // param base name
            'AnyOfStringStringStringStringStringStringStringStringString', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_hash,
            'filter[hash]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_hash_neq,
            'filter[hash.neq]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_hash_like,
            'filter[hash.like]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_hash_ilike,
            'filter[hash.ilike]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_sender,
            'filter[sender]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_sender_neq,
            'filter[sender.neq]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_sender_like,
            'filter[sender.like]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_sender_ilike,
            'filter[sender.ilike]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_recipient,
            'filter[recipient]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_recipient_neq,
            'filter[recipient.neq]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_recipient_like,
            'filter[recipient.like]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_recipient_ilike,
            'filter[recipient.ilike]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_gas,
            'filter[gas]', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_nonce,
            'filter[nonce]', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_signature,
            'filter[signature]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_signature_neq,
            'filter[signature.neq]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_signature_like,
            'filter[signature.like]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_signature_ilike,
            'filter[signature.ilike]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_version,
            'filter[version]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_version_neq,
            'filter[version.neq]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_version_like,
            'filter[version.like]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_version_ilike,
            'filter[version.ilike]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_message_handler,
            'filter[message.handler]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_message_handler_neq,
            'filter[message.handler.neq]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_message_handler_like,
            'filter[message.handler.like]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_message_handler_ilike,
            'filter[message.handler.ilike]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_message_version,
            'filter[message.version]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_message_version_neq,
            'filter[message.version.neq]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_message_version_like,
            'filter[message.version.like]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_message_version_ilike,
            'filter[message.version.ilike]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_message_network,
            'filter[message.network]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_message_network_neq,
            'filter[message.network.neq]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_message_network_like,
            'filter[message.network.like]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_message_network_ilike,
            'filter[message.network.ilike]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_message_content,
            'filter[message.content]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_message_content_neq,
            'filter[message.content.neq]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_message_content_like,
            'filter[message.content.like]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_message_content_ilike,
            'filter[message.content.ilike]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include,
            'include', // param base name
            'AnyOfStringStringStringStringString', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'AnyOfStringStringStringStringStringStringStringStringStringString', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiTransactionsMetadataGet
     *
     * List transaction metadata
     *
     * @param  ApiTransactionsMetadataGetFieldsTransactionMetadataParameter $fields_transaction_metadata Include the given fields in the response. (optional)
     * @param  int $filter_transaction_id Filter the results where the [transaction_id] field is equal to the given value. (optional)
     * @param  string $filter_key Filter the results where the [key] field is equal to the given value. (optional)
     * @param  string $filter_key_neq Filter the results where the [key] field is not equal to the given value. (optional)
     * @param  string $filter_key_like Filter the results where the [key] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_key_ilike Filter the results where the [key] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_value Filter the results where the [value] field is equal to the given value. (optional)
     * @param  string $filter_value_neq Filter the results where the [value] field is not equal to the given value. (optional)
     * @param  string $filter_value_like Filter the results where the [value] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_value_ilike Filter the results where the [value] field is similar to the given case insensitive value. (optional)
     * @param  ApiTransactionsMetadataGetIncludeParameter $include Include the given relationships. (optional)
     * @param  ApiTransactionsMetadataGetSortParameter $sort Sort the results by the given field and direction. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ApiTransactionsMetadataGet200Response
     */
    public function apiTransactionsMetadataGet($fields_transaction_metadata = null, $filter_transaction_id = null, $filter_key = null, $filter_key_neq = null, $filter_key_like = null, $filter_key_ilike = null, $filter_value = null, $filter_value_neq = null, $filter_value_like = null, $filter_value_ilike = null, $include = null, $sort = null)
    {
        list($response) = $this->apiTransactionsMetadataGetWithHttpInfo($fields_transaction_metadata, $filter_transaction_id, $filter_key, $filter_key_neq, $filter_key_like, $filter_key_ilike, $filter_value, $filter_value_neq, $filter_value_like, $filter_value_ilike, $include, $sort);
        return $response;
    }

    /**
     * Operation apiTransactionsMetadataGetWithHttpInfo
     *
     * List transaction metadata
     *
     * @param  ApiTransactionsMetadataGetFieldsTransactionMetadataParameter $fields_transaction_metadata Include the given fields in the response. (optional)
     * @param  int $filter_transaction_id Filter the results where the [transaction_id] field is equal to the given value. (optional)
     * @param  string $filter_key Filter the results where the [key] field is equal to the given value. (optional)
     * @param  string $filter_key_neq Filter the results where the [key] field is not equal to the given value. (optional)
     * @param  string $filter_key_like Filter the results where the [key] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_key_ilike Filter the results where the [key] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_value Filter the results where the [value] field is equal to the given value. (optional)
     * @param  string $filter_value_neq Filter the results where the [value] field is not equal to the given value. (optional)
     * @param  string $filter_value_like Filter the results where the [value] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_value_ilike Filter the results where the [value] field is similar to the given case insensitive value. (optional)
     * @param  ApiTransactionsMetadataGetIncludeParameter $include Include the given relationships. (optional)
     * @param  ApiTransactionsMetadataGetSortParameter $sort Sort the results by the given field and direction. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ApiTransactionsMetadataGet200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiTransactionsMetadataGetWithHttpInfo($fields_transaction_metadata = null, $filter_transaction_id = null, $filter_key = null, $filter_key_neq = null, $filter_key_like = null, $filter_key_ilike = null, $filter_value = null, $filter_value_neq = null, $filter_value_like = null, $filter_value_ilike = null, $include = null, $sort = null)
    {
        $request = $this->apiTransactionsMetadataGetRequest($fields_transaction_metadata, $filter_transaction_id, $filter_key, $filter_key_neq, $filter_key_like, $filter_key_ilike, $filter_value, $filter_value_neq, $filter_value_like, $filter_value_ilike, $include, $sort);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
            
                case 200:
                    if ('\OpenAPI\Client\Model\ApiTransactionsMetadataGet200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ApiTransactionsMetadataGet200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ApiTransactionsMetadataGet200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            }

            $returnType = '\OpenAPI\Client\Model\ApiTransactionsMetadataGet200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ApiTransactionsMetadataGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            }
            throw $e;
        }
    }

    /**
     * Operation apiTransactionsMetadataGetAsync
     *
     * List transaction metadata
     *
     * @param  ApiTransactionsMetadataGetFieldsTransactionMetadataParameter $fields_transaction_metadata Include the given fields in the response. (optional)
     * @param  int $filter_transaction_id Filter the results where the [transaction_id] field is equal to the given value. (optional)
     * @param  string $filter_key Filter the results where the [key] field is equal to the given value. (optional)
     * @param  string $filter_key_neq Filter the results where the [key] field is not equal to the given value. (optional)
     * @param  string $filter_key_like Filter the results where the [key] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_key_ilike Filter the results where the [key] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_value Filter the results where the [value] field is equal to the given value. (optional)
     * @param  string $filter_value_neq Filter the results where the [value] field is not equal to the given value. (optional)
     * @param  string $filter_value_like Filter the results where the [value] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_value_ilike Filter the results where the [value] field is similar to the given case insensitive value. (optional)
     * @param  ApiTransactionsMetadataGetIncludeParameter $include Include the given relationships. (optional)
     * @param  ApiTransactionsMetadataGetSortParameter $sort Sort the results by the given field and direction. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTransactionsMetadataGetAsync($fields_transaction_metadata = null, $filter_transaction_id = null, $filter_key = null, $filter_key_neq = null, $filter_key_like = null, $filter_key_ilike = null, $filter_value = null, $filter_value_neq = null, $filter_value_like = null, $filter_value_ilike = null, $include = null, $sort = null)
    {
        return $this->apiTransactionsMetadataGetAsyncWithHttpInfo($fields_transaction_metadata, $filter_transaction_id, $filter_key, $filter_key_neq, $filter_key_like, $filter_key_ilike, $filter_value, $filter_value_neq, $filter_value_like, $filter_value_ilike, $include, $sort)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiTransactionsMetadataGetAsyncWithHttpInfo
     *
     * List transaction metadata
     *
     * @param  ApiTransactionsMetadataGetFieldsTransactionMetadataParameter $fields_transaction_metadata Include the given fields in the response. (optional)
     * @param  int $filter_transaction_id Filter the results where the [transaction_id] field is equal to the given value. (optional)
     * @param  string $filter_key Filter the results where the [key] field is equal to the given value. (optional)
     * @param  string $filter_key_neq Filter the results where the [key] field is not equal to the given value. (optional)
     * @param  string $filter_key_like Filter the results where the [key] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_key_ilike Filter the results where the [key] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_value Filter the results where the [value] field is equal to the given value. (optional)
     * @param  string $filter_value_neq Filter the results where the [value] field is not equal to the given value. (optional)
     * @param  string $filter_value_like Filter the results where the [value] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_value_ilike Filter the results where the [value] field is similar to the given case insensitive value. (optional)
     * @param  ApiTransactionsMetadataGetIncludeParameter $include Include the given relationships. (optional)
     * @param  ApiTransactionsMetadataGetSortParameter $sort Sort the results by the given field and direction. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTransactionsMetadataGetAsyncWithHttpInfo($fields_transaction_metadata = null, $filter_transaction_id = null, $filter_key = null, $filter_key_neq = null, $filter_key_like = null, $filter_key_ilike = null, $filter_value = null, $filter_value_neq = null, $filter_value_like = null, $filter_value_ilike = null, $include = null, $sort = null)
    {
        $returnType = '\OpenAPI\Client\Model\ApiTransactionsMetadataGet200Response';
        $request = $this->apiTransactionsMetadataGetRequest($fields_transaction_metadata, $filter_transaction_id, $filter_key, $filter_key_neq, $filter_key_like, $filter_key_ilike, $filter_value, $filter_value_neq, $filter_value_like, $filter_value_ilike, $include, $sort);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiTransactionsMetadataGet'
     *
     * @param  ApiTransactionsMetadataGetFieldsTransactionMetadataParameter $fields_transaction_metadata Include the given fields in the response. (optional)
     * @param  int $filter_transaction_id Filter the results where the [transaction_id] field is equal to the given value. (optional)
     * @param  string $filter_key Filter the results where the [key] field is equal to the given value. (optional)
     * @param  string $filter_key_neq Filter the results where the [key] field is not equal to the given value. (optional)
     * @param  string $filter_key_like Filter the results where the [key] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_key_ilike Filter the results where the [key] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_value Filter the results where the [value] field is equal to the given value. (optional)
     * @param  string $filter_value_neq Filter the results where the [value] field is not equal to the given value. (optional)
     * @param  string $filter_value_like Filter the results where the [value] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_value_ilike Filter the results where the [value] field is similar to the given case insensitive value. (optional)
     * @param  ApiTransactionsMetadataGetIncludeParameter $include Include the given relationships. (optional)
     * @param  ApiTransactionsMetadataGetSortParameter $sort Sort the results by the given field and direction. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiTransactionsMetadataGetRequest($fields_transaction_metadata = null, $filter_transaction_id = null, $filter_key = null, $filter_key_neq = null, $filter_key_like = null, $filter_key_ilike = null, $filter_value = null, $filter_value_neq = null, $filter_value_like = null, $filter_value_ilike = null, $include = null, $sort = null)
    {













        $resourcePath = '/api/transactions/metadata';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fields_transaction_metadata,
            'fields[transaction_metadata]', // param base name
            'AnyOfStringStringString', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_transaction_id,
            'filter[transaction_id]', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_key,
            'filter[key]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_key_neq,
            'filter[key.neq]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_key_like,
            'filter[key.like]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_key_ilike,
            'filter[key.ilike]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_value,
            'filter[value]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_value_neq,
            'filter[value.neq]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_value_like,
            'filter[value.like]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_value_ilike,
            'filter[value.ilike]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include,
            'include', // param base name
            'AnyOfString', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'AnyOfStringStringStringStringStringStringStringString', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiTransactionsReceiptsGet
     *
     * List transaction receipts
     *
     * @param  ApiTransactionsReceiptsGetFieldsTransactionReceiptsParameter $fields_transaction_receipts Include the given fields in the response. (optional)
     * @param  int $filter_transaction_id Filter the results where the [transaction_id] field is equal to the given value. (optional)
     * @param  string $filter_block_hash Filter the results where the [block_hash] field is equal to the given value. (optional)
     * @param  string $filter_block_hash_neq Filter the results where the [block_hash] field is not equal to the given value. (optional)
     * @param  string $filter_block_hash_like Filter the results where the [block_hash] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_block_hash_ilike Filter the results where the [block_hash] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_block_number Filter the results where the [block_number] field is equal to the given value. (optional)
     * @param  string $filter_block_number_neq Filter the results where the [block_number] field is not equal to the given value. (optional)
     * @param  string $filter_block_number_like Filter the results where the [block_number] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_block_number_ilike Filter the results where the [block_number] field is similar to the given case insensitive value. (optional)
     * @param  ApiTransactionsMetadataGetIncludeParameter $include Include the given relationships. (optional)
     * @param  ApiTransactionsReceiptsGetSortParameter $sort Sort the results by the given field and direction. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ApiTransactionsReceiptsGet200Response
     */
    public function apiTransactionsReceiptsGet($fields_transaction_receipts = null, $filter_transaction_id = null, $filter_block_hash = null, $filter_block_hash_neq = null, $filter_block_hash_like = null, $filter_block_hash_ilike = null, $filter_block_number = null, $filter_block_number_neq = null, $filter_block_number_like = null, $filter_block_number_ilike = null, $include = null, $sort = null)
    {
        list($response) = $this->apiTransactionsReceiptsGetWithHttpInfo($fields_transaction_receipts, $filter_transaction_id, $filter_block_hash, $filter_block_hash_neq, $filter_block_hash_like, $filter_block_hash_ilike, $filter_block_number, $filter_block_number_neq, $filter_block_number_like, $filter_block_number_ilike, $include, $sort);
        return $response;
    }

    /**
     * Operation apiTransactionsReceiptsGetWithHttpInfo
     *
     * List transaction receipts
     *
     * @param  ApiTransactionsReceiptsGetFieldsTransactionReceiptsParameter $fields_transaction_receipts Include the given fields in the response. (optional)
     * @param  int $filter_transaction_id Filter the results where the [transaction_id] field is equal to the given value. (optional)
     * @param  string $filter_block_hash Filter the results where the [block_hash] field is equal to the given value. (optional)
     * @param  string $filter_block_hash_neq Filter the results where the [block_hash] field is not equal to the given value. (optional)
     * @param  string $filter_block_hash_like Filter the results where the [block_hash] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_block_hash_ilike Filter the results where the [block_hash] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_block_number Filter the results where the [block_number] field is equal to the given value. (optional)
     * @param  string $filter_block_number_neq Filter the results where the [block_number] field is not equal to the given value. (optional)
     * @param  string $filter_block_number_like Filter the results where the [block_number] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_block_number_ilike Filter the results where the [block_number] field is similar to the given case insensitive value. (optional)
     * @param  ApiTransactionsMetadataGetIncludeParameter $include Include the given relationships. (optional)
     * @param  ApiTransactionsReceiptsGetSortParameter $sort Sort the results by the given field and direction. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ApiTransactionsReceiptsGet200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiTransactionsReceiptsGetWithHttpInfo($fields_transaction_receipts = null, $filter_transaction_id = null, $filter_block_hash = null, $filter_block_hash_neq = null, $filter_block_hash_like = null, $filter_block_hash_ilike = null, $filter_block_number = null, $filter_block_number_neq = null, $filter_block_number_like = null, $filter_block_number_ilike = null, $include = null, $sort = null)
    {
        $request = $this->apiTransactionsReceiptsGetRequest($fields_transaction_receipts, $filter_transaction_id, $filter_block_hash, $filter_block_hash_neq, $filter_block_hash_like, $filter_block_hash_ilike, $filter_block_number, $filter_block_number_neq, $filter_block_number_like, $filter_block_number_ilike, $include, $sort);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
            
                case 200:
                    if ('\OpenAPI\Client\Model\ApiTransactionsReceiptsGet200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ApiTransactionsReceiptsGet200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ApiTransactionsReceiptsGet200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            }

            $returnType = '\OpenAPI\Client\Model\ApiTransactionsReceiptsGet200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ApiTransactionsReceiptsGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            }
            throw $e;
        }
    }

    /**
     * Operation apiTransactionsReceiptsGetAsync
     *
     * List transaction receipts
     *
     * @param  ApiTransactionsReceiptsGetFieldsTransactionReceiptsParameter $fields_transaction_receipts Include the given fields in the response. (optional)
     * @param  int $filter_transaction_id Filter the results where the [transaction_id] field is equal to the given value. (optional)
     * @param  string $filter_block_hash Filter the results where the [block_hash] field is equal to the given value. (optional)
     * @param  string $filter_block_hash_neq Filter the results where the [block_hash] field is not equal to the given value. (optional)
     * @param  string $filter_block_hash_like Filter the results where the [block_hash] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_block_hash_ilike Filter the results where the [block_hash] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_block_number Filter the results where the [block_number] field is equal to the given value. (optional)
     * @param  string $filter_block_number_neq Filter the results where the [block_number] field is not equal to the given value. (optional)
     * @param  string $filter_block_number_like Filter the results where the [block_number] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_block_number_ilike Filter the results where the [block_number] field is similar to the given case insensitive value. (optional)
     * @param  ApiTransactionsMetadataGetIncludeParameter $include Include the given relationships. (optional)
     * @param  ApiTransactionsReceiptsGetSortParameter $sort Sort the results by the given field and direction. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTransactionsReceiptsGetAsync($fields_transaction_receipts = null, $filter_transaction_id = null, $filter_block_hash = null, $filter_block_hash_neq = null, $filter_block_hash_like = null, $filter_block_hash_ilike = null, $filter_block_number = null, $filter_block_number_neq = null, $filter_block_number_like = null, $filter_block_number_ilike = null, $include = null, $sort = null)
    {
        return $this->apiTransactionsReceiptsGetAsyncWithHttpInfo($fields_transaction_receipts, $filter_transaction_id, $filter_block_hash, $filter_block_hash_neq, $filter_block_hash_like, $filter_block_hash_ilike, $filter_block_number, $filter_block_number_neq, $filter_block_number_like, $filter_block_number_ilike, $include, $sort)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiTransactionsReceiptsGetAsyncWithHttpInfo
     *
     * List transaction receipts
     *
     * @param  ApiTransactionsReceiptsGetFieldsTransactionReceiptsParameter $fields_transaction_receipts Include the given fields in the response. (optional)
     * @param  int $filter_transaction_id Filter the results where the [transaction_id] field is equal to the given value. (optional)
     * @param  string $filter_block_hash Filter the results where the [block_hash] field is equal to the given value. (optional)
     * @param  string $filter_block_hash_neq Filter the results where the [block_hash] field is not equal to the given value. (optional)
     * @param  string $filter_block_hash_like Filter the results where the [block_hash] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_block_hash_ilike Filter the results where the [block_hash] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_block_number Filter the results where the [block_number] field is equal to the given value. (optional)
     * @param  string $filter_block_number_neq Filter the results where the [block_number] field is not equal to the given value. (optional)
     * @param  string $filter_block_number_like Filter the results where the [block_number] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_block_number_ilike Filter the results where the [block_number] field is similar to the given case insensitive value. (optional)
     * @param  ApiTransactionsMetadataGetIncludeParameter $include Include the given relationships. (optional)
     * @param  ApiTransactionsReceiptsGetSortParameter $sort Sort the results by the given field and direction. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTransactionsReceiptsGetAsyncWithHttpInfo($fields_transaction_receipts = null, $filter_transaction_id = null, $filter_block_hash = null, $filter_block_hash_neq = null, $filter_block_hash_like = null, $filter_block_hash_ilike = null, $filter_block_number = null, $filter_block_number_neq = null, $filter_block_number_like = null, $filter_block_number_ilike = null, $include = null, $sort = null)
    {
        $returnType = '\OpenAPI\Client\Model\ApiTransactionsReceiptsGet200Response';
        $request = $this->apiTransactionsReceiptsGetRequest($fields_transaction_receipts, $filter_transaction_id, $filter_block_hash, $filter_block_hash_neq, $filter_block_hash_like, $filter_block_hash_ilike, $filter_block_number, $filter_block_number_neq, $filter_block_number_like, $filter_block_number_ilike, $include, $sort);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiTransactionsReceiptsGet'
     *
     * @param  ApiTransactionsReceiptsGetFieldsTransactionReceiptsParameter $fields_transaction_receipts Include the given fields in the response. (optional)
     * @param  int $filter_transaction_id Filter the results where the [transaction_id] field is equal to the given value. (optional)
     * @param  string $filter_block_hash Filter the results where the [block_hash] field is equal to the given value. (optional)
     * @param  string $filter_block_hash_neq Filter the results where the [block_hash] field is not equal to the given value. (optional)
     * @param  string $filter_block_hash_like Filter the results where the [block_hash] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_block_hash_ilike Filter the results where the [block_hash] field is similar to the given case insensitive value. (optional)
     * @param  string $filter_block_number Filter the results where the [block_number] field is equal to the given value. (optional)
     * @param  string $filter_block_number_neq Filter the results where the [block_number] field is not equal to the given value. (optional)
     * @param  string $filter_block_number_like Filter the results where the [block_number] field is similar to the given case sensitive value. (optional)
     * @param  string $filter_block_number_ilike Filter the results where the [block_number] field is similar to the given case insensitive value. (optional)
     * @param  ApiTransactionsMetadataGetIncludeParameter $include Include the given relationships. (optional)
     * @param  ApiTransactionsReceiptsGetSortParameter $sort Sort the results by the given field and direction. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiTransactionsReceiptsGetRequest($fields_transaction_receipts = null, $filter_transaction_id = null, $filter_block_hash = null, $filter_block_hash_neq = null, $filter_block_hash_like = null, $filter_block_hash_ilike = null, $filter_block_number = null, $filter_block_number_neq = null, $filter_block_number_like = null, $filter_block_number_ilike = null, $include = null, $sort = null)
    {













        $resourcePath = '/api/transactions/receipts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fields_transaction_receipts,
            'fields[transaction_receipts]', // param base name
            'AnyOfStringStringStringString', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_transaction_id,
            'filter[transaction_id]', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_block_hash,
            'filter[block_hash]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_block_hash_neq,
            'filter[block_hash.neq]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_block_hash_like,
            'filter[block_hash.like]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_block_hash_ilike,
            'filter[block_hash.ilike]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_block_number,
            'filter[block_number]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_block_number_neq,
            'filter[block_number.neq]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_block_number_like,
            'filter[block_number.like]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_block_number_ilike,
            'filter[block_number.ilike]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include,
            'include', // param base name
            'AnyOfString', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'AnyOfStringStringStringStringStringString', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiValidatorsUpdatesGet
     *
     * List validator updates
     *
     * @param  ApiValidatorsUpdatesGetFieldsBlockNumberParameter $fields_block_number Include the given fields in the response. (optional)
     * @param  int $filter_block_number Filter the results where the [block_number] field is equal to the given value. (optional)
     * @param  ApiValidatorsUpdatesGetIncludeParameter $include Include the given relationships. (optional)
     * @param  ApiValidatorsUpdatesGetSortParameter $sort Sort the results by the given field and direction. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ApiValidatorsUpdatesGet200Response
     */
    public function apiValidatorsUpdatesGet($fields_block_number = null, $filter_block_number = null, $include = null, $sort = null)
    {
        list($response) = $this->apiValidatorsUpdatesGetWithHttpInfo($fields_block_number, $filter_block_number, $include, $sort);
        return $response;
    }

    /**
     * Operation apiValidatorsUpdatesGetWithHttpInfo
     *
     * List validator updates
     *
     * @param  ApiValidatorsUpdatesGetFieldsBlockNumberParameter $fields_block_number Include the given fields in the response. (optional)
     * @param  int $filter_block_number Filter the results where the [block_number] field is equal to the given value. (optional)
     * @param  ApiValidatorsUpdatesGetIncludeParameter $include Include the given relationships. (optional)
     * @param  ApiValidatorsUpdatesGetSortParameter $sort Sort the results by the given field and direction. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ApiValidatorsUpdatesGet200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiValidatorsUpdatesGetWithHttpInfo($fields_block_number = null, $filter_block_number = null, $include = null, $sort = null)
    {
        $request = $this->apiValidatorsUpdatesGetRequest($fields_block_number, $filter_block_number, $include, $sort);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
            
                case 200:
                    if ('\OpenAPI\Client\Model\ApiValidatorsUpdatesGet200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ApiValidatorsUpdatesGet200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ApiValidatorsUpdatesGet200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            }

            $returnType = '\OpenAPI\Client\Model\ApiValidatorsUpdatesGet200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ApiValidatorsUpdatesGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            }
            throw $e;
        }
    }

    /**
     * Operation apiValidatorsUpdatesGetAsync
     *
     * List validator updates
     *
     * @param  ApiValidatorsUpdatesGetFieldsBlockNumberParameter $fields_block_number Include the given fields in the response. (optional)
     * @param  int $filter_block_number Filter the results where the [block_number] field is equal to the given value. (optional)
     * @param  ApiValidatorsUpdatesGetIncludeParameter $include Include the given relationships. (optional)
     * @param  ApiValidatorsUpdatesGetSortParameter $sort Sort the results by the given field and direction. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiValidatorsUpdatesGetAsync($fields_block_number = null, $filter_block_number = null, $include = null, $sort = null)
    {
        return $this->apiValidatorsUpdatesGetAsyncWithHttpInfo($fields_block_number, $filter_block_number, $include, $sort)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiValidatorsUpdatesGetAsyncWithHttpInfo
     *
     * List validator updates
     *
     * @param  ApiValidatorsUpdatesGetFieldsBlockNumberParameter $fields_block_number Include the given fields in the response. (optional)
     * @param  int $filter_block_number Filter the results where the [block_number] field is equal to the given value. (optional)
     * @param  ApiValidatorsUpdatesGetIncludeParameter $include Include the given relationships. (optional)
     * @param  ApiValidatorsUpdatesGetSortParameter $sort Sort the results by the given field and direction. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiValidatorsUpdatesGetAsyncWithHttpInfo($fields_block_number = null, $filter_block_number = null, $include = null, $sort = null)
    {
        $returnType = '\OpenAPI\Client\Model\ApiValidatorsUpdatesGet200Response';
        $request = $this->apiValidatorsUpdatesGetRequest($fields_block_number, $filter_block_number, $include, $sort);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiValidatorsUpdatesGet'
     *
     * @param  ApiValidatorsUpdatesGetFieldsBlockNumberParameter $fields_block_number Include the given fields in the response. (optional)
     * @param  int $filter_block_number Filter the results where the [block_number] field is equal to the given value. (optional)
     * @param  ApiValidatorsUpdatesGetIncludeParameter $include Include the given relationships. (optional)
     * @param  ApiValidatorsUpdatesGetSortParameter $sort Sort the results by the given field and direction. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiValidatorsUpdatesGetRequest($fields_block_number = null, $filter_block_number = null, $include = null, $sort = null)
    {





        $resourcePath = '/api/validators/updates';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fields_block_number,
            'fields[block_number]', // param base name
            'AnyOfString', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter_block_number,
            'filter[block_number]', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include,
            'include', // param base name
            'AnyOfString', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'AnyOfStringString', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
