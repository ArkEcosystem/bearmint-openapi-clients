/*
 * Railway
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};


/// struct for typed errors of method [`api_accounts_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiAccountsGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_accounts_metadata_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiAccountsMetadataGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_blocks_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiBlocksGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_entities_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiEntitiesGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_transactions_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiTransactionsGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_transactions_metadata_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiTransactionsMetadataGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_transactions_receipts_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiTransactionsReceiptsGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_validators_updates_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiValidatorsUpdatesGetError {
    UnknownValue(serde_json::Value),
}


pub async fn api_accounts_get(configuration: &configuration::Configuration, fields_left_square_bracket_accounts_right_square_bracket: Option<ApiAccountsGetFieldsAccountsParameter>, filter_left_square_bracket_address_right_square_bracket: Option<&str>, filter_left_square_bracket_address_period_neq_right_square_bracket: Option<&str>, filter_left_square_bracket_address_period_like_right_square_bracket: Option<&str>, filter_left_square_bracket_address_period_ilike_right_square_bracket: Option<&str>, filter_left_square_bracket_public_key_right_square_bracket: Option<&str>, filter_left_square_bracket_public_key_period_neq_right_square_bracket: Option<&str>, filter_left_square_bracket_public_key_period_like_right_square_bracket: Option<&str>, filter_left_square_bracket_public_key_period_ilike_right_square_bracket: Option<&str>, filter_left_square_bracket_name_right_square_bracket: Option<&str>, filter_left_square_bracket_name_period_neq_right_square_bracket: Option<&str>, filter_left_square_bracket_name_period_like_right_square_bracket: Option<&str>, filter_left_square_bracket_name_period_ilike_right_square_bracket: Option<&str>, filter_left_square_bracket_nonce_right_square_bracket: Option<i32>, filter_left_square_bracket_validator_period_address_right_square_bracket: Option<&str>, filter_left_square_bracket_validator_period_address_period_neq_right_square_bracket: Option<&str>, filter_left_square_bracket_validator_period_address_period_like_right_square_bracket: Option<&str>, filter_left_square_bracket_validator_period_address_period_ilike_right_square_bracket: Option<&str>, filter_left_square_bracket_validator_period_public_key_right_square_bracket: Option<&str>, filter_left_square_bracket_validator_period_public_key_period_neq_right_square_bracket: Option<&str>, filter_left_square_bracket_validator_period_public_key_period_like_right_square_bracket: Option<&str>, filter_left_square_bracket_validator_period_public_key_period_ilike_right_square_bracket: Option<&str>, filter_left_square_bracket_validator_period_power_right_square_bracket: Option<&str>, filter_left_square_bracket_validator_period_power_period_neq_right_square_bracket: Option<&str>, filter_left_square_bracket_validator_period_power_period_like_right_square_bracket: Option<&str>, filter_left_square_bracket_validator_period_power_period_ilike_right_square_bracket: Option<&str>, include: Option<ApiAccountsGetIncludeParameter>, sort: Option<ApiAccountsGetSortParameter>) -> Result<crate::models::ApiAccountsGet200Response, Error<ApiAccountsGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/accounts", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = fields_left_square_bracket_accounts_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("fields[accounts]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_address_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[address]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_address_period_neq_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[address.neq]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_address_period_like_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[address.like]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_address_period_ilike_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[address.ilike]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_public_key_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[public_key]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_public_key_period_neq_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[public_key.neq]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_public_key_period_like_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[public_key.like]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_public_key_period_ilike_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[public_key.ilike]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_name_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[name]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_name_period_neq_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[name.neq]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_name_period_like_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[name.like]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_name_period_ilike_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[name.ilike]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_nonce_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[nonce]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_validator_period_address_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[validator.address]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_validator_period_address_period_neq_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[validator.address.neq]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_validator_period_address_period_like_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[validator.address.like]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_validator_period_address_period_ilike_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[validator.address.ilike]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_validator_period_public_key_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[validator.publicKey]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_validator_period_public_key_period_neq_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[validator.publicKey.neq]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_validator_period_public_key_period_like_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[validator.publicKey.like]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_validator_period_public_key_period_ilike_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[validator.publicKey.ilike]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_validator_period_power_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[validator.power]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_validator_period_power_period_neq_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[validator.power.neq]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_validator_period_power_period_like_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[validator.power.like]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_validator_period_power_period_ilike_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[validator.power.ilike]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = include {
        local_var_req_builder = local_var_req_builder.query(&[("include", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = sort {
        local_var_req_builder = local_var_req_builder.query(&[("sort", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ApiAccountsGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn api_accounts_metadata_get(configuration: &configuration::Configuration, fields_left_square_bracket_accounts_metadata_right_square_bracket: Option<ApiAccountsMetadataGetFieldsAccountsMetadataParameter>, filter_left_square_bracket_account_id_right_square_bracket: Option<i32>, filter_left_square_bracket_module_right_square_bracket: Option<&str>, filter_left_square_bracket_module_period_neq_right_square_bracket: Option<&str>, filter_left_square_bracket_module_period_like_right_square_bracket: Option<&str>, filter_left_square_bracket_module_period_ilike_right_square_bracket: Option<&str>, filter_left_square_bracket_key_right_square_bracket: Option<&str>, filter_left_square_bracket_key_period_neq_right_square_bracket: Option<&str>, filter_left_square_bracket_key_period_like_right_square_bracket: Option<&str>, filter_left_square_bracket_key_period_ilike_right_square_bracket: Option<&str>, filter_left_square_bracket_value_right_square_bracket: Option<&str>, filter_left_square_bracket_value_period_neq_right_square_bracket: Option<&str>, filter_left_square_bracket_value_period_like_right_square_bracket: Option<&str>, filter_left_square_bracket_value_period_ilike_right_square_bracket: Option<&str>, include: Option<ApiAccountsMetadataGetIncludeParameter>, sort: Option<ApiAccountsMetadataGetSortParameter>) -> Result<crate::models::ApiAccountsMetadataGet200Response, Error<ApiAccountsMetadataGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/accounts/metadata", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = fields_left_square_bracket_accounts_metadata_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("fields[accounts_metadata]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_account_id_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[account_id]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_module_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[module]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_module_period_neq_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[module.neq]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_module_period_like_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[module.like]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_module_period_ilike_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[module.ilike]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_key_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[key]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_key_period_neq_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[key.neq]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_key_period_like_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[key.like]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_key_period_ilike_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[key.ilike]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_value_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[value]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_value_period_neq_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[value.neq]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_value_period_like_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[value.like]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_value_period_ilike_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[value.ilike]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = include {
        local_var_req_builder = local_var_req_builder.query(&[("include", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = sort {
        local_var_req_builder = local_var_req_builder.query(&[("sort", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ApiAccountsMetadataGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn api_blocks_get(configuration: &configuration::Configuration, fields_left_square_bracket_blocks_right_square_bracket: Option<ApiBlocksGetFieldsBlocksParameter>, filter_left_square_bracket_hash_right_square_bracket: Option<&str>, filter_left_square_bracket_hash_period_neq_right_square_bracket: Option<&str>, filter_left_square_bracket_hash_period_like_right_square_bracket: Option<&str>, filter_left_square_bracket_hash_period_ilike_right_square_bracket: Option<&str>, filter_left_square_bracket_height_right_square_bracket: Option<i32>, filter_left_square_bracket_header_period_version_period_block_right_square_bracket: Option<i32>, filter_left_square_bracket_header_period_chain_id_right_square_bracket: Option<&str>, filter_left_square_bracket_header_period_chain_id_period_neq_right_square_bracket: Option<&str>, filter_left_square_bracket_header_period_chain_id_period_like_right_square_bracket: Option<&str>, filter_left_square_bracket_header_period_chain_id_period_ilike_right_square_bracket: Option<&str>, filter_left_square_bracket_header_period_height_right_square_bracket: Option<i32>, filter_left_square_bracket_header_period_time_right_square_bracket: Option<&str>, filter_left_square_bracket_header_period_time_period_neq_right_square_bracket: Option<&str>, filter_left_square_bracket_header_period_time_period_like_right_square_bracket: Option<&str>, filter_left_square_bracket_header_period_time_period_ilike_right_square_bracket: Option<&str>, filter_left_square_bracket_header_period_last_block_id_period_hash_right_square_bracket: Option<&str>, filter_left_square_bracket_header_period_last_block_id_period_hash_period_neq_right_square_bracket: Option<&str>, filter_left_square_bracket_header_period_last_block_id_period_hash_period_like_right_square_bracket: Option<&str>, filter_left_square_bracket_header_period_last_block_id_period_hash_period_ilike_right_square_bracket: Option<&str>, filter_left_square_bracket_header_period_last_block_id_period_part_set_header_period_total_right_square_bracket: Option<i32>, filter_left_square_bracket_header_period_last_block_id_period_part_set_header_period_hash_right_square_bracket: Option<&str>, filter_left_square_bracket_header_period_last_block_id_period_part_set_header_period_hash_period_neq_right_square_bracket: Option<&str>, filter_left_square_bracket_header_period_last_block_id_period_part_set_header_period_hash_period_like_right_square_bracket: Option<&str>, filter_left_square_bracket_header_period_last_block_id_period_part_set_header_period_hash_period_ilike_right_square_bracket: Option<&str>, filter_left_square_bracket_header_period_last_commit_hash_right_square_bracket: Option<&str>, filter_left_square_bracket_header_period_last_commit_hash_period_neq_right_square_bracket: Option<&str>, filter_left_square_bracket_header_period_last_commit_hash_period_like_right_square_bracket: Option<&str>, filter_left_square_bracket_header_period_last_commit_hash_period_ilike_right_square_bracket: Option<&str>, filter_left_square_bracket_header_period_data_hash_right_square_bracket: Option<&str>, filter_left_square_bracket_header_period_data_hash_period_neq_right_square_bracket: Option<&str>, filter_left_square_bracket_header_period_data_hash_period_like_right_square_bracket: Option<&str>, filter_left_square_bracket_header_period_data_hash_period_ilike_right_square_bracket: Option<&str>, filter_left_square_bracket_header_period_validators_hash_right_square_bracket: Option<&str>, filter_left_square_bracket_header_period_validators_hash_period_neq_right_square_bracket: Option<&str>, filter_left_square_bracket_header_period_validators_hash_period_like_right_square_bracket: Option<&str>, filter_left_square_bracket_header_period_validators_hash_period_ilike_right_square_bracket: Option<&str>, filter_left_square_bracket_header_period_next_validators_hash_right_square_bracket: Option<&str>, filter_left_square_bracket_header_period_next_validators_hash_period_neq_right_square_bracket: Option<&str>, filter_left_square_bracket_header_period_next_validators_hash_period_like_right_square_bracket: Option<&str>, filter_left_square_bracket_header_period_next_validators_hash_period_ilike_right_square_bracket: Option<&str>, filter_left_square_bracket_header_period_consensus_hash_right_square_bracket: Option<&str>, filter_left_square_bracket_header_period_consensus_hash_period_neq_right_square_bracket: Option<&str>, filter_left_square_bracket_header_period_consensus_hash_period_like_right_square_bracket: Option<&str>, filter_left_square_bracket_header_period_consensus_hash_period_ilike_right_square_bracket: Option<&str>, filter_left_square_bracket_header_period_app_hash_right_square_bracket: Option<&str>, filter_left_square_bracket_header_period_app_hash_period_neq_right_square_bracket: Option<&str>, filter_left_square_bracket_header_period_app_hash_period_like_right_square_bracket: Option<&str>, filter_left_square_bracket_header_period_app_hash_period_ilike_right_square_bracket: Option<&str>, filter_left_square_bracket_header_period_last_results_hash_right_square_bracket: Option<&str>, filter_left_square_bracket_header_period_last_results_hash_period_neq_right_square_bracket: Option<&str>, filter_left_square_bracket_header_period_last_results_hash_period_like_right_square_bracket: Option<&str>, filter_left_square_bracket_header_period_last_results_hash_period_ilike_right_square_bracket: Option<&str>, filter_left_square_bracket_header_period_evidence_hash_right_square_bracket: Option<&str>, filter_left_square_bracket_header_period_evidence_hash_period_neq_right_square_bracket: Option<&str>, filter_left_square_bracket_header_period_evidence_hash_period_like_right_square_bracket: Option<&str>, filter_left_square_bracket_header_period_evidence_hash_period_ilike_right_square_bracket: Option<&str>, filter_left_square_bracket_header_period_proposer_address_right_square_bracket: Option<&str>, filter_left_square_bracket_header_period_proposer_address_period_neq_right_square_bracket: Option<&str>, filter_left_square_bracket_header_period_proposer_address_period_like_right_square_bracket: Option<&str>, filter_left_square_bracket_header_period_proposer_address_period_ilike_right_square_bracket: Option<&str>, include: Option<ApiBlocksGetIncludeParameter>, sort: Option<ApiBlocksGetSortParameter>) -> Result<crate::models::ApiBlocksGet200Response, Error<ApiBlocksGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/blocks", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = fields_left_square_bracket_blocks_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("fields[blocks]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_hash_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[hash]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_hash_period_neq_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[hash.neq]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_hash_period_like_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[hash.like]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_hash_period_ilike_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[hash.ilike]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_height_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[height]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_header_period_version_period_block_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[header.version.block]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_header_period_chain_id_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[header.chainId]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_header_period_chain_id_period_neq_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[header.chainId.neq]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_header_period_chain_id_period_like_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[header.chainId.like]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_header_period_chain_id_period_ilike_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[header.chainId.ilike]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_header_period_height_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[header.height]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_header_period_time_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[header.time]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_header_period_time_period_neq_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[header.time.neq]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_header_period_time_period_like_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[header.time.like]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_header_period_time_period_ilike_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[header.time.ilike]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_header_period_last_block_id_period_hash_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[header.lastBlockId.hash]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_header_period_last_block_id_period_hash_period_neq_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[header.lastBlockId.hash.neq]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_header_period_last_block_id_period_hash_period_like_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[header.lastBlockId.hash.like]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_header_period_last_block_id_period_hash_period_ilike_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[header.lastBlockId.hash.ilike]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_header_period_last_block_id_period_part_set_header_period_total_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[header.lastBlockId.partSetHeader.total]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_header_period_last_block_id_period_part_set_header_period_hash_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[header.lastBlockId.partSetHeader.hash]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_header_period_last_block_id_period_part_set_header_period_hash_period_neq_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[header.lastBlockId.partSetHeader.hash.neq]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_header_period_last_block_id_period_part_set_header_period_hash_period_like_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[header.lastBlockId.partSetHeader.hash.like]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_header_period_last_block_id_period_part_set_header_period_hash_period_ilike_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[header.lastBlockId.partSetHeader.hash.ilike]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_header_period_last_commit_hash_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[header.lastCommitHash]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_header_period_last_commit_hash_period_neq_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[header.lastCommitHash.neq]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_header_period_last_commit_hash_period_like_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[header.lastCommitHash.like]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_header_period_last_commit_hash_period_ilike_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[header.lastCommitHash.ilike]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_header_period_data_hash_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[header.dataHash]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_header_period_data_hash_period_neq_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[header.dataHash.neq]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_header_period_data_hash_period_like_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[header.dataHash.like]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_header_period_data_hash_period_ilike_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[header.dataHash.ilike]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_header_period_validators_hash_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[header.validatorsHash]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_header_period_validators_hash_period_neq_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[header.validatorsHash.neq]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_header_period_validators_hash_period_like_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[header.validatorsHash.like]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_header_period_validators_hash_period_ilike_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[header.validatorsHash.ilike]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_header_period_next_validators_hash_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[header.nextValidatorsHash]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_header_period_next_validators_hash_period_neq_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[header.nextValidatorsHash.neq]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_header_period_next_validators_hash_period_like_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[header.nextValidatorsHash.like]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_header_period_next_validators_hash_period_ilike_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[header.nextValidatorsHash.ilike]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_header_period_consensus_hash_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[header.consensusHash]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_header_period_consensus_hash_period_neq_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[header.consensusHash.neq]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_header_period_consensus_hash_period_like_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[header.consensusHash.like]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_header_period_consensus_hash_period_ilike_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[header.consensusHash.ilike]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_header_period_app_hash_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[header.appHash]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_header_period_app_hash_period_neq_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[header.appHash.neq]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_header_period_app_hash_period_like_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[header.appHash.like]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_header_period_app_hash_period_ilike_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[header.appHash.ilike]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_header_period_last_results_hash_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[header.lastResultsHash]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_header_period_last_results_hash_period_neq_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[header.lastResultsHash.neq]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_header_period_last_results_hash_period_like_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[header.lastResultsHash.like]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_header_period_last_results_hash_period_ilike_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[header.lastResultsHash.ilike]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_header_period_evidence_hash_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[header.evidenceHash]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_header_period_evidence_hash_period_neq_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[header.evidenceHash.neq]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_header_period_evidence_hash_period_like_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[header.evidenceHash.like]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_header_period_evidence_hash_period_ilike_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[header.evidenceHash.ilike]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_header_period_proposer_address_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[header.proposerAddress]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_header_period_proposer_address_period_neq_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[header.proposerAddress.neq]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_header_period_proposer_address_period_like_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[header.proposerAddress.like]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_header_period_proposer_address_period_ilike_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[header.proposerAddress.ilike]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = include {
        local_var_req_builder = local_var_req_builder.query(&[("include", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = sort {
        local_var_req_builder = local_var_req_builder.query(&[("sort", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ApiBlocksGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn api_entities_get(configuration: &configuration::Configuration, fields_left_square_bracket_entities_right_square_bracket: Option<ApiEntitiesGetFieldsEntitiesParameter>, filter_left_square_bracket_module_right_square_bracket: Option<&str>, filter_left_square_bracket_module_period_neq_right_square_bracket: Option<&str>, filter_left_square_bracket_module_period_like_right_square_bracket: Option<&str>, filter_left_square_bracket_module_period_ilike_right_square_bracket: Option<&str>, filter_left_square_bracket_type_right_square_bracket: Option<&str>, filter_left_square_bracket_type_period_neq_right_square_bracket: Option<&str>, filter_left_square_bracket_type_period_like_right_square_bracket: Option<&str>, filter_left_square_bracket_type_period_ilike_right_square_bracket: Option<&str>, filter_left_square_bracket_key_right_square_bracket: Option<&str>, filter_left_square_bracket_key_period_neq_right_square_bracket: Option<&str>, filter_left_square_bracket_key_period_like_right_square_bracket: Option<&str>, filter_left_square_bracket_key_period_ilike_right_square_bracket: Option<&str>, filter_left_square_bracket_value_right_square_bracket: Option<&str>, filter_left_square_bracket_value_period_neq_right_square_bracket: Option<&str>, filter_left_square_bracket_value_period_like_right_square_bracket: Option<&str>, filter_left_square_bracket_value_period_ilike_right_square_bracket: Option<&str>, sort: Option<ApiEntitiesGetSortParameter>) -> Result<crate::models::ApiEntitiesGet200Response, Error<ApiEntitiesGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/entities", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = fields_left_square_bracket_entities_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("fields[entities]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_module_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[module]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_module_period_neq_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[module.neq]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_module_period_like_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[module.like]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_module_period_ilike_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[module.ilike]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_type_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[type]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_type_period_neq_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[type.neq]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_type_period_like_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[type.like]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_type_period_ilike_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[type.ilike]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_key_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[key]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_key_period_neq_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[key.neq]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_key_period_like_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[key.like]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_key_period_ilike_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[key.ilike]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_value_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[value]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_value_period_neq_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[value.neq]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_value_period_like_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[value.like]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_value_period_ilike_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[value.ilike]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = sort {
        local_var_req_builder = local_var_req_builder.query(&[("sort", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ApiEntitiesGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn api_transactions_get(configuration: &configuration::Configuration, fields_left_square_bracket_accounts_right_square_bracket: Option<ApiTransactionsGetFieldsAccountsParameter>, filter_left_square_bracket_hash_right_square_bracket: Option<&str>, filter_left_square_bracket_hash_period_neq_right_square_bracket: Option<&str>, filter_left_square_bracket_hash_period_like_right_square_bracket: Option<&str>, filter_left_square_bracket_hash_period_ilike_right_square_bracket: Option<&str>, filter_left_square_bracket_sender_right_square_bracket: Option<&str>, filter_left_square_bracket_sender_period_neq_right_square_bracket: Option<&str>, filter_left_square_bracket_sender_period_like_right_square_bracket: Option<&str>, filter_left_square_bracket_sender_period_ilike_right_square_bracket: Option<&str>, filter_left_square_bracket_recipient_right_square_bracket: Option<&str>, filter_left_square_bracket_recipient_period_neq_right_square_bracket: Option<&str>, filter_left_square_bracket_recipient_period_like_right_square_bracket: Option<&str>, filter_left_square_bracket_recipient_period_ilike_right_square_bracket: Option<&str>, filter_left_square_bracket_gas_right_square_bracket: Option<i32>, filter_left_square_bracket_nonce_right_square_bracket: Option<i32>, filter_left_square_bracket_signature_right_square_bracket: Option<&str>, filter_left_square_bracket_signature_period_neq_right_square_bracket: Option<&str>, filter_left_square_bracket_signature_period_like_right_square_bracket: Option<&str>, filter_left_square_bracket_signature_period_ilike_right_square_bracket: Option<&str>, filter_left_square_bracket_version_right_square_bracket: Option<&str>, filter_left_square_bracket_version_period_neq_right_square_bracket: Option<&str>, filter_left_square_bracket_version_period_like_right_square_bracket: Option<&str>, filter_left_square_bracket_version_period_ilike_right_square_bracket: Option<&str>, filter_left_square_bracket_message_period_handler_right_square_bracket: Option<&str>, filter_left_square_bracket_message_period_handler_period_neq_right_square_bracket: Option<&str>, filter_left_square_bracket_message_period_handler_period_like_right_square_bracket: Option<&str>, filter_left_square_bracket_message_period_handler_period_ilike_right_square_bracket: Option<&str>, filter_left_square_bracket_message_period_version_right_square_bracket: Option<&str>, filter_left_square_bracket_message_period_version_period_neq_right_square_bracket: Option<&str>, filter_left_square_bracket_message_period_version_period_like_right_square_bracket: Option<&str>, filter_left_square_bracket_message_period_version_period_ilike_right_square_bracket: Option<&str>, filter_left_square_bracket_message_period_network_right_square_bracket: Option<&str>, filter_left_square_bracket_message_period_network_period_neq_right_square_bracket: Option<&str>, filter_left_square_bracket_message_period_network_period_like_right_square_bracket: Option<&str>, filter_left_square_bracket_message_period_network_period_ilike_right_square_bracket: Option<&str>, filter_left_square_bracket_message_period_content_right_square_bracket: Option<&str>, filter_left_square_bracket_message_period_content_period_neq_right_square_bracket: Option<&str>, filter_left_square_bracket_message_period_content_period_like_right_square_bracket: Option<&str>, filter_left_square_bracket_message_period_content_period_ilike_right_square_bracket: Option<&str>, include: Option<ApiTransactionsGetIncludeParameter>, sort: Option<ApiTransactionsGetSortParameter>) -> Result<crate::models::ApiTransactionsGet200Response, Error<ApiTransactionsGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/transactions", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = fields_left_square_bracket_accounts_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("fields[accounts]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_hash_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[hash]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_hash_period_neq_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[hash.neq]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_hash_period_like_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[hash.like]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_hash_period_ilike_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[hash.ilike]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_sender_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[sender]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_sender_period_neq_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[sender.neq]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_sender_period_like_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[sender.like]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_sender_period_ilike_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[sender.ilike]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_recipient_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[recipient]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_recipient_period_neq_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[recipient.neq]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_recipient_period_like_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[recipient.like]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_recipient_period_ilike_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[recipient.ilike]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_gas_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[gas]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_nonce_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[nonce]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_signature_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[signature]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_signature_period_neq_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[signature.neq]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_signature_period_like_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[signature.like]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_signature_period_ilike_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[signature.ilike]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_version_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[version]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_version_period_neq_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[version.neq]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_version_period_like_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[version.like]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_version_period_ilike_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[version.ilike]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_message_period_handler_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[message.handler]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_message_period_handler_period_neq_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[message.handler.neq]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_message_period_handler_period_like_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[message.handler.like]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_message_period_handler_period_ilike_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[message.handler.ilike]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_message_period_version_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[message.version]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_message_period_version_period_neq_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[message.version.neq]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_message_period_version_period_like_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[message.version.like]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_message_period_version_period_ilike_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[message.version.ilike]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_message_period_network_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[message.network]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_message_period_network_period_neq_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[message.network.neq]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_message_period_network_period_like_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[message.network.like]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_message_period_network_period_ilike_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[message.network.ilike]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_message_period_content_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[message.content]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_message_period_content_period_neq_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[message.content.neq]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_message_period_content_period_like_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[message.content.like]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_message_period_content_period_ilike_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[message.content.ilike]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = include {
        local_var_req_builder = local_var_req_builder.query(&[("include", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = sort {
        local_var_req_builder = local_var_req_builder.query(&[("sort", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ApiTransactionsGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn api_transactions_metadata_get(configuration: &configuration::Configuration, fields_left_square_bracket_transaction_metadata_right_square_bracket: Option<ApiTransactionsMetadataGetFieldsTransactionMetadataParameter>, filter_left_square_bracket_transaction_id_right_square_bracket: Option<i32>, filter_left_square_bracket_key_right_square_bracket: Option<&str>, filter_left_square_bracket_key_period_neq_right_square_bracket: Option<&str>, filter_left_square_bracket_key_period_like_right_square_bracket: Option<&str>, filter_left_square_bracket_key_period_ilike_right_square_bracket: Option<&str>, filter_left_square_bracket_value_right_square_bracket: Option<&str>, filter_left_square_bracket_value_period_neq_right_square_bracket: Option<&str>, filter_left_square_bracket_value_period_like_right_square_bracket: Option<&str>, filter_left_square_bracket_value_period_ilike_right_square_bracket: Option<&str>, include: Option<ApiTransactionsMetadataGetIncludeParameter>, sort: Option<ApiTransactionsMetadataGetSortParameter>) -> Result<crate::models::ApiTransactionsMetadataGet200Response, Error<ApiTransactionsMetadataGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/transactions/metadata", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = fields_left_square_bracket_transaction_metadata_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("fields[transaction_metadata]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_transaction_id_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[transaction_id]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_key_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[key]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_key_period_neq_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[key.neq]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_key_period_like_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[key.like]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_key_period_ilike_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[key.ilike]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_value_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[value]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_value_period_neq_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[value.neq]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_value_period_like_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[value.like]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_value_period_ilike_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[value.ilike]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = include {
        local_var_req_builder = local_var_req_builder.query(&[("include", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = sort {
        local_var_req_builder = local_var_req_builder.query(&[("sort", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ApiTransactionsMetadataGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn api_transactions_receipts_get(configuration: &configuration::Configuration, fields_left_square_bracket_transaction_receipts_right_square_bracket: Option<ApiTransactionsReceiptsGetFieldsTransactionReceiptsParameter>, filter_left_square_bracket_transaction_id_right_square_bracket: Option<i32>, filter_left_square_bracket_block_hash_right_square_bracket: Option<&str>, filter_left_square_bracket_block_hash_period_neq_right_square_bracket: Option<&str>, filter_left_square_bracket_block_hash_period_like_right_square_bracket: Option<&str>, filter_left_square_bracket_block_hash_period_ilike_right_square_bracket: Option<&str>, filter_left_square_bracket_block_number_right_square_bracket: Option<&str>, filter_left_square_bracket_block_number_period_neq_right_square_bracket: Option<&str>, filter_left_square_bracket_block_number_period_like_right_square_bracket: Option<&str>, filter_left_square_bracket_block_number_period_ilike_right_square_bracket: Option<&str>, include: Option<ApiTransactionsMetadataGetIncludeParameter>, sort: Option<ApiTransactionsReceiptsGetSortParameter>) -> Result<crate::models::ApiTransactionsReceiptsGet200Response, Error<ApiTransactionsReceiptsGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/transactions/receipts", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = fields_left_square_bracket_transaction_receipts_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("fields[transaction_receipts]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_transaction_id_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[transaction_id]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_block_hash_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[block_hash]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_block_hash_period_neq_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[block_hash.neq]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_block_hash_period_like_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[block_hash.like]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_block_hash_period_ilike_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[block_hash.ilike]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_block_number_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[block_number]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_block_number_period_neq_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[block_number.neq]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_block_number_period_like_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[block_number.like]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_block_number_period_ilike_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[block_number.ilike]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = include {
        local_var_req_builder = local_var_req_builder.query(&[("include", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = sort {
        local_var_req_builder = local_var_req_builder.query(&[("sort", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ApiTransactionsReceiptsGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn api_validators_updates_get(configuration: &configuration::Configuration, fields_left_square_bracket_block_number_right_square_bracket: Option<ApiValidatorsUpdatesGetFieldsBlockNumberParameter>, filter_left_square_bracket_block_number_right_square_bracket: Option<i32>, include: Option<ApiValidatorsUpdatesGetIncludeParameter>, sort: Option<ApiValidatorsUpdatesGetSortParameter>) -> Result<crate::models::ApiValidatorsUpdatesGet200Response, Error<ApiValidatorsUpdatesGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/validators/updates", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = fields_left_square_bracket_block_number_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("fields[block_number]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_block_number_right_square_bracket {
        local_var_req_builder = local_var_req_builder.query(&[("filter[block_number]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = include {
        local_var_req_builder = local_var_req_builder.query(&[("include", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = sort {
        local_var_req_builder = local_var_req_builder.query(&[("sort", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ApiValidatorsUpdatesGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

