/*
Railway

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// Account struct for Account
type Account struct {
	// The internal id of the object.
	Id *int32 `json:"id,omitempty"`
	// The id of the object.
	Address *string `json:"address,omitempty"`
	// The id of the object.
	PublicKey *string `json:"public_key,omitempty"`
	// The id of the object.
	Name *string `json:"name,omitempty"`
	// The id of the object.
	Nonce *int32 `json:"nonce,omitempty"`
	// The id of the object.
	Balances *string `json:"balances,omitempty"`
	// The id of the object.
	LockedBalances *string `json:"locked_balances,omitempty"`
	// The id of the object.
	Stakes *string `json:"stakes,omitempty"`
	// The id of the object.
	Validator *string `json:"validator,omitempty"`
	// The id of the object.
	Metadata *string `json:"metadata,omitempty"`
	// The creation date of the object.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The updating date of the object.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// NewAccount instantiates a new Account object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccount() *Account {
	this := Account{}
	return &this
}

// NewAccountWithDefaults instantiates a new Account object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountWithDefaults() *Account {
	this := Account{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Account) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Account) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *Account) SetId(v int32) {
	o.Id = &v
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *Account) GetAddress() string {
	if o == nil || o.Address == nil {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetAddressOk() (*string, bool) {
	if o == nil || o.Address == nil {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *Account) HasAddress() bool {
	if o != nil && o.Address != nil {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *Account) SetAddress(v string) {
	o.Address = &v
}

// GetPublicKey returns the PublicKey field value if set, zero value otherwise.
func (o *Account) GetPublicKey() string {
	if o == nil || o.PublicKey == nil {
		var ret string
		return ret
	}
	return *o.PublicKey
}

// GetPublicKeyOk returns a tuple with the PublicKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetPublicKeyOk() (*string, bool) {
	if o == nil || o.PublicKey == nil {
		return nil, false
	}
	return o.PublicKey, true
}

// HasPublicKey returns a boolean if a field has been set.
func (o *Account) HasPublicKey() bool {
	if o != nil && o.PublicKey != nil {
		return true
	}

	return false
}

// SetPublicKey gets a reference to the given string and assigns it to the PublicKey field.
func (o *Account) SetPublicKey(v string) {
	o.PublicKey = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Account) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Account) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Account) SetName(v string) {
	o.Name = &v
}

// GetNonce returns the Nonce field value if set, zero value otherwise.
func (o *Account) GetNonce() int32 {
	if o == nil || o.Nonce == nil {
		var ret int32
		return ret
	}
	return *o.Nonce
}

// GetNonceOk returns a tuple with the Nonce field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetNonceOk() (*int32, bool) {
	if o == nil || o.Nonce == nil {
		return nil, false
	}
	return o.Nonce, true
}

// HasNonce returns a boolean if a field has been set.
func (o *Account) HasNonce() bool {
	if o != nil && o.Nonce != nil {
		return true
	}

	return false
}

// SetNonce gets a reference to the given int32 and assigns it to the Nonce field.
func (o *Account) SetNonce(v int32) {
	o.Nonce = &v
}

// GetBalances returns the Balances field value if set, zero value otherwise.
func (o *Account) GetBalances() string {
	if o == nil || o.Balances == nil {
		var ret string
		return ret
	}
	return *o.Balances
}

// GetBalancesOk returns a tuple with the Balances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetBalancesOk() (*string, bool) {
	if o == nil || o.Balances == nil {
		return nil, false
	}
	return o.Balances, true
}

// HasBalances returns a boolean if a field has been set.
func (o *Account) HasBalances() bool {
	if o != nil && o.Balances != nil {
		return true
	}

	return false
}

// SetBalances gets a reference to the given string and assigns it to the Balances field.
func (o *Account) SetBalances(v string) {
	o.Balances = &v
}

// GetLockedBalances returns the LockedBalances field value if set, zero value otherwise.
func (o *Account) GetLockedBalances() string {
	if o == nil || o.LockedBalances == nil {
		var ret string
		return ret
	}
	return *o.LockedBalances
}

// GetLockedBalancesOk returns a tuple with the LockedBalances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetLockedBalancesOk() (*string, bool) {
	if o == nil || o.LockedBalances == nil {
		return nil, false
	}
	return o.LockedBalances, true
}

// HasLockedBalances returns a boolean if a field has been set.
func (o *Account) HasLockedBalances() bool {
	if o != nil && o.LockedBalances != nil {
		return true
	}

	return false
}

// SetLockedBalances gets a reference to the given string and assigns it to the LockedBalances field.
func (o *Account) SetLockedBalances(v string) {
	o.LockedBalances = &v
}

// GetStakes returns the Stakes field value if set, zero value otherwise.
func (o *Account) GetStakes() string {
	if o == nil || o.Stakes == nil {
		var ret string
		return ret
	}
	return *o.Stakes
}

// GetStakesOk returns a tuple with the Stakes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetStakesOk() (*string, bool) {
	if o == nil || o.Stakes == nil {
		return nil, false
	}
	return o.Stakes, true
}

// HasStakes returns a boolean if a field has been set.
func (o *Account) HasStakes() bool {
	if o != nil && o.Stakes != nil {
		return true
	}

	return false
}

// SetStakes gets a reference to the given string and assigns it to the Stakes field.
func (o *Account) SetStakes(v string) {
	o.Stakes = &v
}

// GetValidator returns the Validator field value if set, zero value otherwise.
func (o *Account) GetValidator() string {
	if o == nil || o.Validator == nil {
		var ret string
		return ret
	}
	return *o.Validator
}

// GetValidatorOk returns a tuple with the Validator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetValidatorOk() (*string, bool) {
	if o == nil || o.Validator == nil {
		return nil, false
	}
	return o.Validator, true
}

// HasValidator returns a boolean if a field has been set.
func (o *Account) HasValidator() bool {
	if o != nil && o.Validator != nil {
		return true
	}

	return false
}

// SetValidator gets a reference to the given string and assigns it to the Validator field.
func (o *Account) SetValidator(v string) {
	o.Validator = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *Account) GetMetadata() string {
	if o == nil || o.Metadata == nil {
		var ret string
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetMetadataOk() (*string, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *Account) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given string and assigns it to the Metadata field.
func (o *Account) SetMetadata(v string) {
	o.Metadata = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Account) GetCreatedAt() time.Time {
	if o == nil || o.CreatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Account) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *Account) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *Account) GetUpdatedAt() time.Time {
	if o == nil || o.UpdatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *Account) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *Account) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o Account) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Address != nil {
		toSerialize["address"] = o.Address
	}
	if o.PublicKey != nil {
		toSerialize["public_key"] = o.PublicKey
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Nonce != nil {
		toSerialize["nonce"] = o.Nonce
	}
	if o.Balances != nil {
		toSerialize["balances"] = o.Balances
	}
	if o.LockedBalances != nil {
		toSerialize["locked_balances"] = o.LockedBalances
	}
	if o.Stakes != nil {
		toSerialize["stakes"] = o.Stakes
	}
	if o.Validator != nil {
		toSerialize["validator"] = o.Validator
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if o.CreatedAt != nil {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.UpdatedAt != nil {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	return json.Marshal(toSerialize)
}

type NullableAccount struct {
	value *Account
	isSet bool
}

func (v NullableAccount) Get() *Account {
	return v.value
}

func (v *NullableAccount) Set(val *Account) {
	v.value = val
	v.isSet = true
}

func (v NullableAccount) IsSet() bool {
	return v.isSet
}

func (v *NullableAccount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccount(val *Account) *NullableAccount {
	return &NullableAccount{value: val, isSet: true}
}

func (v NullableAccount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


