/*
Railway

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// Block struct for Block
type Block struct {
	// The id of the object.
	Id *int32 `json:"id,omitempty"`
	// The hash of the object.
	Hash *string `json:"hash,omitempty"`
	// The height of the object.
	Height *int32 `json:"height,omitempty"`
	// The id of the object.
	Header *Array `json:"header,omitempty"`
	// The id of the object.
	ByzantineValidators *Array `json:"byzantine_validators,omitempty"`
	// The id of the object.
	LastCommitInfo *Array `json:"last_commit_info,omitempty"`
	// The creation date of the object.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The updating date of the object.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// NewBlock instantiates a new Block object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlock() *Block {
	this := Block{}
	return &this
}

// NewBlockWithDefaults instantiates a new Block object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockWithDefaults() *Block {
	this := Block{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Block) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Block) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Block) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *Block) SetId(v int32) {
	o.Id = &v
}

// GetHash returns the Hash field value if set, zero value otherwise.
func (o *Block) GetHash() string {
	if o == nil || o.Hash == nil {
		var ret string
		return ret
	}
	return *o.Hash
}

// GetHashOk returns a tuple with the Hash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Block) GetHashOk() (*string, bool) {
	if o == nil || o.Hash == nil {
		return nil, false
	}
	return o.Hash, true
}

// HasHash returns a boolean if a field has been set.
func (o *Block) HasHash() bool {
	if o != nil && o.Hash != nil {
		return true
	}

	return false
}

// SetHash gets a reference to the given string and assigns it to the Hash field.
func (o *Block) SetHash(v string) {
	o.Hash = &v
}

// GetHeight returns the Height field value if set, zero value otherwise.
func (o *Block) GetHeight() int32 {
	if o == nil || o.Height == nil {
		var ret int32
		return ret
	}
	return *o.Height
}

// GetHeightOk returns a tuple with the Height field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Block) GetHeightOk() (*int32, bool) {
	if o == nil || o.Height == nil {
		return nil, false
	}
	return o.Height, true
}

// HasHeight returns a boolean if a field has been set.
func (o *Block) HasHeight() bool {
	if o != nil && o.Height != nil {
		return true
	}

	return false
}

// SetHeight gets a reference to the given int32 and assigns it to the Height field.
func (o *Block) SetHeight(v int32) {
	o.Height = &v
}

// GetHeader returns the Header field value if set, zero value otherwise.
func (o *Block) GetHeader() Array {
	if o == nil || o.Header == nil {
		var ret Array
		return ret
	}
	return *o.Header
}

// GetHeaderOk returns a tuple with the Header field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Block) GetHeaderOk() (*Array, bool) {
	if o == nil || o.Header == nil {
		return nil, false
	}
	return o.Header, true
}

// HasHeader returns a boolean if a field has been set.
func (o *Block) HasHeader() bool {
	if o != nil && o.Header != nil {
		return true
	}

	return false
}

// SetHeader gets a reference to the given Array and assigns it to the Header field.
func (o *Block) SetHeader(v Array) {
	o.Header = &v
}

// GetByzantineValidators returns the ByzantineValidators field value if set, zero value otherwise.
func (o *Block) GetByzantineValidators() Array {
	if o == nil || o.ByzantineValidators == nil {
		var ret Array
		return ret
	}
	return *o.ByzantineValidators
}

// GetByzantineValidatorsOk returns a tuple with the ByzantineValidators field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Block) GetByzantineValidatorsOk() (*Array, bool) {
	if o == nil || o.ByzantineValidators == nil {
		return nil, false
	}
	return o.ByzantineValidators, true
}

// HasByzantineValidators returns a boolean if a field has been set.
func (o *Block) HasByzantineValidators() bool {
	if o != nil && o.ByzantineValidators != nil {
		return true
	}

	return false
}

// SetByzantineValidators gets a reference to the given Array and assigns it to the ByzantineValidators field.
func (o *Block) SetByzantineValidators(v Array) {
	o.ByzantineValidators = &v
}

// GetLastCommitInfo returns the LastCommitInfo field value if set, zero value otherwise.
func (o *Block) GetLastCommitInfo() Array {
	if o == nil || o.LastCommitInfo == nil {
		var ret Array
		return ret
	}
	return *o.LastCommitInfo
}

// GetLastCommitInfoOk returns a tuple with the LastCommitInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Block) GetLastCommitInfoOk() (*Array, bool) {
	if o == nil || o.LastCommitInfo == nil {
		return nil, false
	}
	return o.LastCommitInfo, true
}

// HasLastCommitInfo returns a boolean if a field has been set.
func (o *Block) HasLastCommitInfo() bool {
	if o != nil && o.LastCommitInfo != nil {
		return true
	}

	return false
}

// SetLastCommitInfo gets a reference to the given Array and assigns it to the LastCommitInfo field.
func (o *Block) SetLastCommitInfo(v Array) {
	o.LastCommitInfo = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Block) GetCreatedAt() time.Time {
	if o == nil || o.CreatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Block) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Block) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *Block) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *Block) GetUpdatedAt() time.Time {
	if o == nil || o.UpdatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Block) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *Block) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *Block) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o Block) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Hash != nil {
		toSerialize["hash"] = o.Hash
	}
	if o.Height != nil {
		toSerialize["height"] = o.Height
	}
	if o.Header != nil {
		toSerialize["header"] = o.Header
	}
	if o.ByzantineValidators != nil {
		toSerialize["byzantine_validators"] = o.ByzantineValidators
	}
	if o.LastCommitInfo != nil {
		toSerialize["last_commit_info"] = o.LastCommitInfo
	}
	if o.CreatedAt != nil {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.UpdatedAt != nil {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	return json.Marshal(toSerialize)
}

type NullableBlock struct {
	value *Block
	isSet bool
}

func (v NullableBlock) Get() *Block {
	return v.value
}

func (v *NullableBlock) Set(val *Block) {
	v.value = val
	v.isSet = true
}

func (v NullableBlock) IsSet() bool {
	return v.isSet
}

func (v *NullableBlock) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlock(val *Block) *NullableBlock {
	return &NullableBlock{value: val, isSet: true}
}

func (v NullableBlock) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlock) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


