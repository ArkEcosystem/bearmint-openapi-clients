/*
Railway

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)


// DefaultApiService DefaultApi service
type DefaultApiService service

type ApiApiAccountsGetRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	fieldsAccounts *ApiAccountsGetFieldsAccountsParameter
	filterAddress *string
	filterAddressNeq *string
	filterAddressLike *string
	filterAddressIlike *string
	filterPublicKey *string
	filterPublicKeyNeq *string
	filterPublicKeyLike *string
	filterPublicKeyIlike *string
	filterName *string
	filterNameNeq *string
	filterNameLike *string
	filterNameIlike *string
	filterNonce *int32
	filterValidatorAddress *string
	filterValidatorAddressNeq *string
	filterValidatorAddressLike *string
	filterValidatorAddressIlike *string
	filterValidatorPublicKey *string
	filterValidatorPublicKeyNeq *string
	filterValidatorPublicKeyLike *string
	filterValidatorPublicKeyIlike *string
	filterValidatorPower *string
	filterValidatorPowerNeq *string
	filterValidatorPowerLike *string
	filterValidatorPowerIlike *string
	include *ApiAccountsGetIncludeParameter
	sort *ApiAccountsGetSortParameter
}

// Include the given fields in the response.
func (r ApiApiAccountsGetRequest) FieldsAccounts(fieldsAccounts ApiAccountsGetFieldsAccountsParameter) ApiApiAccountsGetRequest {
	r.fieldsAccounts = &fieldsAccounts
	return r
}

// Filter the results where the [address] field is equal to the given value.
func (r ApiApiAccountsGetRequest) FilterAddress(filterAddress string) ApiApiAccountsGetRequest {
	r.filterAddress = &filterAddress
	return r
}

// Filter the results where the [address] field is not equal to the given value.
func (r ApiApiAccountsGetRequest) FilterAddressNeq(filterAddressNeq string) ApiApiAccountsGetRequest {
	r.filterAddressNeq = &filterAddressNeq
	return r
}

// Filter the results where the [address] field is similar to the given case sensitive value.
func (r ApiApiAccountsGetRequest) FilterAddressLike(filterAddressLike string) ApiApiAccountsGetRequest {
	r.filterAddressLike = &filterAddressLike
	return r
}

// Filter the results where the [address] field is similar to the given case insensitive value.
func (r ApiApiAccountsGetRequest) FilterAddressIlike(filterAddressIlike string) ApiApiAccountsGetRequest {
	r.filterAddressIlike = &filterAddressIlike
	return r
}

// Filter the results where the [public_key] field is equal to the given value.
func (r ApiApiAccountsGetRequest) FilterPublicKey(filterPublicKey string) ApiApiAccountsGetRequest {
	r.filterPublicKey = &filterPublicKey
	return r
}

// Filter the results where the [public_key] field is not equal to the given value.
func (r ApiApiAccountsGetRequest) FilterPublicKeyNeq(filterPublicKeyNeq string) ApiApiAccountsGetRequest {
	r.filterPublicKeyNeq = &filterPublicKeyNeq
	return r
}

// Filter the results where the [public_key] field is similar to the given case sensitive value.
func (r ApiApiAccountsGetRequest) FilterPublicKeyLike(filterPublicKeyLike string) ApiApiAccountsGetRequest {
	r.filterPublicKeyLike = &filterPublicKeyLike
	return r
}

// Filter the results where the [public_key] field is similar to the given case insensitive value.
func (r ApiApiAccountsGetRequest) FilterPublicKeyIlike(filterPublicKeyIlike string) ApiApiAccountsGetRequest {
	r.filterPublicKeyIlike = &filterPublicKeyIlike
	return r
}

// Filter the results where the [name] field is equal to the given value.
func (r ApiApiAccountsGetRequest) FilterName(filterName string) ApiApiAccountsGetRequest {
	r.filterName = &filterName
	return r
}

// Filter the results where the [name] field is not equal to the given value.
func (r ApiApiAccountsGetRequest) FilterNameNeq(filterNameNeq string) ApiApiAccountsGetRequest {
	r.filterNameNeq = &filterNameNeq
	return r
}

// Filter the results where the [name] field is similar to the given case sensitive value.
func (r ApiApiAccountsGetRequest) FilterNameLike(filterNameLike string) ApiApiAccountsGetRequest {
	r.filterNameLike = &filterNameLike
	return r
}

// Filter the results where the [name] field is similar to the given case insensitive value.
func (r ApiApiAccountsGetRequest) FilterNameIlike(filterNameIlike string) ApiApiAccountsGetRequest {
	r.filterNameIlike = &filterNameIlike
	return r
}

// Filter the results where the [nonce] field is equal to the given value.
func (r ApiApiAccountsGetRequest) FilterNonce(filterNonce int32) ApiApiAccountsGetRequest {
	r.filterNonce = &filterNonce
	return r
}

// Filter the results where the [validator.address] field is equal to the given value.
func (r ApiApiAccountsGetRequest) FilterValidatorAddress(filterValidatorAddress string) ApiApiAccountsGetRequest {
	r.filterValidatorAddress = &filterValidatorAddress
	return r
}

// Filter the results where the [validator.address] field is not equal to the given value.
func (r ApiApiAccountsGetRequest) FilterValidatorAddressNeq(filterValidatorAddressNeq string) ApiApiAccountsGetRequest {
	r.filterValidatorAddressNeq = &filterValidatorAddressNeq
	return r
}

// Filter the results where the [validator.address] field is similar to the given case sensitive value.
func (r ApiApiAccountsGetRequest) FilterValidatorAddressLike(filterValidatorAddressLike string) ApiApiAccountsGetRequest {
	r.filterValidatorAddressLike = &filterValidatorAddressLike
	return r
}

// Filter the results where the [validator.address] field is similar to the given case insensitive value.
func (r ApiApiAccountsGetRequest) FilterValidatorAddressIlike(filterValidatorAddressIlike string) ApiApiAccountsGetRequest {
	r.filterValidatorAddressIlike = &filterValidatorAddressIlike
	return r
}

// Filter the results where the [validator.publicKey] field is equal to the given value.
func (r ApiApiAccountsGetRequest) FilterValidatorPublicKey(filterValidatorPublicKey string) ApiApiAccountsGetRequest {
	r.filterValidatorPublicKey = &filterValidatorPublicKey
	return r
}

// Filter the results where the [validator.publicKey] field is not equal to the given value.
func (r ApiApiAccountsGetRequest) FilterValidatorPublicKeyNeq(filterValidatorPublicKeyNeq string) ApiApiAccountsGetRequest {
	r.filterValidatorPublicKeyNeq = &filterValidatorPublicKeyNeq
	return r
}

// Filter the results where the [validator.publicKey] field is similar to the given case sensitive value.
func (r ApiApiAccountsGetRequest) FilterValidatorPublicKeyLike(filterValidatorPublicKeyLike string) ApiApiAccountsGetRequest {
	r.filterValidatorPublicKeyLike = &filterValidatorPublicKeyLike
	return r
}

// Filter the results where the [validator.publicKey] field is similar to the given case insensitive value.
func (r ApiApiAccountsGetRequest) FilterValidatorPublicKeyIlike(filterValidatorPublicKeyIlike string) ApiApiAccountsGetRequest {
	r.filterValidatorPublicKeyIlike = &filterValidatorPublicKeyIlike
	return r
}

// Filter the results where the [validator.power] field is equal to the given value.
func (r ApiApiAccountsGetRequest) FilterValidatorPower(filterValidatorPower string) ApiApiAccountsGetRequest {
	r.filterValidatorPower = &filterValidatorPower
	return r
}

// Filter the results where the [validator.power] field is not equal to the given value.
func (r ApiApiAccountsGetRequest) FilterValidatorPowerNeq(filterValidatorPowerNeq string) ApiApiAccountsGetRequest {
	r.filterValidatorPowerNeq = &filterValidatorPowerNeq
	return r
}

// Filter the results where the [validator.power] field is similar to the given case sensitive value.
func (r ApiApiAccountsGetRequest) FilterValidatorPowerLike(filterValidatorPowerLike string) ApiApiAccountsGetRequest {
	r.filterValidatorPowerLike = &filterValidatorPowerLike
	return r
}

// Filter the results where the [validator.power] field is similar to the given case insensitive value.
func (r ApiApiAccountsGetRequest) FilterValidatorPowerIlike(filterValidatorPowerIlike string) ApiApiAccountsGetRequest {
	r.filterValidatorPowerIlike = &filterValidatorPowerIlike
	return r
}

// Include the given relationships.
func (r ApiApiAccountsGetRequest) Include(include ApiAccountsGetIncludeParameter) ApiApiAccountsGetRequest {
	r.include = &include
	return r
}

// Sort the results by the given field and direction.
func (r ApiApiAccountsGetRequest) Sort(sort ApiAccountsGetSortParameter) ApiApiAccountsGetRequest {
	r.sort = &sort
	return r
}

func (r ApiApiAccountsGetRequest) Execute() (*ApiAccountsGet200Response, *http.Response, error) {
	return r.ApiService.ApiAccountsGetExecute(r)
}

/*
ApiAccountsGet List accounts

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiAccountsGetRequest
*/
func (a *DefaultApiService) ApiAccountsGet(ctx context.Context) ApiApiAccountsGetRequest {
	return ApiApiAccountsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ApiAccountsGet200Response
func (a *DefaultApiService) ApiAccountsGetExecute(r ApiApiAccountsGetRequest) (*ApiAccountsGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiAccountsGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ApiAccountsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/accounts"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsAccounts != nil {
		localVarQueryParams.Add("fields[accounts]", parameterToString(*r.fieldsAccounts, ""))
	}
	if r.filterAddress != nil {
		localVarQueryParams.Add("filter[address]", parameterToString(*r.filterAddress, ""))
	}
	if r.filterAddressNeq != nil {
		localVarQueryParams.Add("filter[address.neq]", parameterToString(*r.filterAddressNeq, ""))
	}
	if r.filterAddressLike != nil {
		localVarQueryParams.Add("filter[address.like]", parameterToString(*r.filterAddressLike, ""))
	}
	if r.filterAddressIlike != nil {
		localVarQueryParams.Add("filter[address.ilike]", parameterToString(*r.filterAddressIlike, ""))
	}
	if r.filterPublicKey != nil {
		localVarQueryParams.Add("filter[public_key]", parameterToString(*r.filterPublicKey, ""))
	}
	if r.filterPublicKeyNeq != nil {
		localVarQueryParams.Add("filter[public_key.neq]", parameterToString(*r.filterPublicKeyNeq, ""))
	}
	if r.filterPublicKeyLike != nil {
		localVarQueryParams.Add("filter[public_key.like]", parameterToString(*r.filterPublicKeyLike, ""))
	}
	if r.filterPublicKeyIlike != nil {
		localVarQueryParams.Add("filter[public_key.ilike]", parameterToString(*r.filterPublicKeyIlike, ""))
	}
	if r.filterName != nil {
		localVarQueryParams.Add("filter[name]", parameterToString(*r.filterName, ""))
	}
	if r.filterNameNeq != nil {
		localVarQueryParams.Add("filter[name.neq]", parameterToString(*r.filterNameNeq, ""))
	}
	if r.filterNameLike != nil {
		localVarQueryParams.Add("filter[name.like]", parameterToString(*r.filterNameLike, ""))
	}
	if r.filterNameIlike != nil {
		localVarQueryParams.Add("filter[name.ilike]", parameterToString(*r.filterNameIlike, ""))
	}
	if r.filterNonce != nil {
		localVarQueryParams.Add("filter[nonce]", parameterToString(*r.filterNonce, ""))
	}
	if r.filterValidatorAddress != nil {
		localVarQueryParams.Add("filter[validator.address]", parameterToString(*r.filterValidatorAddress, ""))
	}
	if r.filterValidatorAddressNeq != nil {
		localVarQueryParams.Add("filter[validator.address.neq]", parameterToString(*r.filterValidatorAddressNeq, ""))
	}
	if r.filterValidatorAddressLike != nil {
		localVarQueryParams.Add("filter[validator.address.like]", parameterToString(*r.filterValidatorAddressLike, ""))
	}
	if r.filterValidatorAddressIlike != nil {
		localVarQueryParams.Add("filter[validator.address.ilike]", parameterToString(*r.filterValidatorAddressIlike, ""))
	}
	if r.filterValidatorPublicKey != nil {
		localVarQueryParams.Add("filter[validator.publicKey]", parameterToString(*r.filterValidatorPublicKey, ""))
	}
	if r.filterValidatorPublicKeyNeq != nil {
		localVarQueryParams.Add("filter[validator.publicKey.neq]", parameterToString(*r.filterValidatorPublicKeyNeq, ""))
	}
	if r.filterValidatorPublicKeyLike != nil {
		localVarQueryParams.Add("filter[validator.publicKey.like]", parameterToString(*r.filterValidatorPublicKeyLike, ""))
	}
	if r.filterValidatorPublicKeyIlike != nil {
		localVarQueryParams.Add("filter[validator.publicKey.ilike]", parameterToString(*r.filterValidatorPublicKeyIlike, ""))
	}
	if r.filterValidatorPower != nil {
		localVarQueryParams.Add("filter[validator.power]", parameterToString(*r.filterValidatorPower, ""))
	}
	if r.filterValidatorPowerNeq != nil {
		localVarQueryParams.Add("filter[validator.power.neq]", parameterToString(*r.filterValidatorPowerNeq, ""))
	}
	if r.filterValidatorPowerLike != nil {
		localVarQueryParams.Add("filter[validator.power.like]", parameterToString(*r.filterValidatorPowerLike, ""))
	}
	if r.filterValidatorPowerIlike != nil {
		localVarQueryParams.Add("filter[validator.power.ilike]", parameterToString(*r.filterValidatorPowerIlike, ""))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, ""))
	}
	if r.sort != nil {
		localVarQueryParams.Add("sort", parameterToString(*r.sort, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiAccountsMetadataGetRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	fieldsAccountsMetadata *ApiAccountsMetadataGetFieldsAccountsMetadataParameter
	filterAccountId *int32
	filterModule *string
	filterModuleNeq *string
	filterModuleLike *string
	filterModuleIlike *string
	filterKey *string
	filterKeyNeq *string
	filterKeyLike *string
	filterKeyIlike *string
	filterValue *string
	filterValueNeq *string
	filterValueLike *string
	filterValueIlike *string
	include *ApiAccountsMetadataGetIncludeParameter
	sort *ApiAccountsMetadataGetSortParameter
}

// Include the given fields in the response.
func (r ApiApiAccountsMetadataGetRequest) FieldsAccountsMetadata(fieldsAccountsMetadata ApiAccountsMetadataGetFieldsAccountsMetadataParameter) ApiApiAccountsMetadataGetRequest {
	r.fieldsAccountsMetadata = &fieldsAccountsMetadata
	return r
}

// Filter the results where the [account_id] field is equal to the given value.
func (r ApiApiAccountsMetadataGetRequest) FilterAccountId(filterAccountId int32) ApiApiAccountsMetadataGetRequest {
	r.filterAccountId = &filterAccountId
	return r
}

// Filter the results where the [module] field is equal to the given value.
func (r ApiApiAccountsMetadataGetRequest) FilterModule(filterModule string) ApiApiAccountsMetadataGetRequest {
	r.filterModule = &filterModule
	return r
}

// Filter the results where the [module] field is not equal to the given value.
func (r ApiApiAccountsMetadataGetRequest) FilterModuleNeq(filterModuleNeq string) ApiApiAccountsMetadataGetRequest {
	r.filterModuleNeq = &filterModuleNeq
	return r
}

// Filter the results where the [module] field is similar to the given case sensitive value.
func (r ApiApiAccountsMetadataGetRequest) FilterModuleLike(filterModuleLike string) ApiApiAccountsMetadataGetRequest {
	r.filterModuleLike = &filterModuleLike
	return r
}

// Filter the results where the [module] field is similar to the given case insensitive value.
func (r ApiApiAccountsMetadataGetRequest) FilterModuleIlike(filterModuleIlike string) ApiApiAccountsMetadataGetRequest {
	r.filterModuleIlike = &filterModuleIlike
	return r
}

// Filter the results where the [key] field is equal to the given value.
func (r ApiApiAccountsMetadataGetRequest) FilterKey(filterKey string) ApiApiAccountsMetadataGetRequest {
	r.filterKey = &filterKey
	return r
}

// Filter the results where the [key] field is not equal to the given value.
func (r ApiApiAccountsMetadataGetRequest) FilterKeyNeq(filterKeyNeq string) ApiApiAccountsMetadataGetRequest {
	r.filterKeyNeq = &filterKeyNeq
	return r
}

// Filter the results where the [key] field is similar to the given case sensitive value.
func (r ApiApiAccountsMetadataGetRequest) FilterKeyLike(filterKeyLike string) ApiApiAccountsMetadataGetRequest {
	r.filterKeyLike = &filterKeyLike
	return r
}

// Filter the results where the [key] field is similar to the given case insensitive value.
func (r ApiApiAccountsMetadataGetRequest) FilterKeyIlike(filterKeyIlike string) ApiApiAccountsMetadataGetRequest {
	r.filterKeyIlike = &filterKeyIlike
	return r
}

// Filter the results where the [value] field is equal to the given value.
func (r ApiApiAccountsMetadataGetRequest) FilterValue(filterValue string) ApiApiAccountsMetadataGetRequest {
	r.filterValue = &filterValue
	return r
}

// Filter the results where the [value] field is not equal to the given value.
func (r ApiApiAccountsMetadataGetRequest) FilterValueNeq(filterValueNeq string) ApiApiAccountsMetadataGetRequest {
	r.filterValueNeq = &filterValueNeq
	return r
}

// Filter the results where the [value] field is similar to the given case sensitive value.
func (r ApiApiAccountsMetadataGetRequest) FilterValueLike(filterValueLike string) ApiApiAccountsMetadataGetRequest {
	r.filterValueLike = &filterValueLike
	return r
}

// Filter the results where the [value] field is similar to the given case insensitive value.
func (r ApiApiAccountsMetadataGetRequest) FilterValueIlike(filterValueIlike string) ApiApiAccountsMetadataGetRequest {
	r.filterValueIlike = &filterValueIlike
	return r
}

// Include the given relationships.
func (r ApiApiAccountsMetadataGetRequest) Include(include ApiAccountsMetadataGetIncludeParameter) ApiApiAccountsMetadataGetRequest {
	r.include = &include
	return r
}

// Sort the results by the given field and direction.
func (r ApiApiAccountsMetadataGetRequest) Sort(sort ApiAccountsMetadataGetSortParameter) ApiApiAccountsMetadataGetRequest {
	r.sort = &sort
	return r
}

func (r ApiApiAccountsMetadataGetRequest) Execute() (*ApiAccountsMetadataGet200Response, *http.Response, error) {
	return r.ApiService.ApiAccountsMetadataGetExecute(r)
}

/*
ApiAccountsMetadataGet List account metadata

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiAccountsMetadataGetRequest
*/
func (a *DefaultApiService) ApiAccountsMetadataGet(ctx context.Context) ApiApiAccountsMetadataGetRequest {
	return ApiApiAccountsMetadataGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ApiAccountsMetadataGet200Response
func (a *DefaultApiService) ApiAccountsMetadataGetExecute(r ApiApiAccountsMetadataGetRequest) (*ApiAccountsMetadataGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiAccountsMetadataGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ApiAccountsMetadataGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/accounts/metadata"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsAccountsMetadata != nil {
		localVarQueryParams.Add("fields[accounts_metadata]", parameterToString(*r.fieldsAccountsMetadata, ""))
	}
	if r.filterAccountId != nil {
		localVarQueryParams.Add("filter[account_id]", parameterToString(*r.filterAccountId, ""))
	}
	if r.filterModule != nil {
		localVarQueryParams.Add("filter[module]", parameterToString(*r.filterModule, ""))
	}
	if r.filterModuleNeq != nil {
		localVarQueryParams.Add("filter[module.neq]", parameterToString(*r.filterModuleNeq, ""))
	}
	if r.filterModuleLike != nil {
		localVarQueryParams.Add("filter[module.like]", parameterToString(*r.filterModuleLike, ""))
	}
	if r.filterModuleIlike != nil {
		localVarQueryParams.Add("filter[module.ilike]", parameterToString(*r.filterModuleIlike, ""))
	}
	if r.filterKey != nil {
		localVarQueryParams.Add("filter[key]", parameterToString(*r.filterKey, ""))
	}
	if r.filterKeyNeq != nil {
		localVarQueryParams.Add("filter[key.neq]", parameterToString(*r.filterKeyNeq, ""))
	}
	if r.filterKeyLike != nil {
		localVarQueryParams.Add("filter[key.like]", parameterToString(*r.filterKeyLike, ""))
	}
	if r.filterKeyIlike != nil {
		localVarQueryParams.Add("filter[key.ilike]", parameterToString(*r.filterKeyIlike, ""))
	}
	if r.filterValue != nil {
		localVarQueryParams.Add("filter[value]", parameterToString(*r.filterValue, ""))
	}
	if r.filterValueNeq != nil {
		localVarQueryParams.Add("filter[value.neq]", parameterToString(*r.filterValueNeq, ""))
	}
	if r.filterValueLike != nil {
		localVarQueryParams.Add("filter[value.like]", parameterToString(*r.filterValueLike, ""))
	}
	if r.filterValueIlike != nil {
		localVarQueryParams.Add("filter[value.ilike]", parameterToString(*r.filterValueIlike, ""))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, ""))
	}
	if r.sort != nil {
		localVarQueryParams.Add("sort", parameterToString(*r.sort, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiBlocksGetRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	fieldsBlocks *ApiBlocksGetFieldsBlocksParameter
	filterHash *string
	filterHashNeq *string
	filterHashLike *string
	filterHashIlike *string
	filterHeight *int32
	filterHeaderVersionBlock *int32
	filterHeaderChainId *string
	filterHeaderChainIdNeq *string
	filterHeaderChainIdLike *string
	filterHeaderChainIdIlike *string
	filterHeaderHeight *int32
	filterHeaderTime *string
	filterHeaderTimeNeq *string
	filterHeaderTimeLike *string
	filterHeaderTimeIlike *string
	filterHeaderLastBlockIdHash *string
	filterHeaderLastBlockIdHashNeq *string
	filterHeaderLastBlockIdHashLike *string
	filterHeaderLastBlockIdHashIlike *string
	filterHeaderLastBlockIdPartSetHeaderTotal *int32
	filterHeaderLastBlockIdPartSetHeaderHash *string
	filterHeaderLastBlockIdPartSetHeaderHashNeq *string
	filterHeaderLastBlockIdPartSetHeaderHashLike *string
	filterHeaderLastBlockIdPartSetHeaderHashIlike *string
	filterHeaderLastCommitHash *string
	filterHeaderLastCommitHashNeq *string
	filterHeaderLastCommitHashLike *string
	filterHeaderLastCommitHashIlike *string
	filterHeaderDataHash *string
	filterHeaderDataHashNeq *string
	filterHeaderDataHashLike *string
	filterHeaderDataHashIlike *string
	filterHeaderValidatorsHash *string
	filterHeaderValidatorsHashNeq *string
	filterHeaderValidatorsHashLike *string
	filterHeaderValidatorsHashIlike *string
	filterHeaderNextValidatorsHash *string
	filterHeaderNextValidatorsHashNeq *string
	filterHeaderNextValidatorsHashLike *string
	filterHeaderNextValidatorsHashIlike *string
	filterHeaderConsensusHash *string
	filterHeaderConsensusHashNeq *string
	filterHeaderConsensusHashLike *string
	filterHeaderConsensusHashIlike *string
	filterHeaderAppHash *string
	filterHeaderAppHashNeq *string
	filterHeaderAppHashLike *string
	filterHeaderAppHashIlike *string
	filterHeaderLastResultsHash *string
	filterHeaderLastResultsHashNeq *string
	filterHeaderLastResultsHashLike *string
	filterHeaderLastResultsHashIlike *string
	filterHeaderEvidenceHash *string
	filterHeaderEvidenceHashNeq *string
	filterHeaderEvidenceHashLike *string
	filterHeaderEvidenceHashIlike *string
	filterHeaderProposerAddress *string
	filterHeaderProposerAddressNeq *string
	filterHeaderProposerAddressLike *string
	filterHeaderProposerAddressIlike *string
	include *ApiBlocksGetIncludeParameter
	sort *ApiBlocksGetSortParameter
}

// Include the given fields in the response.
func (r ApiApiBlocksGetRequest) FieldsBlocks(fieldsBlocks ApiBlocksGetFieldsBlocksParameter) ApiApiBlocksGetRequest {
	r.fieldsBlocks = &fieldsBlocks
	return r
}

// Filter the results where the [hash] field is equal to the given value.
func (r ApiApiBlocksGetRequest) FilterHash(filterHash string) ApiApiBlocksGetRequest {
	r.filterHash = &filterHash
	return r
}

// Filter the results where the [hash] field is not equal to the given value.
func (r ApiApiBlocksGetRequest) FilterHashNeq(filterHashNeq string) ApiApiBlocksGetRequest {
	r.filterHashNeq = &filterHashNeq
	return r
}

// Filter the results where the [hash] field is similar to the given case sensitive value.
func (r ApiApiBlocksGetRequest) FilterHashLike(filterHashLike string) ApiApiBlocksGetRequest {
	r.filterHashLike = &filterHashLike
	return r
}

// Filter the results where the [hash] field is similar to the given case insensitive value.
func (r ApiApiBlocksGetRequest) FilterHashIlike(filterHashIlike string) ApiApiBlocksGetRequest {
	r.filterHashIlike = &filterHashIlike
	return r
}

// Filter the results where the [height] field is equal to the given value.
func (r ApiApiBlocksGetRequest) FilterHeight(filterHeight int32) ApiApiBlocksGetRequest {
	r.filterHeight = &filterHeight
	return r
}

// Filter the results where the [header.version.block] field is equal to the given value.
func (r ApiApiBlocksGetRequest) FilterHeaderVersionBlock(filterHeaderVersionBlock int32) ApiApiBlocksGetRequest {
	r.filterHeaderVersionBlock = &filterHeaderVersionBlock
	return r
}

// Filter the results where the [header.chainId] field is equal to the given value.
func (r ApiApiBlocksGetRequest) FilterHeaderChainId(filterHeaderChainId string) ApiApiBlocksGetRequest {
	r.filterHeaderChainId = &filterHeaderChainId
	return r
}

// Filter the results where the [header.chainId] field is not equal to the given value.
func (r ApiApiBlocksGetRequest) FilterHeaderChainIdNeq(filterHeaderChainIdNeq string) ApiApiBlocksGetRequest {
	r.filterHeaderChainIdNeq = &filterHeaderChainIdNeq
	return r
}

// Filter the results where the [header.chainId] field is similar to the given case sensitive value.
func (r ApiApiBlocksGetRequest) FilterHeaderChainIdLike(filterHeaderChainIdLike string) ApiApiBlocksGetRequest {
	r.filterHeaderChainIdLike = &filterHeaderChainIdLike
	return r
}

// Filter the results where the [header.chainId] field is similar to the given case insensitive value.
func (r ApiApiBlocksGetRequest) FilterHeaderChainIdIlike(filterHeaderChainIdIlike string) ApiApiBlocksGetRequest {
	r.filterHeaderChainIdIlike = &filterHeaderChainIdIlike
	return r
}

// Filter the results where the [header.height] field is equal to the given value.
func (r ApiApiBlocksGetRequest) FilterHeaderHeight(filterHeaderHeight int32) ApiApiBlocksGetRequest {
	r.filterHeaderHeight = &filterHeaderHeight
	return r
}

// Filter the results where the [header.time] field is equal to the given value.
func (r ApiApiBlocksGetRequest) FilterHeaderTime(filterHeaderTime string) ApiApiBlocksGetRequest {
	r.filterHeaderTime = &filterHeaderTime
	return r
}

// Filter the results where the [header.time] field is not equal to the given value.
func (r ApiApiBlocksGetRequest) FilterHeaderTimeNeq(filterHeaderTimeNeq string) ApiApiBlocksGetRequest {
	r.filterHeaderTimeNeq = &filterHeaderTimeNeq
	return r
}

// Filter the results where the [header.time] field is similar to the given case sensitive value.
func (r ApiApiBlocksGetRequest) FilterHeaderTimeLike(filterHeaderTimeLike string) ApiApiBlocksGetRequest {
	r.filterHeaderTimeLike = &filterHeaderTimeLike
	return r
}

// Filter the results where the [header.time] field is similar to the given case insensitive value.
func (r ApiApiBlocksGetRequest) FilterHeaderTimeIlike(filterHeaderTimeIlike string) ApiApiBlocksGetRequest {
	r.filterHeaderTimeIlike = &filterHeaderTimeIlike
	return r
}

// Filter the results where the [header.lastBlockId.hash] field is equal to the given value.
func (r ApiApiBlocksGetRequest) FilterHeaderLastBlockIdHash(filterHeaderLastBlockIdHash string) ApiApiBlocksGetRequest {
	r.filterHeaderLastBlockIdHash = &filterHeaderLastBlockIdHash
	return r
}

// Filter the results where the [header.lastBlockId.hash] field is not equal to the given value.
func (r ApiApiBlocksGetRequest) FilterHeaderLastBlockIdHashNeq(filterHeaderLastBlockIdHashNeq string) ApiApiBlocksGetRequest {
	r.filterHeaderLastBlockIdHashNeq = &filterHeaderLastBlockIdHashNeq
	return r
}

// Filter the results where the [header.lastBlockId.hash] field is similar to the given case sensitive value.
func (r ApiApiBlocksGetRequest) FilterHeaderLastBlockIdHashLike(filterHeaderLastBlockIdHashLike string) ApiApiBlocksGetRequest {
	r.filterHeaderLastBlockIdHashLike = &filterHeaderLastBlockIdHashLike
	return r
}

// Filter the results where the [header.lastBlockId.hash] field is similar to the given case insensitive value.
func (r ApiApiBlocksGetRequest) FilterHeaderLastBlockIdHashIlike(filterHeaderLastBlockIdHashIlike string) ApiApiBlocksGetRequest {
	r.filterHeaderLastBlockIdHashIlike = &filterHeaderLastBlockIdHashIlike
	return r
}

// Filter the results where the [header.lastBlockId.partSetHeader.total] field is equal to the given value.
func (r ApiApiBlocksGetRequest) FilterHeaderLastBlockIdPartSetHeaderTotal(filterHeaderLastBlockIdPartSetHeaderTotal int32) ApiApiBlocksGetRequest {
	r.filterHeaderLastBlockIdPartSetHeaderTotal = &filterHeaderLastBlockIdPartSetHeaderTotal
	return r
}

// Filter the results where the [header.lastBlockId.partSetHeader.hash] field is equal to the given value.
func (r ApiApiBlocksGetRequest) FilterHeaderLastBlockIdPartSetHeaderHash(filterHeaderLastBlockIdPartSetHeaderHash string) ApiApiBlocksGetRequest {
	r.filterHeaderLastBlockIdPartSetHeaderHash = &filterHeaderLastBlockIdPartSetHeaderHash
	return r
}

// Filter the results where the [header.lastBlockId.partSetHeader.hash] field is not equal to the given value.
func (r ApiApiBlocksGetRequest) FilterHeaderLastBlockIdPartSetHeaderHashNeq(filterHeaderLastBlockIdPartSetHeaderHashNeq string) ApiApiBlocksGetRequest {
	r.filterHeaderLastBlockIdPartSetHeaderHashNeq = &filterHeaderLastBlockIdPartSetHeaderHashNeq
	return r
}

// Filter the results where the [header.lastBlockId.partSetHeader.hash] field is similar to the given case sensitive value.
func (r ApiApiBlocksGetRequest) FilterHeaderLastBlockIdPartSetHeaderHashLike(filterHeaderLastBlockIdPartSetHeaderHashLike string) ApiApiBlocksGetRequest {
	r.filterHeaderLastBlockIdPartSetHeaderHashLike = &filterHeaderLastBlockIdPartSetHeaderHashLike
	return r
}

// Filter the results where the [header.lastBlockId.partSetHeader.hash] field is similar to the given case insensitive value.
func (r ApiApiBlocksGetRequest) FilterHeaderLastBlockIdPartSetHeaderHashIlike(filterHeaderLastBlockIdPartSetHeaderHashIlike string) ApiApiBlocksGetRequest {
	r.filterHeaderLastBlockIdPartSetHeaderHashIlike = &filterHeaderLastBlockIdPartSetHeaderHashIlike
	return r
}

// Filter the results where the [header.lastCommitHash] field is equal to the given value.
func (r ApiApiBlocksGetRequest) FilterHeaderLastCommitHash(filterHeaderLastCommitHash string) ApiApiBlocksGetRequest {
	r.filterHeaderLastCommitHash = &filterHeaderLastCommitHash
	return r
}

// Filter the results where the [header.lastCommitHash] field is not equal to the given value.
func (r ApiApiBlocksGetRequest) FilterHeaderLastCommitHashNeq(filterHeaderLastCommitHashNeq string) ApiApiBlocksGetRequest {
	r.filterHeaderLastCommitHashNeq = &filterHeaderLastCommitHashNeq
	return r
}

// Filter the results where the [header.lastCommitHash] field is similar to the given case sensitive value.
func (r ApiApiBlocksGetRequest) FilterHeaderLastCommitHashLike(filterHeaderLastCommitHashLike string) ApiApiBlocksGetRequest {
	r.filterHeaderLastCommitHashLike = &filterHeaderLastCommitHashLike
	return r
}

// Filter the results where the [header.lastCommitHash] field is similar to the given case insensitive value.
func (r ApiApiBlocksGetRequest) FilterHeaderLastCommitHashIlike(filterHeaderLastCommitHashIlike string) ApiApiBlocksGetRequest {
	r.filterHeaderLastCommitHashIlike = &filterHeaderLastCommitHashIlike
	return r
}

// Filter the results where the [header.dataHash] field is equal to the given value.
func (r ApiApiBlocksGetRequest) FilterHeaderDataHash(filterHeaderDataHash string) ApiApiBlocksGetRequest {
	r.filterHeaderDataHash = &filterHeaderDataHash
	return r
}

// Filter the results where the [header.dataHash] field is not equal to the given value.
func (r ApiApiBlocksGetRequest) FilterHeaderDataHashNeq(filterHeaderDataHashNeq string) ApiApiBlocksGetRequest {
	r.filterHeaderDataHashNeq = &filterHeaderDataHashNeq
	return r
}

// Filter the results where the [header.dataHash] field is similar to the given case sensitive value.
func (r ApiApiBlocksGetRequest) FilterHeaderDataHashLike(filterHeaderDataHashLike string) ApiApiBlocksGetRequest {
	r.filterHeaderDataHashLike = &filterHeaderDataHashLike
	return r
}

// Filter the results where the [header.dataHash] field is similar to the given case insensitive value.
func (r ApiApiBlocksGetRequest) FilterHeaderDataHashIlike(filterHeaderDataHashIlike string) ApiApiBlocksGetRequest {
	r.filterHeaderDataHashIlike = &filterHeaderDataHashIlike
	return r
}

// Filter the results where the [header.validatorsHash] field is equal to the given value.
func (r ApiApiBlocksGetRequest) FilterHeaderValidatorsHash(filterHeaderValidatorsHash string) ApiApiBlocksGetRequest {
	r.filterHeaderValidatorsHash = &filterHeaderValidatorsHash
	return r
}

// Filter the results where the [header.validatorsHash] field is not equal to the given value.
func (r ApiApiBlocksGetRequest) FilterHeaderValidatorsHashNeq(filterHeaderValidatorsHashNeq string) ApiApiBlocksGetRequest {
	r.filterHeaderValidatorsHashNeq = &filterHeaderValidatorsHashNeq
	return r
}

// Filter the results where the [header.validatorsHash] field is similar to the given case sensitive value.
func (r ApiApiBlocksGetRequest) FilterHeaderValidatorsHashLike(filterHeaderValidatorsHashLike string) ApiApiBlocksGetRequest {
	r.filterHeaderValidatorsHashLike = &filterHeaderValidatorsHashLike
	return r
}

// Filter the results where the [header.validatorsHash] field is similar to the given case insensitive value.
func (r ApiApiBlocksGetRequest) FilterHeaderValidatorsHashIlike(filterHeaderValidatorsHashIlike string) ApiApiBlocksGetRequest {
	r.filterHeaderValidatorsHashIlike = &filterHeaderValidatorsHashIlike
	return r
}

// Filter the results where the [header.nextValidatorsHash] field is equal to the given value.
func (r ApiApiBlocksGetRequest) FilterHeaderNextValidatorsHash(filterHeaderNextValidatorsHash string) ApiApiBlocksGetRequest {
	r.filterHeaderNextValidatorsHash = &filterHeaderNextValidatorsHash
	return r
}

// Filter the results where the [header.nextValidatorsHash] field is not equal to the given value.
func (r ApiApiBlocksGetRequest) FilterHeaderNextValidatorsHashNeq(filterHeaderNextValidatorsHashNeq string) ApiApiBlocksGetRequest {
	r.filterHeaderNextValidatorsHashNeq = &filterHeaderNextValidatorsHashNeq
	return r
}

// Filter the results where the [header.nextValidatorsHash] field is similar to the given case sensitive value.
func (r ApiApiBlocksGetRequest) FilterHeaderNextValidatorsHashLike(filterHeaderNextValidatorsHashLike string) ApiApiBlocksGetRequest {
	r.filterHeaderNextValidatorsHashLike = &filterHeaderNextValidatorsHashLike
	return r
}

// Filter the results where the [header.nextValidatorsHash] field is similar to the given case insensitive value.
func (r ApiApiBlocksGetRequest) FilterHeaderNextValidatorsHashIlike(filterHeaderNextValidatorsHashIlike string) ApiApiBlocksGetRequest {
	r.filterHeaderNextValidatorsHashIlike = &filterHeaderNextValidatorsHashIlike
	return r
}

// Filter the results where the [header.consensusHash] field is equal to the given value.
func (r ApiApiBlocksGetRequest) FilterHeaderConsensusHash(filterHeaderConsensusHash string) ApiApiBlocksGetRequest {
	r.filterHeaderConsensusHash = &filterHeaderConsensusHash
	return r
}

// Filter the results where the [header.consensusHash] field is not equal to the given value.
func (r ApiApiBlocksGetRequest) FilterHeaderConsensusHashNeq(filterHeaderConsensusHashNeq string) ApiApiBlocksGetRequest {
	r.filterHeaderConsensusHashNeq = &filterHeaderConsensusHashNeq
	return r
}

// Filter the results where the [header.consensusHash] field is similar to the given case sensitive value.
func (r ApiApiBlocksGetRequest) FilterHeaderConsensusHashLike(filterHeaderConsensusHashLike string) ApiApiBlocksGetRequest {
	r.filterHeaderConsensusHashLike = &filterHeaderConsensusHashLike
	return r
}

// Filter the results where the [header.consensusHash] field is similar to the given case insensitive value.
func (r ApiApiBlocksGetRequest) FilterHeaderConsensusHashIlike(filterHeaderConsensusHashIlike string) ApiApiBlocksGetRequest {
	r.filterHeaderConsensusHashIlike = &filterHeaderConsensusHashIlike
	return r
}

// Filter the results where the [header.appHash] field is equal to the given value.
func (r ApiApiBlocksGetRequest) FilterHeaderAppHash(filterHeaderAppHash string) ApiApiBlocksGetRequest {
	r.filterHeaderAppHash = &filterHeaderAppHash
	return r
}

// Filter the results where the [header.appHash] field is not equal to the given value.
func (r ApiApiBlocksGetRequest) FilterHeaderAppHashNeq(filterHeaderAppHashNeq string) ApiApiBlocksGetRequest {
	r.filterHeaderAppHashNeq = &filterHeaderAppHashNeq
	return r
}

// Filter the results where the [header.appHash] field is similar to the given case sensitive value.
func (r ApiApiBlocksGetRequest) FilterHeaderAppHashLike(filterHeaderAppHashLike string) ApiApiBlocksGetRequest {
	r.filterHeaderAppHashLike = &filterHeaderAppHashLike
	return r
}

// Filter the results where the [header.appHash] field is similar to the given case insensitive value.
func (r ApiApiBlocksGetRequest) FilterHeaderAppHashIlike(filterHeaderAppHashIlike string) ApiApiBlocksGetRequest {
	r.filterHeaderAppHashIlike = &filterHeaderAppHashIlike
	return r
}

// Filter the results where the [header.lastResultsHash] field is equal to the given value.
func (r ApiApiBlocksGetRequest) FilterHeaderLastResultsHash(filterHeaderLastResultsHash string) ApiApiBlocksGetRequest {
	r.filterHeaderLastResultsHash = &filterHeaderLastResultsHash
	return r
}

// Filter the results where the [header.lastResultsHash] field is not equal to the given value.
func (r ApiApiBlocksGetRequest) FilterHeaderLastResultsHashNeq(filterHeaderLastResultsHashNeq string) ApiApiBlocksGetRequest {
	r.filterHeaderLastResultsHashNeq = &filterHeaderLastResultsHashNeq
	return r
}

// Filter the results where the [header.lastResultsHash] field is similar to the given case sensitive value.
func (r ApiApiBlocksGetRequest) FilterHeaderLastResultsHashLike(filterHeaderLastResultsHashLike string) ApiApiBlocksGetRequest {
	r.filterHeaderLastResultsHashLike = &filterHeaderLastResultsHashLike
	return r
}

// Filter the results where the [header.lastResultsHash] field is similar to the given case insensitive value.
func (r ApiApiBlocksGetRequest) FilterHeaderLastResultsHashIlike(filterHeaderLastResultsHashIlike string) ApiApiBlocksGetRequest {
	r.filterHeaderLastResultsHashIlike = &filterHeaderLastResultsHashIlike
	return r
}

// Filter the results where the [header.evidenceHash] field is equal to the given value.
func (r ApiApiBlocksGetRequest) FilterHeaderEvidenceHash(filterHeaderEvidenceHash string) ApiApiBlocksGetRequest {
	r.filterHeaderEvidenceHash = &filterHeaderEvidenceHash
	return r
}

// Filter the results where the [header.evidenceHash] field is not equal to the given value.
func (r ApiApiBlocksGetRequest) FilterHeaderEvidenceHashNeq(filterHeaderEvidenceHashNeq string) ApiApiBlocksGetRequest {
	r.filterHeaderEvidenceHashNeq = &filterHeaderEvidenceHashNeq
	return r
}

// Filter the results where the [header.evidenceHash] field is similar to the given case sensitive value.
func (r ApiApiBlocksGetRequest) FilterHeaderEvidenceHashLike(filterHeaderEvidenceHashLike string) ApiApiBlocksGetRequest {
	r.filterHeaderEvidenceHashLike = &filterHeaderEvidenceHashLike
	return r
}

// Filter the results where the [header.evidenceHash] field is similar to the given case insensitive value.
func (r ApiApiBlocksGetRequest) FilterHeaderEvidenceHashIlike(filterHeaderEvidenceHashIlike string) ApiApiBlocksGetRequest {
	r.filterHeaderEvidenceHashIlike = &filterHeaderEvidenceHashIlike
	return r
}

// Filter the results where the [header.proposerAddress] field is equal to the given value.
func (r ApiApiBlocksGetRequest) FilterHeaderProposerAddress(filterHeaderProposerAddress string) ApiApiBlocksGetRequest {
	r.filterHeaderProposerAddress = &filterHeaderProposerAddress
	return r
}

// Filter the results where the [header.proposerAddress] field is not equal to the given value.
func (r ApiApiBlocksGetRequest) FilterHeaderProposerAddressNeq(filterHeaderProposerAddressNeq string) ApiApiBlocksGetRequest {
	r.filterHeaderProposerAddressNeq = &filterHeaderProposerAddressNeq
	return r
}

// Filter the results where the [header.proposerAddress] field is similar to the given case sensitive value.
func (r ApiApiBlocksGetRequest) FilterHeaderProposerAddressLike(filterHeaderProposerAddressLike string) ApiApiBlocksGetRequest {
	r.filterHeaderProposerAddressLike = &filterHeaderProposerAddressLike
	return r
}

// Filter the results where the [header.proposerAddress] field is similar to the given case insensitive value.
func (r ApiApiBlocksGetRequest) FilterHeaderProposerAddressIlike(filterHeaderProposerAddressIlike string) ApiApiBlocksGetRequest {
	r.filterHeaderProposerAddressIlike = &filterHeaderProposerAddressIlike
	return r
}

// Include the given relationships.
func (r ApiApiBlocksGetRequest) Include(include ApiBlocksGetIncludeParameter) ApiApiBlocksGetRequest {
	r.include = &include
	return r
}

// Sort the results by the given field and direction.
func (r ApiApiBlocksGetRequest) Sort(sort ApiBlocksGetSortParameter) ApiApiBlocksGetRequest {
	r.sort = &sort
	return r
}

func (r ApiApiBlocksGetRequest) Execute() (*ApiBlocksGet200Response, *http.Response, error) {
	return r.ApiService.ApiBlocksGetExecute(r)
}

/*
ApiBlocksGet List blocks

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiBlocksGetRequest
*/
func (a *DefaultApiService) ApiBlocksGet(ctx context.Context) ApiApiBlocksGetRequest {
	return ApiApiBlocksGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ApiBlocksGet200Response
func (a *DefaultApiService) ApiBlocksGetExecute(r ApiApiBlocksGetRequest) (*ApiBlocksGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiBlocksGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ApiBlocksGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/blocks"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsBlocks != nil {
		localVarQueryParams.Add("fields[blocks]", parameterToString(*r.fieldsBlocks, ""))
	}
	if r.filterHash != nil {
		localVarQueryParams.Add("filter[hash]", parameterToString(*r.filterHash, ""))
	}
	if r.filterHashNeq != nil {
		localVarQueryParams.Add("filter[hash.neq]", parameterToString(*r.filterHashNeq, ""))
	}
	if r.filterHashLike != nil {
		localVarQueryParams.Add("filter[hash.like]", parameterToString(*r.filterHashLike, ""))
	}
	if r.filterHashIlike != nil {
		localVarQueryParams.Add("filter[hash.ilike]", parameterToString(*r.filterHashIlike, ""))
	}
	if r.filterHeight != nil {
		localVarQueryParams.Add("filter[height]", parameterToString(*r.filterHeight, ""))
	}
	if r.filterHeaderVersionBlock != nil {
		localVarQueryParams.Add("filter[header.version.block]", parameterToString(*r.filterHeaderVersionBlock, ""))
	}
	if r.filterHeaderChainId != nil {
		localVarQueryParams.Add("filter[header.chainId]", parameterToString(*r.filterHeaderChainId, ""))
	}
	if r.filterHeaderChainIdNeq != nil {
		localVarQueryParams.Add("filter[header.chainId.neq]", parameterToString(*r.filterHeaderChainIdNeq, ""))
	}
	if r.filterHeaderChainIdLike != nil {
		localVarQueryParams.Add("filter[header.chainId.like]", parameterToString(*r.filterHeaderChainIdLike, ""))
	}
	if r.filterHeaderChainIdIlike != nil {
		localVarQueryParams.Add("filter[header.chainId.ilike]", parameterToString(*r.filterHeaderChainIdIlike, ""))
	}
	if r.filterHeaderHeight != nil {
		localVarQueryParams.Add("filter[header.height]", parameterToString(*r.filterHeaderHeight, ""))
	}
	if r.filterHeaderTime != nil {
		localVarQueryParams.Add("filter[header.time]", parameterToString(*r.filterHeaderTime, ""))
	}
	if r.filterHeaderTimeNeq != nil {
		localVarQueryParams.Add("filter[header.time.neq]", parameterToString(*r.filterHeaderTimeNeq, ""))
	}
	if r.filterHeaderTimeLike != nil {
		localVarQueryParams.Add("filter[header.time.like]", parameterToString(*r.filterHeaderTimeLike, ""))
	}
	if r.filterHeaderTimeIlike != nil {
		localVarQueryParams.Add("filter[header.time.ilike]", parameterToString(*r.filterHeaderTimeIlike, ""))
	}
	if r.filterHeaderLastBlockIdHash != nil {
		localVarQueryParams.Add("filter[header.lastBlockId.hash]", parameterToString(*r.filterHeaderLastBlockIdHash, ""))
	}
	if r.filterHeaderLastBlockIdHashNeq != nil {
		localVarQueryParams.Add("filter[header.lastBlockId.hash.neq]", parameterToString(*r.filterHeaderLastBlockIdHashNeq, ""))
	}
	if r.filterHeaderLastBlockIdHashLike != nil {
		localVarQueryParams.Add("filter[header.lastBlockId.hash.like]", parameterToString(*r.filterHeaderLastBlockIdHashLike, ""))
	}
	if r.filterHeaderLastBlockIdHashIlike != nil {
		localVarQueryParams.Add("filter[header.lastBlockId.hash.ilike]", parameterToString(*r.filterHeaderLastBlockIdHashIlike, ""))
	}
	if r.filterHeaderLastBlockIdPartSetHeaderTotal != nil {
		localVarQueryParams.Add("filter[header.lastBlockId.partSetHeader.total]", parameterToString(*r.filterHeaderLastBlockIdPartSetHeaderTotal, ""))
	}
	if r.filterHeaderLastBlockIdPartSetHeaderHash != nil {
		localVarQueryParams.Add("filter[header.lastBlockId.partSetHeader.hash]", parameterToString(*r.filterHeaderLastBlockIdPartSetHeaderHash, ""))
	}
	if r.filterHeaderLastBlockIdPartSetHeaderHashNeq != nil {
		localVarQueryParams.Add("filter[header.lastBlockId.partSetHeader.hash.neq]", parameterToString(*r.filterHeaderLastBlockIdPartSetHeaderHashNeq, ""))
	}
	if r.filterHeaderLastBlockIdPartSetHeaderHashLike != nil {
		localVarQueryParams.Add("filter[header.lastBlockId.partSetHeader.hash.like]", parameterToString(*r.filterHeaderLastBlockIdPartSetHeaderHashLike, ""))
	}
	if r.filterHeaderLastBlockIdPartSetHeaderHashIlike != nil {
		localVarQueryParams.Add("filter[header.lastBlockId.partSetHeader.hash.ilike]", parameterToString(*r.filterHeaderLastBlockIdPartSetHeaderHashIlike, ""))
	}
	if r.filterHeaderLastCommitHash != nil {
		localVarQueryParams.Add("filter[header.lastCommitHash]", parameterToString(*r.filterHeaderLastCommitHash, ""))
	}
	if r.filterHeaderLastCommitHashNeq != nil {
		localVarQueryParams.Add("filter[header.lastCommitHash.neq]", parameterToString(*r.filterHeaderLastCommitHashNeq, ""))
	}
	if r.filterHeaderLastCommitHashLike != nil {
		localVarQueryParams.Add("filter[header.lastCommitHash.like]", parameterToString(*r.filterHeaderLastCommitHashLike, ""))
	}
	if r.filterHeaderLastCommitHashIlike != nil {
		localVarQueryParams.Add("filter[header.lastCommitHash.ilike]", parameterToString(*r.filterHeaderLastCommitHashIlike, ""))
	}
	if r.filterHeaderDataHash != nil {
		localVarQueryParams.Add("filter[header.dataHash]", parameterToString(*r.filterHeaderDataHash, ""))
	}
	if r.filterHeaderDataHashNeq != nil {
		localVarQueryParams.Add("filter[header.dataHash.neq]", parameterToString(*r.filterHeaderDataHashNeq, ""))
	}
	if r.filterHeaderDataHashLike != nil {
		localVarQueryParams.Add("filter[header.dataHash.like]", parameterToString(*r.filterHeaderDataHashLike, ""))
	}
	if r.filterHeaderDataHashIlike != nil {
		localVarQueryParams.Add("filter[header.dataHash.ilike]", parameterToString(*r.filterHeaderDataHashIlike, ""))
	}
	if r.filterHeaderValidatorsHash != nil {
		localVarQueryParams.Add("filter[header.validatorsHash]", parameterToString(*r.filterHeaderValidatorsHash, ""))
	}
	if r.filterHeaderValidatorsHashNeq != nil {
		localVarQueryParams.Add("filter[header.validatorsHash.neq]", parameterToString(*r.filterHeaderValidatorsHashNeq, ""))
	}
	if r.filterHeaderValidatorsHashLike != nil {
		localVarQueryParams.Add("filter[header.validatorsHash.like]", parameterToString(*r.filterHeaderValidatorsHashLike, ""))
	}
	if r.filterHeaderValidatorsHashIlike != nil {
		localVarQueryParams.Add("filter[header.validatorsHash.ilike]", parameterToString(*r.filterHeaderValidatorsHashIlike, ""))
	}
	if r.filterHeaderNextValidatorsHash != nil {
		localVarQueryParams.Add("filter[header.nextValidatorsHash]", parameterToString(*r.filterHeaderNextValidatorsHash, ""))
	}
	if r.filterHeaderNextValidatorsHashNeq != nil {
		localVarQueryParams.Add("filter[header.nextValidatorsHash.neq]", parameterToString(*r.filterHeaderNextValidatorsHashNeq, ""))
	}
	if r.filterHeaderNextValidatorsHashLike != nil {
		localVarQueryParams.Add("filter[header.nextValidatorsHash.like]", parameterToString(*r.filterHeaderNextValidatorsHashLike, ""))
	}
	if r.filterHeaderNextValidatorsHashIlike != nil {
		localVarQueryParams.Add("filter[header.nextValidatorsHash.ilike]", parameterToString(*r.filterHeaderNextValidatorsHashIlike, ""))
	}
	if r.filterHeaderConsensusHash != nil {
		localVarQueryParams.Add("filter[header.consensusHash]", parameterToString(*r.filterHeaderConsensusHash, ""))
	}
	if r.filterHeaderConsensusHashNeq != nil {
		localVarQueryParams.Add("filter[header.consensusHash.neq]", parameterToString(*r.filterHeaderConsensusHashNeq, ""))
	}
	if r.filterHeaderConsensusHashLike != nil {
		localVarQueryParams.Add("filter[header.consensusHash.like]", parameterToString(*r.filterHeaderConsensusHashLike, ""))
	}
	if r.filterHeaderConsensusHashIlike != nil {
		localVarQueryParams.Add("filter[header.consensusHash.ilike]", parameterToString(*r.filterHeaderConsensusHashIlike, ""))
	}
	if r.filterHeaderAppHash != nil {
		localVarQueryParams.Add("filter[header.appHash]", parameterToString(*r.filterHeaderAppHash, ""))
	}
	if r.filterHeaderAppHashNeq != nil {
		localVarQueryParams.Add("filter[header.appHash.neq]", parameterToString(*r.filterHeaderAppHashNeq, ""))
	}
	if r.filterHeaderAppHashLike != nil {
		localVarQueryParams.Add("filter[header.appHash.like]", parameterToString(*r.filterHeaderAppHashLike, ""))
	}
	if r.filterHeaderAppHashIlike != nil {
		localVarQueryParams.Add("filter[header.appHash.ilike]", parameterToString(*r.filterHeaderAppHashIlike, ""))
	}
	if r.filterHeaderLastResultsHash != nil {
		localVarQueryParams.Add("filter[header.lastResultsHash]", parameterToString(*r.filterHeaderLastResultsHash, ""))
	}
	if r.filterHeaderLastResultsHashNeq != nil {
		localVarQueryParams.Add("filter[header.lastResultsHash.neq]", parameterToString(*r.filterHeaderLastResultsHashNeq, ""))
	}
	if r.filterHeaderLastResultsHashLike != nil {
		localVarQueryParams.Add("filter[header.lastResultsHash.like]", parameterToString(*r.filterHeaderLastResultsHashLike, ""))
	}
	if r.filterHeaderLastResultsHashIlike != nil {
		localVarQueryParams.Add("filter[header.lastResultsHash.ilike]", parameterToString(*r.filterHeaderLastResultsHashIlike, ""))
	}
	if r.filterHeaderEvidenceHash != nil {
		localVarQueryParams.Add("filter[header.evidenceHash]", parameterToString(*r.filterHeaderEvidenceHash, ""))
	}
	if r.filterHeaderEvidenceHashNeq != nil {
		localVarQueryParams.Add("filter[header.evidenceHash.neq]", parameterToString(*r.filterHeaderEvidenceHashNeq, ""))
	}
	if r.filterHeaderEvidenceHashLike != nil {
		localVarQueryParams.Add("filter[header.evidenceHash.like]", parameterToString(*r.filterHeaderEvidenceHashLike, ""))
	}
	if r.filterHeaderEvidenceHashIlike != nil {
		localVarQueryParams.Add("filter[header.evidenceHash.ilike]", parameterToString(*r.filterHeaderEvidenceHashIlike, ""))
	}
	if r.filterHeaderProposerAddress != nil {
		localVarQueryParams.Add("filter[header.proposerAddress]", parameterToString(*r.filterHeaderProposerAddress, ""))
	}
	if r.filterHeaderProposerAddressNeq != nil {
		localVarQueryParams.Add("filter[header.proposerAddress.neq]", parameterToString(*r.filterHeaderProposerAddressNeq, ""))
	}
	if r.filterHeaderProposerAddressLike != nil {
		localVarQueryParams.Add("filter[header.proposerAddress.like]", parameterToString(*r.filterHeaderProposerAddressLike, ""))
	}
	if r.filterHeaderProposerAddressIlike != nil {
		localVarQueryParams.Add("filter[header.proposerAddress.ilike]", parameterToString(*r.filterHeaderProposerAddressIlike, ""))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, ""))
	}
	if r.sort != nil {
		localVarQueryParams.Add("sort", parameterToString(*r.sort, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiEntitiesGetRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	fieldsEntities *ApiEntitiesGetFieldsEntitiesParameter
	filterModule *string
	filterModuleNeq *string
	filterModuleLike *string
	filterModuleIlike *string
	filterType *string
	filterTypeNeq *string
	filterTypeLike *string
	filterTypeIlike *string
	filterKey *string
	filterKeyNeq *string
	filterKeyLike *string
	filterKeyIlike *string
	filterValue *string
	filterValueNeq *string
	filterValueLike *string
	filterValueIlike *string
	sort *ApiEntitiesGetSortParameter
}

// Include the given fields in the response.
func (r ApiApiEntitiesGetRequest) FieldsEntities(fieldsEntities ApiEntitiesGetFieldsEntitiesParameter) ApiApiEntitiesGetRequest {
	r.fieldsEntities = &fieldsEntities
	return r
}

// Filter the results where the [module] field is equal to the given value.
func (r ApiApiEntitiesGetRequest) FilterModule(filterModule string) ApiApiEntitiesGetRequest {
	r.filterModule = &filterModule
	return r
}

// Filter the results where the [module] field is not equal to the given value.
func (r ApiApiEntitiesGetRequest) FilterModuleNeq(filterModuleNeq string) ApiApiEntitiesGetRequest {
	r.filterModuleNeq = &filterModuleNeq
	return r
}

// Filter the results where the [module] field is similar to the given case sensitive value.
func (r ApiApiEntitiesGetRequest) FilterModuleLike(filterModuleLike string) ApiApiEntitiesGetRequest {
	r.filterModuleLike = &filterModuleLike
	return r
}

// Filter the results where the [module] field is similar to the given case insensitive value.
func (r ApiApiEntitiesGetRequest) FilterModuleIlike(filterModuleIlike string) ApiApiEntitiesGetRequest {
	r.filterModuleIlike = &filterModuleIlike
	return r
}

// Filter the results where the [type] field is equal to the given value.
func (r ApiApiEntitiesGetRequest) FilterType(filterType string) ApiApiEntitiesGetRequest {
	r.filterType = &filterType
	return r
}

// Filter the results where the [type] field is not equal to the given value.
func (r ApiApiEntitiesGetRequest) FilterTypeNeq(filterTypeNeq string) ApiApiEntitiesGetRequest {
	r.filterTypeNeq = &filterTypeNeq
	return r
}

// Filter the results where the [type] field is similar to the given case sensitive value.
func (r ApiApiEntitiesGetRequest) FilterTypeLike(filterTypeLike string) ApiApiEntitiesGetRequest {
	r.filterTypeLike = &filterTypeLike
	return r
}

// Filter the results where the [type] field is similar to the given case insensitive value.
func (r ApiApiEntitiesGetRequest) FilterTypeIlike(filterTypeIlike string) ApiApiEntitiesGetRequest {
	r.filterTypeIlike = &filterTypeIlike
	return r
}

// Filter the results where the [key] field is equal to the given value.
func (r ApiApiEntitiesGetRequest) FilterKey(filterKey string) ApiApiEntitiesGetRequest {
	r.filterKey = &filterKey
	return r
}

// Filter the results where the [key] field is not equal to the given value.
func (r ApiApiEntitiesGetRequest) FilterKeyNeq(filterKeyNeq string) ApiApiEntitiesGetRequest {
	r.filterKeyNeq = &filterKeyNeq
	return r
}

// Filter the results where the [key] field is similar to the given case sensitive value.
func (r ApiApiEntitiesGetRequest) FilterKeyLike(filterKeyLike string) ApiApiEntitiesGetRequest {
	r.filterKeyLike = &filterKeyLike
	return r
}

// Filter the results where the [key] field is similar to the given case insensitive value.
func (r ApiApiEntitiesGetRequest) FilterKeyIlike(filterKeyIlike string) ApiApiEntitiesGetRequest {
	r.filterKeyIlike = &filterKeyIlike
	return r
}

// Filter the results where the [value] field is equal to the given value.
func (r ApiApiEntitiesGetRequest) FilterValue(filterValue string) ApiApiEntitiesGetRequest {
	r.filterValue = &filterValue
	return r
}

// Filter the results where the [value] field is not equal to the given value.
func (r ApiApiEntitiesGetRequest) FilterValueNeq(filterValueNeq string) ApiApiEntitiesGetRequest {
	r.filterValueNeq = &filterValueNeq
	return r
}

// Filter the results where the [value] field is similar to the given case sensitive value.
func (r ApiApiEntitiesGetRequest) FilterValueLike(filterValueLike string) ApiApiEntitiesGetRequest {
	r.filterValueLike = &filterValueLike
	return r
}

// Filter the results where the [value] field is similar to the given case insensitive value.
func (r ApiApiEntitiesGetRequest) FilterValueIlike(filterValueIlike string) ApiApiEntitiesGetRequest {
	r.filterValueIlike = &filterValueIlike
	return r
}

// Sort the results by the given field and direction.
func (r ApiApiEntitiesGetRequest) Sort(sort ApiEntitiesGetSortParameter) ApiApiEntitiesGetRequest {
	r.sort = &sort
	return r
}

func (r ApiApiEntitiesGetRequest) Execute() (*ApiEntitiesGet200Response, *http.Response, error) {
	return r.ApiService.ApiEntitiesGetExecute(r)
}

/*
ApiEntitiesGet List entities

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiEntitiesGetRequest
*/
func (a *DefaultApiService) ApiEntitiesGet(ctx context.Context) ApiApiEntitiesGetRequest {
	return ApiApiEntitiesGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ApiEntitiesGet200Response
func (a *DefaultApiService) ApiEntitiesGetExecute(r ApiApiEntitiesGetRequest) (*ApiEntitiesGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiEntitiesGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ApiEntitiesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/entities"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsEntities != nil {
		localVarQueryParams.Add("fields[entities]", parameterToString(*r.fieldsEntities, ""))
	}
	if r.filterModule != nil {
		localVarQueryParams.Add("filter[module]", parameterToString(*r.filterModule, ""))
	}
	if r.filterModuleNeq != nil {
		localVarQueryParams.Add("filter[module.neq]", parameterToString(*r.filterModuleNeq, ""))
	}
	if r.filterModuleLike != nil {
		localVarQueryParams.Add("filter[module.like]", parameterToString(*r.filterModuleLike, ""))
	}
	if r.filterModuleIlike != nil {
		localVarQueryParams.Add("filter[module.ilike]", parameterToString(*r.filterModuleIlike, ""))
	}
	if r.filterType != nil {
		localVarQueryParams.Add("filter[type]", parameterToString(*r.filterType, ""))
	}
	if r.filterTypeNeq != nil {
		localVarQueryParams.Add("filter[type.neq]", parameterToString(*r.filterTypeNeq, ""))
	}
	if r.filterTypeLike != nil {
		localVarQueryParams.Add("filter[type.like]", parameterToString(*r.filterTypeLike, ""))
	}
	if r.filterTypeIlike != nil {
		localVarQueryParams.Add("filter[type.ilike]", parameterToString(*r.filterTypeIlike, ""))
	}
	if r.filterKey != nil {
		localVarQueryParams.Add("filter[key]", parameterToString(*r.filterKey, ""))
	}
	if r.filterKeyNeq != nil {
		localVarQueryParams.Add("filter[key.neq]", parameterToString(*r.filterKeyNeq, ""))
	}
	if r.filterKeyLike != nil {
		localVarQueryParams.Add("filter[key.like]", parameterToString(*r.filterKeyLike, ""))
	}
	if r.filterKeyIlike != nil {
		localVarQueryParams.Add("filter[key.ilike]", parameterToString(*r.filterKeyIlike, ""))
	}
	if r.filterValue != nil {
		localVarQueryParams.Add("filter[value]", parameterToString(*r.filterValue, ""))
	}
	if r.filterValueNeq != nil {
		localVarQueryParams.Add("filter[value.neq]", parameterToString(*r.filterValueNeq, ""))
	}
	if r.filterValueLike != nil {
		localVarQueryParams.Add("filter[value.like]", parameterToString(*r.filterValueLike, ""))
	}
	if r.filterValueIlike != nil {
		localVarQueryParams.Add("filter[value.ilike]", parameterToString(*r.filterValueIlike, ""))
	}
	if r.sort != nil {
		localVarQueryParams.Add("sort", parameterToString(*r.sort, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiTransactionsGetRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	fieldsAccounts *ApiTransactionsGetFieldsAccountsParameter
	filterHash *string
	filterHashNeq *string
	filterHashLike *string
	filterHashIlike *string
	filterSender *string
	filterSenderNeq *string
	filterSenderLike *string
	filterSenderIlike *string
	filterRecipient *string
	filterRecipientNeq *string
	filterRecipientLike *string
	filterRecipientIlike *string
	filterGas *int32
	filterNonce *int32
	filterSignature *string
	filterSignatureNeq *string
	filterSignatureLike *string
	filterSignatureIlike *string
	filterVersion *string
	filterVersionNeq *string
	filterVersionLike *string
	filterVersionIlike *string
	filterMessageHandler *string
	filterMessageHandlerNeq *string
	filterMessageHandlerLike *string
	filterMessageHandlerIlike *string
	filterMessageVersion *string
	filterMessageVersionNeq *string
	filterMessageVersionLike *string
	filterMessageVersionIlike *string
	filterMessageNetwork *string
	filterMessageNetworkNeq *string
	filterMessageNetworkLike *string
	filterMessageNetworkIlike *string
	filterMessageContent *string
	filterMessageContentNeq *string
	filterMessageContentLike *string
	filterMessageContentIlike *string
	include *ApiTransactionsGetIncludeParameter
	sort *ApiTransactionsGetSortParameter
}

// Include the given fields in the response.
func (r ApiApiTransactionsGetRequest) FieldsAccounts(fieldsAccounts ApiTransactionsGetFieldsAccountsParameter) ApiApiTransactionsGetRequest {
	r.fieldsAccounts = &fieldsAccounts
	return r
}

// Filter the results where the [hash] field is equal to the given value.
func (r ApiApiTransactionsGetRequest) FilterHash(filterHash string) ApiApiTransactionsGetRequest {
	r.filterHash = &filterHash
	return r
}

// Filter the results where the [hash] field is not equal to the given value.
func (r ApiApiTransactionsGetRequest) FilterHashNeq(filterHashNeq string) ApiApiTransactionsGetRequest {
	r.filterHashNeq = &filterHashNeq
	return r
}

// Filter the results where the [hash] field is similar to the given case sensitive value.
func (r ApiApiTransactionsGetRequest) FilterHashLike(filterHashLike string) ApiApiTransactionsGetRequest {
	r.filterHashLike = &filterHashLike
	return r
}

// Filter the results where the [hash] field is similar to the given case insensitive value.
func (r ApiApiTransactionsGetRequest) FilterHashIlike(filterHashIlike string) ApiApiTransactionsGetRequest {
	r.filterHashIlike = &filterHashIlike
	return r
}

// Filter the results where the [sender] field is equal to the given value.
func (r ApiApiTransactionsGetRequest) FilterSender(filterSender string) ApiApiTransactionsGetRequest {
	r.filterSender = &filterSender
	return r
}

// Filter the results where the [sender] field is not equal to the given value.
func (r ApiApiTransactionsGetRequest) FilterSenderNeq(filterSenderNeq string) ApiApiTransactionsGetRequest {
	r.filterSenderNeq = &filterSenderNeq
	return r
}

// Filter the results where the [sender] field is similar to the given case sensitive value.
func (r ApiApiTransactionsGetRequest) FilterSenderLike(filterSenderLike string) ApiApiTransactionsGetRequest {
	r.filterSenderLike = &filterSenderLike
	return r
}

// Filter the results where the [sender] field is similar to the given case insensitive value.
func (r ApiApiTransactionsGetRequest) FilterSenderIlike(filterSenderIlike string) ApiApiTransactionsGetRequest {
	r.filterSenderIlike = &filterSenderIlike
	return r
}

// Filter the results where the [recipient] field is equal to the given value.
func (r ApiApiTransactionsGetRequest) FilterRecipient(filterRecipient string) ApiApiTransactionsGetRequest {
	r.filterRecipient = &filterRecipient
	return r
}

// Filter the results where the [recipient] field is not equal to the given value.
func (r ApiApiTransactionsGetRequest) FilterRecipientNeq(filterRecipientNeq string) ApiApiTransactionsGetRequest {
	r.filterRecipientNeq = &filterRecipientNeq
	return r
}

// Filter the results where the [recipient] field is similar to the given case sensitive value.
func (r ApiApiTransactionsGetRequest) FilterRecipientLike(filterRecipientLike string) ApiApiTransactionsGetRequest {
	r.filterRecipientLike = &filterRecipientLike
	return r
}

// Filter the results where the [recipient] field is similar to the given case insensitive value.
func (r ApiApiTransactionsGetRequest) FilterRecipientIlike(filterRecipientIlike string) ApiApiTransactionsGetRequest {
	r.filterRecipientIlike = &filterRecipientIlike
	return r
}

// Filter the results where the [gas] field is equal to the given value.
func (r ApiApiTransactionsGetRequest) FilterGas(filterGas int32) ApiApiTransactionsGetRequest {
	r.filterGas = &filterGas
	return r
}

// Filter the results where the [nonce] field is equal to the given value.
func (r ApiApiTransactionsGetRequest) FilterNonce(filterNonce int32) ApiApiTransactionsGetRequest {
	r.filterNonce = &filterNonce
	return r
}

// Filter the results where the [signature] field is equal to the given value.
func (r ApiApiTransactionsGetRequest) FilterSignature(filterSignature string) ApiApiTransactionsGetRequest {
	r.filterSignature = &filterSignature
	return r
}

// Filter the results where the [signature] field is not equal to the given value.
func (r ApiApiTransactionsGetRequest) FilterSignatureNeq(filterSignatureNeq string) ApiApiTransactionsGetRequest {
	r.filterSignatureNeq = &filterSignatureNeq
	return r
}

// Filter the results where the [signature] field is similar to the given case sensitive value.
func (r ApiApiTransactionsGetRequest) FilterSignatureLike(filterSignatureLike string) ApiApiTransactionsGetRequest {
	r.filterSignatureLike = &filterSignatureLike
	return r
}

// Filter the results where the [signature] field is similar to the given case insensitive value.
func (r ApiApiTransactionsGetRequest) FilterSignatureIlike(filterSignatureIlike string) ApiApiTransactionsGetRequest {
	r.filterSignatureIlike = &filterSignatureIlike
	return r
}

// Filter the results where the [version] field is equal to the given value.
func (r ApiApiTransactionsGetRequest) FilterVersion(filterVersion string) ApiApiTransactionsGetRequest {
	r.filterVersion = &filterVersion
	return r
}

// Filter the results where the [version] field is not equal to the given value.
func (r ApiApiTransactionsGetRequest) FilterVersionNeq(filterVersionNeq string) ApiApiTransactionsGetRequest {
	r.filterVersionNeq = &filterVersionNeq
	return r
}

// Filter the results where the [version] field is similar to the given case sensitive value.
func (r ApiApiTransactionsGetRequest) FilterVersionLike(filterVersionLike string) ApiApiTransactionsGetRequest {
	r.filterVersionLike = &filterVersionLike
	return r
}

// Filter the results where the [version] field is similar to the given case insensitive value.
func (r ApiApiTransactionsGetRequest) FilterVersionIlike(filterVersionIlike string) ApiApiTransactionsGetRequest {
	r.filterVersionIlike = &filterVersionIlike
	return r
}

// Filter the results where the [message.handler] field is equal to the given value.
func (r ApiApiTransactionsGetRequest) FilterMessageHandler(filterMessageHandler string) ApiApiTransactionsGetRequest {
	r.filterMessageHandler = &filterMessageHandler
	return r
}

// Filter the results where the [message.handler] field is not equal to the given value.
func (r ApiApiTransactionsGetRequest) FilterMessageHandlerNeq(filterMessageHandlerNeq string) ApiApiTransactionsGetRequest {
	r.filterMessageHandlerNeq = &filterMessageHandlerNeq
	return r
}

// Filter the results where the [message.handler] field is similar to the given case sensitive value.
func (r ApiApiTransactionsGetRequest) FilterMessageHandlerLike(filterMessageHandlerLike string) ApiApiTransactionsGetRequest {
	r.filterMessageHandlerLike = &filterMessageHandlerLike
	return r
}

// Filter the results where the [message.handler] field is similar to the given case insensitive value.
func (r ApiApiTransactionsGetRequest) FilterMessageHandlerIlike(filterMessageHandlerIlike string) ApiApiTransactionsGetRequest {
	r.filterMessageHandlerIlike = &filterMessageHandlerIlike
	return r
}

// Filter the results where the [message.version] field is equal to the given value.
func (r ApiApiTransactionsGetRequest) FilterMessageVersion(filterMessageVersion string) ApiApiTransactionsGetRequest {
	r.filterMessageVersion = &filterMessageVersion
	return r
}

// Filter the results where the [message.version] field is not equal to the given value.
func (r ApiApiTransactionsGetRequest) FilterMessageVersionNeq(filterMessageVersionNeq string) ApiApiTransactionsGetRequest {
	r.filterMessageVersionNeq = &filterMessageVersionNeq
	return r
}

// Filter the results where the [message.version] field is similar to the given case sensitive value.
func (r ApiApiTransactionsGetRequest) FilterMessageVersionLike(filterMessageVersionLike string) ApiApiTransactionsGetRequest {
	r.filterMessageVersionLike = &filterMessageVersionLike
	return r
}

// Filter the results where the [message.version] field is similar to the given case insensitive value.
func (r ApiApiTransactionsGetRequest) FilterMessageVersionIlike(filterMessageVersionIlike string) ApiApiTransactionsGetRequest {
	r.filterMessageVersionIlike = &filterMessageVersionIlike
	return r
}

// Filter the results where the [message.network] field is equal to the given value.
func (r ApiApiTransactionsGetRequest) FilterMessageNetwork(filterMessageNetwork string) ApiApiTransactionsGetRequest {
	r.filterMessageNetwork = &filterMessageNetwork
	return r
}

// Filter the results where the [message.network] field is not equal to the given value.
func (r ApiApiTransactionsGetRequest) FilterMessageNetworkNeq(filterMessageNetworkNeq string) ApiApiTransactionsGetRequest {
	r.filterMessageNetworkNeq = &filterMessageNetworkNeq
	return r
}

// Filter the results where the [message.network] field is similar to the given case sensitive value.
func (r ApiApiTransactionsGetRequest) FilterMessageNetworkLike(filterMessageNetworkLike string) ApiApiTransactionsGetRequest {
	r.filterMessageNetworkLike = &filterMessageNetworkLike
	return r
}

// Filter the results where the [message.network] field is similar to the given case insensitive value.
func (r ApiApiTransactionsGetRequest) FilterMessageNetworkIlike(filterMessageNetworkIlike string) ApiApiTransactionsGetRequest {
	r.filterMessageNetworkIlike = &filterMessageNetworkIlike
	return r
}

// Filter the results where the [message.content] field is equal to the given value.
func (r ApiApiTransactionsGetRequest) FilterMessageContent(filterMessageContent string) ApiApiTransactionsGetRequest {
	r.filterMessageContent = &filterMessageContent
	return r
}

// Filter the results where the [message.content] field is not equal to the given value.
func (r ApiApiTransactionsGetRequest) FilterMessageContentNeq(filterMessageContentNeq string) ApiApiTransactionsGetRequest {
	r.filterMessageContentNeq = &filterMessageContentNeq
	return r
}

// Filter the results where the [message.content] field is similar to the given case sensitive value.
func (r ApiApiTransactionsGetRequest) FilterMessageContentLike(filterMessageContentLike string) ApiApiTransactionsGetRequest {
	r.filterMessageContentLike = &filterMessageContentLike
	return r
}

// Filter the results where the [message.content] field is similar to the given case insensitive value.
func (r ApiApiTransactionsGetRequest) FilterMessageContentIlike(filterMessageContentIlike string) ApiApiTransactionsGetRequest {
	r.filterMessageContentIlike = &filterMessageContentIlike
	return r
}

// Include the given relationships.
func (r ApiApiTransactionsGetRequest) Include(include ApiTransactionsGetIncludeParameter) ApiApiTransactionsGetRequest {
	r.include = &include
	return r
}

// Sort the results by the given field and direction.
func (r ApiApiTransactionsGetRequest) Sort(sort ApiTransactionsGetSortParameter) ApiApiTransactionsGetRequest {
	r.sort = &sort
	return r
}

func (r ApiApiTransactionsGetRequest) Execute() (*ApiTransactionsGet200Response, *http.Response, error) {
	return r.ApiService.ApiTransactionsGetExecute(r)
}

/*
ApiTransactionsGet List transactions

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiTransactionsGetRequest
*/
func (a *DefaultApiService) ApiTransactionsGet(ctx context.Context) ApiApiTransactionsGetRequest {
	return ApiApiTransactionsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ApiTransactionsGet200Response
func (a *DefaultApiService) ApiTransactionsGetExecute(r ApiApiTransactionsGetRequest) (*ApiTransactionsGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiTransactionsGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ApiTransactionsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/transactions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsAccounts != nil {
		localVarQueryParams.Add("fields[accounts]", parameterToString(*r.fieldsAccounts, ""))
	}
	if r.filterHash != nil {
		localVarQueryParams.Add("filter[hash]", parameterToString(*r.filterHash, ""))
	}
	if r.filterHashNeq != nil {
		localVarQueryParams.Add("filter[hash.neq]", parameterToString(*r.filterHashNeq, ""))
	}
	if r.filterHashLike != nil {
		localVarQueryParams.Add("filter[hash.like]", parameterToString(*r.filterHashLike, ""))
	}
	if r.filterHashIlike != nil {
		localVarQueryParams.Add("filter[hash.ilike]", parameterToString(*r.filterHashIlike, ""))
	}
	if r.filterSender != nil {
		localVarQueryParams.Add("filter[sender]", parameterToString(*r.filterSender, ""))
	}
	if r.filterSenderNeq != nil {
		localVarQueryParams.Add("filter[sender.neq]", parameterToString(*r.filterSenderNeq, ""))
	}
	if r.filterSenderLike != nil {
		localVarQueryParams.Add("filter[sender.like]", parameterToString(*r.filterSenderLike, ""))
	}
	if r.filterSenderIlike != nil {
		localVarQueryParams.Add("filter[sender.ilike]", parameterToString(*r.filterSenderIlike, ""))
	}
	if r.filterRecipient != nil {
		localVarQueryParams.Add("filter[recipient]", parameterToString(*r.filterRecipient, ""))
	}
	if r.filterRecipientNeq != nil {
		localVarQueryParams.Add("filter[recipient.neq]", parameterToString(*r.filterRecipientNeq, ""))
	}
	if r.filterRecipientLike != nil {
		localVarQueryParams.Add("filter[recipient.like]", parameterToString(*r.filterRecipientLike, ""))
	}
	if r.filterRecipientIlike != nil {
		localVarQueryParams.Add("filter[recipient.ilike]", parameterToString(*r.filterRecipientIlike, ""))
	}
	if r.filterGas != nil {
		localVarQueryParams.Add("filter[gas]", parameterToString(*r.filterGas, ""))
	}
	if r.filterNonce != nil {
		localVarQueryParams.Add("filter[nonce]", parameterToString(*r.filterNonce, ""))
	}
	if r.filterSignature != nil {
		localVarQueryParams.Add("filter[signature]", parameterToString(*r.filterSignature, ""))
	}
	if r.filterSignatureNeq != nil {
		localVarQueryParams.Add("filter[signature.neq]", parameterToString(*r.filterSignatureNeq, ""))
	}
	if r.filterSignatureLike != nil {
		localVarQueryParams.Add("filter[signature.like]", parameterToString(*r.filterSignatureLike, ""))
	}
	if r.filterSignatureIlike != nil {
		localVarQueryParams.Add("filter[signature.ilike]", parameterToString(*r.filterSignatureIlike, ""))
	}
	if r.filterVersion != nil {
		localVarQueryParams.Add("filter[version]", parameterToString(*r.filterVersion, ""))
	}
	if r.filterVersionNeq != nil {
		localVarQueryParams.Add("filter[version.neq]", parameterToString(*r.filterVersionNeq, ""))
	}
	if r.filterVersionLike != nil {
		localVarQueryParams.Add("filter[version.like]", parameterToString(*r.filterVersionLike, ""))
	}
	if r.filterVersionIlike != nil {
		localVarQueryParams.Add("filter[version.ilike]", parameterToString(*r.filterVersionIlike, ""))
	}
	if r.filterMessageHandler != nil {
		localVarQueryParams.Add("filter[message.handler]", parameterToString(*r.filterMessageHandler, ""))
	}
	if r.filterMessageHandlerNeq != nil {
		localVarQueryParams.Add("filter[message.handler.neq]", parameterToString(*r.filterMessageHandlerNeq, ""))
	}
	if r.filterMessageHandlerLike != nil {
		localVarQueryParams.Add("filter[message.handler.like]", parameterToString(*r.filterMessageHandlerLike, ""))
	}
	if r.filterMessageHandlerIlike != nil {
		localVarQueryParams.Add("filter[message.handler.ilike]", parameterToString(*r.filterMessageHandlerIlike, ""))
	}
	if r.filterMessageVersion != nil {
		localVarQueryParams.Add("filter[message.version]", parameterToString(*r.filterMessageVersion, ""))
	}
	if r.filterMessageVersionNeq != nil {
		localVarQueryParams.Add("filter[message.version.neq]", parameterToString(*r.filterMessageVersionNeq, ""))
	}
	if r.filterMessageVersionLike != nil {
		localVarQueryParams.Add("filter[message.version.like]", parameterToString(*r.filterMessageVersionLike, ""))
	}
	if r.filterMessageVersionIlike != nil {
		localVarQueryParams.Add("filter[message.version.ilike]", parameterToString(*r.filterMessageVersionIlike, ""))
	}
	if r.filterMessageNetwork != nil {
		localVarQueryParams.Add("filter[message.network]", parameterToString(*r.filterMessageNetwork, ""))
	}
	if r.filterMessageNetworkNeq != nil {
		localVarQueryParams.Add("filter[message.network.neq]", parameterToString(*r.filterMessageNetworkNeq, ""))
	}
	if r.filterMessageNetworkLike != nil {
		localVarQueryParams.Add("filter[message.network.like]", parameterToString(*r.filterMessageNetworkLike, ""))
	}
	if r.filterMessageNetworkIlike != nil {
		localVarQueryParams.Add("filter[message.network.ilike]", parameterToString(*r.filterMessageNetworkIlike, ""))
	}
	if r.filterMessageContent != nil {
		localVarQueryParams.Add("filter[message.content]", parameterToString(*r.filterMessageContent, ""))
	}
	if r.filterMessageContentNeq != nil {
		localVarQueryParams.Add("filter[message.content.neq]", parameterToString(*r.filterMessageContentNeq, ""))
	}
	if r.filterMessageContentLike != nil {
		localVarQueryParams.Add("filter[message.content.like]", parameterToString(*r.filterMessageContentLike, ""))
	}
	if r.filterMessageContentIlike != nil {
		localVarQueryParams.Add("filter[message.content.ilike]", parameterToString(*r.filterMessageContentIlike, ""))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, ""))
	}
	if r.sort != nil {
		localVarQueryParams.Add("sort", parameterToString(*r.sort, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiTransactionsMetadataGetRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	fieldsTransactionMetadata *ApiTransactionsMetadataGetFieldsTransactionMetadataParameter
	filterTransactionId *int32
	filterKey *string
	filterKeyNeq *string
	filterKeyLike *string
	filterKeyIlike *string
	filterValue *string
	filterValueNeq *string
	filterValueLike *string
	filterValueIlike *string
	include *ApiTransactionsMetadataGetIncludeParameter
	sort *ApiTransactionsMetadataGetSortParameter
}

// Include the given fields in the response.
func (r ApiApiTransactionsMetadataGetRequest) FieldsTransactionMetadata(fieldsTransactionMetadata ApiTransactionsMetadataGetFieldsTransactionMetadataParameter) ApiApiTransactionsMetadataGetRequest {
	r.fieldsTransactionMetadata = &fieldsTransactionMetadata
	return r
}

// Filter the results where the [transaction_id] field is equal to the given value.
func (r ApiApiTransactionsMetadataGetRequest) FilterTransactionId(filterTransactionId int32) ApiApiTransactionsMetadataGetRequest {
	r.filterTransactionId = &filterTransactionId
	return r
}

// Filter the results where the [key] field is equal to the given value.
func (r ApiApiTransactionsMetadataGetRequest) FilterKey(filterKey string) ApiApiTransactionsMetadataGetRequest {
	r.filterKey = &filterKey
	return r
}

// Filter the results where the [key] field is not equal to the given value.
func (r ApiApiTransactionsMetadataGetRequest) FilterKeyNeq(filterKeyNeq string) ApiApiTransactionsMetadataGetRequest {
	r.filterKeyNeq = &filterKeyNeq
	return r
}

// Filter the results where the [key] field is similar to the given case sensitive value.
func (r ApiApiTransactionsMetadataGetRequest) FilterKeyLike(filterKeyLike string) ApiApiTransactionsMetadataGetRequest {
	r.filterKeyLike = &filterKeyLike
	return r
}

// Filter the results where the [key] field is similar to the given case insensitive value.
func (r ApiApiTransactionsMetadataGetRequest) FilterKeyIlike(filterKeyIlike string) ApiApiTransactionsMetadataGetRequest {
	r.filterKeyIlike = &filterKeyIlike
	return r
}

// Filter the results where the [value] field is equal to the given value.
func (r ApiApiTransactionsMetadataGetRequest) FilterValue(filterValue string) ApiApiTransactionsMetadataGetRequest {
	r.filterValue = &filterValue
	return r
}

// Filter the results where the [value] field is not equal to the given value.
func (r ApiApiTransactionsMetadataGetRequest) FilterValueNeq(filterValueNeq string) ApiApiTransactionsMetadataGetRequest {
	r.filterValueNeq = &filterValueNeq
	return r
}

// Filter the results where the [value] field is similar to the given case sensitive value.
func (r ApiApiTransactionsMetadataGetRequest) FilterValueLike(filterValueLike string) ApiApiTransactionsMetadataGetRequest {
	r.filterValueLike = &filterValueLike
	return r
}

// Filter the results where the [value] field is similar to the given case insensitive value.
func (r ApiApiTransactionsMetadataGetRequest) FilterValueIlike(filterValueIlike string) ApiApiTransactionsMetadataGetRequest {
	r.filterValueIlike = &filterValueIlike
	return r
}

// Include the given relationships.
func (r ApiApiTransactionsMetadataGetRequest) Include(include ApiTransactionsMetadataGetIncludeParameter) ApiApiTransactionsMetadataGetRequest {
	r.include = &include
	return r
}

// Sort the results by the given field and direction.
func (r ApiApiTransactionsMetadataGetRequest) Sort(sort ApiTransactionsMetadataGetSortParameter) ApiApiTransactionsMetadataGetRequest {
	r.sort = &sort
	return r
}

func (r ApiApiTransactionsMetadataGetRequest) Execute() (*ApiTransactionsMetadataGet200Response, *http.Response, error) {
	return r.ApiService.ApiTransactionsMetadataGetExecute(r)
}

/*
ApiTransactionsMetadataGet List transaction metadata

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiTransactionsMetadataGetRequest
*/
func (a *DefaultApiService) ApiTransactionsMetadataGet(ctx context.Context) ApiApiTransactionsMetadataGetRequest {
	return ApiApiTransactionsMetadataGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ApiTransactionsMetadataGet200Response
func (a *DefaultApiService) ApiTransactionsMetadataGetExecute(r ApiApiTransactionsMetadataGetRequest) (*ApiTransactionsMetadataGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiTransactionsMetadataGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ApiTransactionsMetadataGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/transactions/metadata"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsTransactionMetadata != nil {
		localVarQueryParams.Add("fields[transaction_metadata]", parameterToString(*r.fieldsTransactionMetadata, ""))
	}
	if r.filterTransactionId != nil {
		localVarQueryParams.Add("filter[transaction_id]", parameterToString(*r.filterTransactionId, ""))
	}
	if r.filterKey != nil {
		localVarQueryParams.Add("filter[key]", parameterToString(*r.filterKey, ""))
	}
	if r.filterKeyNeq != nil {
		localVarQueryParams.Add("filter[key.neq]", parameterToString(*r.filterKeyNeq, ""))
	}
	if r.filterKeyLike != nil {
		localVarQueryParams.Add("filter[key.like]", parameterToString(*r.filterKeyLike, ""))
	}
	if r.filterKeyIlike != nil {
		localVarQueryParams.Add("filter[key.ilike]", parameterToString(*r.filterKeyIlike, ""))
	}
	if r.filterValue != nil {
		localVarQueryParams.Add("filter[value]", parameterToString(*r.filterValue, ""))
	}
	if r.filterValueNeq != nil {
		localVarQueryParams.Add("filter[value.neq]", parameterToString(*r.filterValueNeq, ""))
	}
	if r.filterValueLike != nil {
		localVarQueryParams.Add("filter[value.like]", parameterToString(*r.filterValueLike, ""))
	}
	if r.filterValueIlike != nil {
		localVarQueryParams.Add("filter[value.ilike]", parameterToString(*r.filterValueIlike, ""))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, ""))
	}
	if r.sort != nil {
		localVarQueryParams.Add("sort", parameterToString(*r.sort, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiTransactionsReceiptsGetRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	fieldsTransactionReceipts *ApiTransactionsReceiptsGetFieldsTransactionReceiptsParameter
	filterTransactionId *int32
	filterBlockHash *string
	filterBlockHashNeq *string
	filterBlockHashLike *string
	filterBlockHashIlike *string
	filterBlockNumber *string
	filterBlockNumberNeq *string
	filterBlockNumberLike *string
	filterBlockNumberIlike *string
	include *ApiTransactionsMetadataGetIncludeParameter
	sort *ApiTransactionsReceiptsGetSortParameter
}

// Include the given fields in the response.
func (r ApiApiTransactionsReceiptsGetRequest) FieldsTransactionReceipts(fieldsTransactionReceipts ApiTransactionsReceiptsGetFieldsTransactionReceiptsParameter) ApiApiTransactionsReceiptsGetRequest {
	r.fieldsTransactionReceipts = &fieldsTransactionReceipts
	return r
}

// Filter the results where the [transaction_id] field is equal to the given value.
func (r ApiApiTransactionsReceiptsGetRequest) FilterTransactionId(filterTransactionId int32) ApiApiTransactionsReceiptsGetRequest {
	r.filterTransactionId = &filterTransactionId
	return r
}

// Filter the results where the [block_hash] field is equal to the given value.
func (r ApiApiTransactionsReceiptsGetRequest) FilterBlockHash(filterBlockHash string) ApiApiTransactionsReceiptsGetRequest {
	r.filterBlockHash = &filterBlockHash
	return r
}

// Filter the results where the [block_hash] field is not equal to the given value.
func (r ApiApiTransactionsReceiptsGetRequest) FilterBlockHashNeq(filterBlockHashNeq string) ApiApiTransactionsReceiptsGetRequest {
	r.filterBlockHashNeq = &filterBlockHashNeq
	return r
}

// Filter the results where the [block_hash] field is similar to the given case sensitive value.
func (r ApiApiTransactionsReceiptsGetRequest) FilterBlockHashLike(filterBlockHashLike string) ApiApiTransactionsReceiptsGetRequest {
	r.filterBlockHashLike = &filterBlockHashLike
	return r
}

// Filter the results where the [block_hash] field is similar to the given case insensitive value.
func (r ApiApiTransactionsReceiptsGetRequest) FilterBlockHashIlike(filterBlockHashIlike string) ApiApiTransactionsReceiptsGetRequest {
	r.filterBlockHashIlike = &filterBlockHashIlike
	return r
}

// Filter the results where the [block_number] field is equal to the given value.
func (r ApiApiTransactionsReceiptsGetRequest) FilterBlockNumber(filterBlockNumber string) ApiApiTransactionsReceiptsGetRequest {
	r.filterBlockNumber = &filterBlockNumber
	return r
}

// Filter the results where the [block_number] field is not equal to the given value.
func (r ApiApiTransactionsReceiptsGetRequest) FilterBlockNumberNeq(filterBlockNumberNeq string) ApiApiTransactionsReceiptsGetRequest {
	r.filterBlockNumberNeq = &filterBlockNumberNeq
	return r
}

// Filter the results where the [block_number] field is similar to the given case sensitive value.
func (r ApiApiTransactionsReceiptsGetRequest) FilterBlockNumberLike(filterBlockNumberLike string) ApiApiTransactionsReceiptsGetRequest {
	r.filterBlockNumberLike = &filterBlockNumberLike
	return r
}

// Filter the results where the [block_number] field is similar to the given case insensitive value.
func (r ApiApiTransactionsReceiptsGetRequest) FilterBlockNumberIlike(filterBlockNumberIlike string) ApiApiTransactionsReceiptsGetRequest {
	r.filterBlockNumberIlike = &filterBlockNumberIlike
	return r
}

// Include the given relationships.
func (r ApiApiTransactionsReceiptsGetRequest) Include(include ApiTransactionsMetadataGetIncludeParameter) ApiApiTransactionsReceiptsGetRequest {
	r.include = &include
	return r
}

// Sort the results by the given field and direction.
func (r ApiApiTransactionsReceiptsGetRequest) Sort(sort ApiTransactionsReceiptsGetSortParameter) ApiApiTransactionsReceiptsGetRequest {
	r.sort = &sort
	return r
}

func (r ApiApiTransactionsReceiptsGetRequest) Execute() (*ApiTransactionsReceiptsGet200Response, *http.Response, error) {
	return r.ApiService.ApiTransactionsReceiptsGetExecute(r)
}

/*
ApiTransactionsReceiptsGet List transaction receipts

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiTransactionsReceiptsGetRequest
*/
func (a *DefaultApiService) ApiTransactionsReceiptsGet(ctx context.Context) ApiApiTransactionsReceiptsGetRequest {
	return ApiApiTransactionsReceiptsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ApiTransactionsReceiptsGet200Response
func (a *DefaultApiService) ApiTransactionsReceiptsGetExecute(r ApiApiTransactionsReceiptsGetRequest) (*ApiTransactionsReceiptsGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiTransactionsReceiptsGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ApiTransactionsReceiptsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/transactions/receipts"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsTransactionReceipts != nil {
		localVarQueryParams.Add("fields[transaction_receipts]", parameterToString(*r.fieldsTransactionReceipts, ""))
	}
	if r.filterTransactionId != nil {
		localVarQueryParams.Add("filter[transaction_id]", parameterToString(*r.filterTransactionId, ""))
	}
	if r.filterBlockHash != nil {
		localVarQueryParams.Add("filter[block_hash]", parameterToString(*r.filterBlockHash, ""))
	}
	if r.filterBlockHashNeq != nil {
		localVarQueryParams.Add("filter[block_hash.neq]", parameterToString(*r.filterBlockHashNeq, ""))
	}
	if r.filterBlockHashLike != nil {
		localVarQueryParams.Add("filter[block_hash.like]", parameterToString(*r.filterBlockHashLike, ""))
	}
	if r.filterBlockHashIlike != nil {
		localVarQueryParams.Add("filter[block_hash.ilike]", parameterToString(*r.filterBlockHashIlike, ""))
	}
	if r.filterBlockNumber != nil {
		localVarQueryParams.Add("filter[block_number]", parameterToString(*r.filterBlockNumber, ""))
	}
	if r.filterBlockNumberNeq != nil {
		localVarQueryParams.Add("filter[block_number.neq]", parameterToString(*r.filterBlockNumberNeq, ""))
	}
	if r.filterBlockNumberLike != nil {
		localVarQueryParams.Add("filter[block_number.like]", parameterToString(*r.filterBlockNumberLike, ""))
	}
	if r.filterBlockNumberIlike != nil {
		localVarQueryParams.Add("filter[block_number.ilike]", parameterToString(*r.filterBlockNumberIlike, ""))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, ""))
	}
	if r.sort != nil {
		localVarQueryParams.Add("sort", parameterToString(*r.sort, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiValidatorsUpdatesGetRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	fieldsBlockNumber *ApiValidatorsUpdatesGetFieldsBlockNumberParameter
	filterBlockNumber *int32
	include *ApiValidatorsUpdatesGetIncludeParameter
	sort *ApiValidatorsUpdatesGetSortParameter
}

// Include the given fields in the response.
func (r ApiApiValidatorsUpdatesGetRequest) FieldsBlockNumber(fieldsBlockNumber ApiValidatorsUpdatesGetFieldsBlockNumberParameter) ApiApiValidatorsUpdatesGetRequest {
	r.fieldsBlockNumber = &fieldsBlockNumber
	return r
}

// Filter the results where the [block_number] field is equal to the given value.
func (r ApiApiValidatorsUpdatesGetRequest) FilterBlockNumber(filterBlockNumber int32) ApiApiValidatorsUpdatesGetRequest {
	r.filterBlockNumber = &filterBlockNumber
	return r
}

// Include the given relationships.
func (r ApiApiValidatorsUpdatesGetRequest) Include(include ApiValidatorsUpdatesGetIncludeParameter) ApiApiValidatorsUpdatesGetRequest {
	r.include = &include
	return r
}

// Sort the results by the given field and direction.
func (r ApiApiValidatorsUpdatesGetRequest) Sort(sort ApiValidatorsUpdatesGetSortParameter) ApiApiValidatorsUpdatesGetRequest {
	r.sort = &sort
	return r
}

func (r ApiApiValidatorsUpdatesGetRequest) Execute() (*ApiValidatorsUpdatesGet200Response, *http.Response, error) {
	return r.ApiService.ApiValidatorsUpdatesGetExecute(r)
}

/*
ApiValidatorsUpdatesGet List validator updates

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiValidatorsUpdatesGetRequest
*/
func (a *DefaultApiService) ApiValidatorsUpdatesGet(ctx context.Context) ApiApiValidatorsUpdatesGetRequest {
	return ApiApiValidatorsUpdatesGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ApiValidatorsUpdatesGet200Response
func (a *DefaultApiService) ApiValidatorsUpdatesGetExecute(r ApiApiValidatorsUpdatesGetRequest) (*ApiValidatorsUpdatesGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiValidatorsUpdatesGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ApiValidatorsUpdatesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/validators/updates"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsBlockNumber != nil {
		localVarQueryParams.Add("fields[block_number]", parameterToString(*r.fieldsBlockNumber, ""))
	}
	if r.filterBlockNumber != nil {
		localVarQueryParams.Add("filter[block_number]", parameterToString(*r.filterBlockNumber, ""))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, ""))
	}
	if r.sort != nil {
		localVarQueryParams.Add("sort", parameterToString(*r.sort, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
