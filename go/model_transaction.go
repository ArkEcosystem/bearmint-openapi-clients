/*
Railway

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// Transaction struct for Transaction
type Transaction struct {
	// The internal id of the object.
	Id *int32 `json:"id,omitempty"`
	// The id of the block associated with the object.
	BlockId *int32 `json:"block_id,omitempty"`
	// The unique hash of the object.
	Hash *string `json:"hash,omitempty"`
	// The public key of the recipient associated with the object.
	Sender *string `json:"sender,omitempty"`
	// The address of the recipient associated with the object.
	Recipient *string `json:"recipient,omitempty"`
	// The amount of gas of the object.
	Gas *int32 `json:"gas,omitempty"`
	// The nonce of the account associated with the object.
	Nonce *int32 `json:"nonce,omitempty"`
	// The signature of the object.
	Signature *string `json:"signature,omitempty"`
	// The version of the object.
	Version *string `json:"version,omitempty"`
	// The message of the object.
	Message *Array `json:"message,omitempty"`
	// The deserialized message of the object.
	MessageDeserialized *Array `json:"message_deserialized,omitempty"`
	// The creation date of the object.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The updating date of the object.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// NewTransaction instantiates a new Transaction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransaction() *Transaction {
	this := Transaction{}
	return &this
}

// NewTransactionWithDefaults instantiates a new Transaction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionWithDefaults() *Transaction {
	this := Transaction{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Transaction) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Transaction) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *Transaction) SetId(v int32) {
	o.Id = &v
}

// GetBlockId returns the BlockId field value if set, zero value otherwise.
func (o *Transaction) GetBlockId() int32 {
	if o == nil || o.BlockId == nil {
		var ret int32
		return ret
	}
	return *o.BlockId
}

// GetBlockIdOk returns a tuple with the BlockId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetBlockIdOk() (*int32, bool) {
	if o == nil || o.BlockId == nil {
		return nil, false
	}
	return o.BlockId, true
}

// HasBlockId returns a boolean if a field has been set.
func (o *Transaction) HasBlockId() bool {
	if o != nil && o.BlockId != nil {
		return true
	}

	return false
}

// SetBlockId gets a reference to the given int32 and assigns it to the BlockId field.
func (o *Transaction) SetBlockId(v int32) {
	o.BlockId = &v
}

// GetHash returns the Hash field value if set, zero value otherwise.
func (o *Transaction) GetHash() string {
	if o == nil || o.Hash == nil {
		var ret string
		return ret
	}
	return *o.Hash
}

// GetHashOk returns a tuple with the Hash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetHashOk() (*string, bool) {
	if o == nil || o.Hash == nil {
		return nil, false
	}
	return o.Hash, true
}

// HasHash returns a boolean if a field has been set.
func (o *Transaction) HasHash() bool {
	if o != nil && o.Hash != nil {
		return true
	}

	return false
}

// SetHash gets a reference to the given string and assigns it to the Hash field.
func (o *Transaction) SetHash(v string) {
	o.Hash = &v
}

// GetSender returns the Sender field value if set, zero value otherwise.
func (o *Transaction) GetSender() string {
	if o == nil || o.Sender == nil {
		var ret string
		return ret
	}
	return *o.Sender
}

// GetSenderOk returns a tuple with the Sender field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetSenderOk() (*string, bool) {
	if o == nil || o.Sender == nil {
		return nil, false
	}
	return o.Sender, true
}

// HasSender returns a boolean if a field has been set.
func (o *Transaction) HasSender() bool {
	if o != nil && o.Sender != nil {
		return true
	}

	return false
}

// SetSender gets a reference to the given string and assigns it to the Sender field.
func (o *Transaction) SetSender(v string) {
	o.Sender = &v
}

// GetRecipient returns the Recipient field value if set, zero value otherwise.
func (o *Transaction) GetRecipient() string {
	if o == nil || o.Recipient == nil {
		var ret string
		return ret
	}
	return *o.Recipient
}

// GetRecipientOk returns a tuple with the Recipient field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetRecipientOk() (*string, bool) {
	if o == nil || o.Recipient == nil {
		return nil, false
	}
	return o.Recipient, true
}

// HasRecipient returns a boolean if a field has been set.
func (o *Transaction) HasRecipient() bool {
	if o != nil && o.Recipient != nil {
		return true
	}

	return false
}

// SetRecipient gets a reference to the given string and assigns it to the Recipient field.
func (o *Transaction) SetRecipient(v string) {
	o.Recipient = &v
}

// GetGas returns the Gas field value if set, zero value otherwise.
func (o *Transaction) GetGas() int32 {
	if o == nil || o.Gas == nil {
		var ret int32
		return ret
	}
	return *o.Gas
}

// GetGasOk returns a tuple with the Gas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetGasOk() (*int32, bool) {
	if o == nil || o.Gas == nil {
		return nil, false
	}
	return o.Gas, true
}

// HasGas returns a boolean if a field has been set.
func (o *Transaction) HasGas() bool {
	if o != nil && o.Gas != nil {
		return true
	}

	return false
}

// SetGas gets a reference to the given int32 and assigns it to the Gas field.
func (o *Transaction) SetGas(v int32) {
	o.Gas = &v
}

// GetNonce returns the Nonce field value if set, zero value otherwise.
func (o *Transaction) GetNonce() int32 {
	if o == nil || o.Nonce == nil {
		var ret int32
		return ret
	}
	return *o.Nonce
}

// GetNonceOk returns a tuple with the Nonce field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetNonceOk() (*int32, bool) {
	if o == nil || o.Nonce == nil {
		return nil, false
	}
	return o.Nonce, true
}

// HasNonce returns a boolean if a field has been set.
func (o *Transaction) HasNonce() bool {
	if o != nil && o.Nonce != nil {
		return true
	}

	return false
}

// SetNonce gets a reference to the given int32 and assigns it to the Nonce field.
func (o *Transaction) SetNonce(v int32) {
	o.Nonce = &v
}

// GetSignature returns the Signature field value if set, zero value otherwise.
func (o *Transaction) GetSignature() string {
	if o == nil || o.Signature == nil {
		var ret string
		return ret
	}
	return *o.Signature
}

// GetSignatureOk returns a tuple with the Signature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetSignatureOk() (*string, bool) {
	if o == nil || o.Signature == nil {
		return nil, false
	}
	return o.Signature, true
}

// HasSignature returns a boolean if a field has been set.
func (o *Transaction) HasSignature() bool {
	if o != nil && o.Signature != nil {
		return true
	}

	return false
}

// SetSignature gets a reference to the given string and assigns it to the Signature field.
func (o *Transaction) SetSignature(v string) {
	o.Signature = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *Transaction) GetVersion() string {
	if o == nil || o.Version == nil {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetVersionOk() (*string, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *Transaction) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *Transaction) SetVersion(v string) {
	o.Version = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *Transaction) GetMessage() Array {
	if o == nil || o.Message == nil {
		var ret Array
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetMessageOk() (*Array, bool) {
	if o == nil || o.Message == nil {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *Transaction) HasMessage() bool {
	if o != nil && o.Message != nil {
		return true
	}

	return false
}

// SetMessage gets a reference to the given Array and assigns it to the Message field.
func (o *Transaction) SetMessage(v Array) {
	o.Message = &v
}

// GetMessageDeserialized returns the MessageDeserialized field value if set, zero value otherwise.
func (o *Transaction) GetMessageDeserialized() Array {
	if o == nil || o.MessageDeserialized == nil {
		var ret Array
		return ret
	}
	return *o.MessageDeserialized
}

// GetMessageDeserializedOk returns a tuple with the MessageDeserialized field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetMessageDeserializedOk() (*Array, bool) {
	if o == nil || o.MessageDeserialized == nil {
		return nil, false
	}
	return o.MessageDeserialized, true
}

// HasMessageDeserialized returns a boolean if a field has been set.
func (o *Transaction) HasMessageDeserialized() bool {
	if o != nil && o.MessageDeserialized != nil {
		return true
	}

	return false
}

// SetMessageDeserialized gets a reference to the given Array and assigns it to the MessageDeserialized field.
func (o *Transaction) SetMessageDeserialized(v Array) {
	o.MessageDeserialized = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Transaction) GetCreatedAt() time.Time {
	if o == nil || o.CreatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Transaction) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *Transaction) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *Transaction) GetUpdatedAt() time.Time {
	if o == nil || o.UpdatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *Transaction) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *Transaction) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o Transaction) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.BlockId != nil {
		toSerialize["block_id"] = o.BlockId
	}
	if o.Hash != nil {
		toSerialize["hash"] = o.Hash
	}
	if o.Sender != nil {
		toSerialize["sender"] = o.Sender
	}
	if o.Recipient != nil {
		toSerialize["recipient"] = o.Recipient
	}
	if o.Gas != nil {
		toSerialize["gas"] = o.Gas
	}
	if o.Nonce != nil {
		toSerialize["nonce"] = o.Nonce
	}
	if o.Signature != nil {
		toSerialize["signature"] = o.Signature
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	if o.Message != nil {
		toSerialize["message"] = o.Message
	}
	if o.MessageDeserialized != nil {
		toSerialize["message_deserialized"] = o.MessageDeserialized
	}
	if o.CreatedAt != nil {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.UpdatedAt != nil {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	return json.Marshal(toSerialize)
}

type NullableTransaction struct {
	value *Transaction
	isSet bool
}

func (v NullableTransaction) Get() *Transaction {
	return v.value
}

func (v *NullableTransaction) Set(val *Transaction) {
	v.value = val
	v.isSet = true
}

func (v NullableTransaction) IsSet() bool {
	return v.isSet
}

func (v *NullableTransaction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransaction(val *Transaction) *NullableTransaction {
	return &NullableTransaction{value: val, isSet: true}
}

func (v NullableTransaction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransaction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


